{"version":3,"sources":["Graphics.ts","Component.ts","Config.ts","Val.ts","ArithmeticLogicUnit.ts","Register.ts","CircutNode.ts","InstructionHelper.ts","InstructionMemory.ts","Multiplexer.ts","ALUControl.ts","DataMemory.ts","RegisterFile.ts","ImmSelect.ts","ControlUnit.ts","ConstValue.ts","Simulator.ts","Parser.ts","util.ts","main.ts"],"names":[],"mappings":"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","file":"main.c39d6dcf.map","sourceRoot":"../src","sourcesContent":["export default class Graphics {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n\n    private readonly width: number;\n    private readonly height: number;\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.width = width;\n        this.height = height;\n\n        if (canvas.style.width == undefined || canvas.style.height == undefined) {\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n            console.warn(\"Canvas width or height undefined\");\n        }\n    }\n\n    rescale() {\n        let canvasWidth = this.canvas.clientWidth;\n        let canvasHeight = this.canvas.clientHeight;\n\n        /* Added support for Retina display */\n        this.canvas.width = canvasWidth * window.devicePixelRatio;\n        this.canvas.height = canvasHeight * window.devicePixelRatio;\n\n        let scale = canvasWidth / canvasHeight > this.width / this.height ?\n            canvasHeight / this.height :\n            canvasWidth / this.width;\n\n        let rescaleOffsetX = (canvasWidth - scale * this.width) / 2;\n        let rescaleOffsetY = (canvasHeight - scale * this.height) / 2;\n\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.translate(rescaleOffsetX , rescaleOffsetY);\n        this.ctx.scale(scale * window.devicePixelRatio, scale * window.devicePixelRatio);\n    }\n\n    clear(color: string) {\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.restore();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n    }\n\n    drawPath(path: number[][], strokeStyle: string) {\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(path[0][0], path[0][1]);\n        for (let i = 1; i < path.length; i++) {\n            this.ctx.lineTo(path[i][0], path[i][1]);\n        }\n\n        this.ctx.stroke();\n    }\n\n\n    fillRect(x: number, y: number, w: number, h: number, fillStyle: string, strokeStyle: string) {\n        this.fillPolygon([[x, y], [x + w, y], [x + w, y + h], [x, y + h]], fillStyle, strokeStyle);\n    }\n\n    fillPolygon(point: number[][], fillStyle: string, strokeStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(point[0][0], point[0][1]);\n        for (let i = 1; i < point.length; i++) {\n            this.ctx.lineTo(point[i][0], point[i][1]);\n        }\n\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    fillCircle(x: number, y: number, r: number, fillStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, r, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    drawText(x: number, y: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n        this.ctx.fillText(text, x, y);\n    }\n\n    drawTextCentered(x: number, y: number, width: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n\n        let textWidth = this.ctx.measureText(text).width;\n\n        this.ctx.fillText(text, (x + (width - textWidth) / 2), y);\n    }\n\n    static addOffset(points: number[][], xOffset: number, yOffset: number): number[][] {\n        let updated: number[][] = [];\n\n        for (let idx  in points) {\n            updated.push([xOffset + points[idx][0], yOffset + points[idx][1]]);\n        }\n\n        return updated;\n    }\n\n}","import Graphics from \"./Graphics\";\nimport Val from \"./Val\";\n\nexport default abstract class Component {\n    private static cnt = 0;\n    public readonly id: number;\n\n    public readonly x: number;\n    public readonly y: number;\n\n    protected constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n\n        this.id = Component.cnt++;\n    }\n\n    abstract draw(g: Graphics): void;\n\n    refresh(): void {\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n    }\n\n    mark(caller: Component): void {\n    }\n\n    onFallingEdge(): void {\n    }\n\n    onRisingEdge(): void {\n    }\n}","export default class Config {\n    static readonly backgroundColor: string = \"#ffffff\";\n    static readonly elementFillColor: string = \"#b1e5e0\";\n    static readonly elementStrokeColor: string = \"#000000\";\n    static readonly memoryFillColor: string = \"#fffed0\";\n    static readonly memoryStrokeColor: string = \"#000000\";\n    static readonly lineColor: string = \"#000000\";\n    static readonly signalColor: string = \"#FF0000\";\n    static readonly fontColor: string = \"#000000\";\n\n    static readonly fontSize: number = 20;\n}","export default class Val {\n    readonly val: number;\n    readonly num_bits: number;\n\n    private static mod(n: number, m: number): number {\n        return ((n % m) + m) % m;\n    }\n\n    constructor(val: number = 0, num_bits: number) {\n        this.num_bits = num_bits;\n        this.val = val;\n    }\n\n    static UnsignedInt(val: number, num_bits: number = 32): Val {\n        return new Val(Val.mod(val, 2 ** num_bits), num_bits);\n    }\n\n    asUnsignedInt(): number {\n        return this.val;\n    }\n\n    static SignedInt(val: number, num_bits: number = 32): Val {\n        const max_signed = 2 ** (num_bits - 1) - 1;\n        if (val >= 0)\n            return new Val(Val.mod(val, max_signed), num_bits);\n        if (val < 0)\n            return new Val((max_signed + 1) - Val.mod(val, max_signed), num_bits);\n    }\n\n    asSignedInt(): number {\n        const max_signed = 2 ** (this.num_bits - 1) - 1;\n        if (this.val <= max_signed)\n            return this.val;\n        return -(this.val - (max_signed + 1));\n    }\n\n    asHexString(): string {\n        let str = this.asUnsignedInt().toString(16);\n        while (str.length < this.num_bits / 4) {\n            str = \"0\" + str;\n        }\n        return \"0x\" + str.toUpperCase();\n    }\n\n    asBinaryString(): string {\n        let str = this.asUnsignedInt().toString(2);\n        while (str.length < this.num_bits) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    asShortHexString(): string {\n        return this.asUnsignedInt().toString(16).toLocaleUpperCase();\n    }\n\n    getNumBits(): number {\n        return this.num_bits;\n    }\n\n    // TODO: check if the implementations are correct\n    static add(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() + rhs.asUnsignedInt(), 32);\n    }\n\n    static sub(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() - rhs.asUnsignedInt(), 32);\n    }\n\n    static and(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() & rhs.asUnsignedInt(), 32);\n    }\n\n    static or(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() | rhs.asUnsignedInt(), 32);\n    }\n\n    static xor(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() ^ rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftLeftLogical(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() << rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightLogical(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() >>> rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightArithmetic(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() >> rhs.asUnsignedInt(), 32);\n    }\n\n    static main() {\n        console.log(\"hello world\");\n\n        console.log(this.UnsignedInt(12345).asSignedInt());\n        console.log(this.UnsignedInt(-123).asSignedInt());\n        console.log(this.UnsignedInt(123231).asSignedInt());\n        console.log(this.UnsignedInt(123412).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32 - 1).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32 + 1).asSignedInt());\n\n        console.log(this.SignedInt(1).asSignedInt());\n        console.log(this.SignedInt(0).asSignedInt());\n        console.log(this.SignedInt(-1).asSignedInt());\n\n        console.log(this.SignedInt(-1234567).asSignedInt());\n        console.log(this.SignedInt(7654321).asSignedInt());\n        console.log(this.SignedInt(999999999999999).asHexString());\n\n\n    }\n\n    static HexString(s: string, num_bits : number = 32) {\n        return Val.UnsignedInt(parseInt(s, 16), num_bits);\n    }\n}\n\nexport const VAL_ZERO_32b = Val.UnsignedInt(0, 32);\nexport const VAL_ONE_32b = Val.UnsignedInt(1, 32);\nexport const VAL_TWO_32b = Val.UnsignedInt(2, 32);\nexport const VAL_THREE_32b = Val.UnsignedInt(3, 32);\n\nexport const VAL_ZERO_0b = Val.UnsignedInt(0, 0);\nexport const VAL_ZERO_5b = Val.UnsignedInt(0, 5);","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val, {VAL_ZERO_0b, VAL_ZERO_32b, VAL_ZERO_5b} from \"./Val\";\n\nexport default class ArithmeticLogicUnit extends Component {\n    /* @formatter:off */\n    public static readonly ADD  = new Val(0, 4); /* Addition               */\n    public static readonly SUB  = new Val(1, 4); /* Subtraction            */\n    public static readonly AND  = new Val(2, 4); /* Bitwise AND            */\n    public static readonly OR   = new Val(3, 4); /* Bitwise OR             */\n    public static readonly XOR  = new Val(4, 4); /* Bitwise XOR            */\n    public static readonly SLL  = new Val(5, 4); /* Shift Left Logical     */\n    public static readonly SRL  = new Val(6, 4); /* Shift Right Logical    */\n    public static readonly SRA  = new Val(7, 4); /* Shift Right Arithmetic */\n    public static readonly SLT  = new Val(8, 4); /* Shift Right Arithmetic */\n    public static readonly SLTU = new Val(9, 4); /* Shift Right Arithmetic */\n\n    /* @formatter:on */\n\n    private readonly defaultOp: Val;\n\n    private _resultNode: CircuitNode = null;\n    private _input1Node: CircuitNode = null;\n    private _input2Node: CircuitNode = null;\n    private _selOpNode: CircuitNode = null;\n\n    private input1Value: Val = VAL_ZERO_32b;\n    private input2Value: Val = VAL_ZERO_0b;\n    private selOpValue: Val = VAL_ZERO_5b;\n\n    constructor(x: number, y: number, defaultOp: Val = undefined) {\n        super(x, y);\n        this.defaultOp = defaultOp;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [40, 15], [40, 60], [0, 75], [0, 45], [10, 37.5], [0, 30]],\n            this.x, this.y), Config.elementFillColor, Config.elementStrokeColor);\n    }\n\n    refresh(): void {\n        this.input1Value = undefined;\n        this.input2Value = undefined;\n        this.selOpValue = this.defaultOp;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._input1Node:\n                this.input1Value = value;\n                break;\n\n            case this._input2Node:\n                this.input2Value = value;\n                break;\n\n            case this._selOpNode:\n                this.selOpValue = value;\n                break;\n        }\n\n        if (this.input1Value == undefined || this.input2Value == undefined || this.selOpValue == undefined) {\n            return;\n        }\n\n        let result: Val;\n        switch (this.selOpValue) {\n            case ArithmeticLogicUnit.ADD: {\n                result = Val.add(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SUB: {\n                result = Val.sub(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.AND: {\n                result = Val.and(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.OR: {\n                result = Val.or(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.XOR: {\n                result = Val.xor(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLL: {\n                result = Val.shiftLeftLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRL: {\n                result = Val.shiftRightLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRA: {\n                result = Val.shiftRightArithmetic(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLT: {\n                // TODO: implement\n                break;\n            }\n            case ArithmeticLogicUnit.SLTU: {\n                // TODO: implement\n                break;\n            }\n            default: {\n                console.error(\"Unknown operation\");\n                result = VAL_ZERO_32b;\n            }\n        }\n\n        this._resultNode.forwardSignal(this, result);\n    }\n\n    mark(caller: Component): void {\n        this._input1Node.mark(this);\n        this._input2Node.mark(this);\n\n        if (this.defaultOp == null) {\n            this._selOpNode.mark(this);\n        }\n    }\n\n    set resultNode(node: CircuitNode) {\n        this._resultNode = node;\n    }\n\n    set input1Node(node: CircuitNode) {\n        this._input1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set input2Node(node: CircuitNode) {\n        this._input2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set selOpNode(node: CircuitNode) {\n        this._selOpNode = node;\n        node.addNeighbour(this);\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\n\nexport enum RegisterOrientation {\n    HORIZONTAL,\n    VERTICAL\n}\n\nexport default class Register extends Component {\n    private readonly orientation: RegisterOrientation;\n\n    private _inputNode: CircuitNode = null;\n    private _outNode: CircuitNode = null;\n    private _writeEnable: CircuitNode = null;\n\n    private value: Val = VAL_ZERO_32b;\n\n    private nextValue: Val = undefined;\n\n    constructor(x: number, y: number, orientation: RegisterOrientation = RegisterOrientation.HORIZONTAL) {\n        super(x, y);\n        this.orientation = orientation;\n        this.nextValue = undefined;\n    }\n\n    draw(g: Graphics): void {\n        if (this.orientation == RegisterOrientation.HORIZONTAL) {\n            g.fillRect(this.x, this.y, 150, 25, Config.elementFillColor, Config.elementStrokeColor);\n            g.drawText(this.x + 10, this.y + 21, this.value.asHexString(), Config.fontColor, Config.fontSize);\n        } else if (this.orientation == RegisterOrientation.VERTICAL) {\n            // TODO: implement\n        }\n    }\n\n    refresh(): void {\n        if (this.nextValue) {\n            this.value = this.nextValue;\n        }\n        this.nextValue = undefined;\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnable && this._writeEnable.value.asUnsignedInt() != 0) {\n            this.nextValue = this._inputNode.value;\n            this._inputNode.mark(this);\n        }\n    }\n\n    set inputNode(node: CircuitNode) {\n        this._inputNode = node;\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n\n    set writeEnable(node: CircuitNode) {\n        this._writeEnable = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport Val from \"./Val\";\n\nexport default class CircuitNode extends Component {\n    private readonly defaultValue: Val;\n\n    private neighbours: Component[] = [];\n    private neighbourNodes: CircuitNode[] = [];\n\n    private _value: Val;\n    private signaler: Component;\n    private marked: boolean;\n\n    constructor(x: number, y: number, defaultValue: Val = undefined) {\n        super(x, y);\n        this.defaultValue = defaultValue;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillCircle(this.x, this.y, 2, Config.signalColor);\n        this.neighbourNodes.forEach(el =>\n            g.drawLine(this.x, this.y, el.x, el.y, el.marked ? Config.signalColor : Config.lineColor)\n        );\n    }\n\n    refresh(): void {\n        this._value = this.defaultValue;\n        this.signaler = undefined;\n        this.marked = false;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._value = value;\n        this.signaler = signaler;\n\n        this.neighbours.forEach(nb => {\n            if (nb != signaler) {\n                nb.forwardSignal(this, value);\n            }\n        })\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n        if (this.signaler) {\n            this.signaler.mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    addNeighbour(neighbour: Component) {\n        this.neighbours.push(neighbour);\n\n        if (neighbour instanceof CircuitNode) {\n            this.neighbourNodes.push(neighbour);\n        }\n    }\n\n\n    get value(): Val {\n        return this._value;\n    }\n}","import Val from \"./Val\";\n\nexport default class InstructionHelper {\n    static readonly INSTR_SIZE = 32;\n    static readonly OP_CODE_SIZE = 7;\n\n    /* @formatter:off */\n    static readonly OP_CODE_ALU    = \"0110011\";\n    static readonly OP_CODE_ALUI   = \"0010011\";\n    static readonly OP_CODE_LW     = \"0000011\";\n    static readonly OP_CODE_SW     = \"0100011\";\n    static readonly OP_CODE_BRANCH = \"1100011\";\n    static readonly OP_CODE_JAL    = \"1101111\";\n    static readonly OP_CODE_JALR   = \"1100111\";\n\n    /* ALU Functions */\n    static readonly FUNCT_ADD  = \"0000000000\";\n    static readonly FUNCT_SUB  = \"0100000000\";\n    static readonly FUNCT_SLL  = \"0000000001\";\n    static readonly FUNCT_SLT  = \"0000000010\";\n    static readonly FUNCT_SLTU = \"0000000011\";\n    static readonly FUNCT_XOR  = \"0000000100\";\n    static readonly FUNCT_SRL  = \"0000000101\";\n    static readonly FUNCT_SRA  = \"0100000101\";\n    static readonly FUNCT_OR   = \"0000000110\";\n    static readonly FUNCT_AND  = \"0000000111\";\n\n    /* ALUi Functions */\n    static readonly FUNCT_ADDI   = \"000\";\n    static readonly FUNCT_SLTI   = \"010\";\n    static readonly FUNCT_SLTIU  = \"011\";\n    static readonly FUNCT_XORI   = \"100\";\n    static readonly FUNCT_ORI    = \"110\";\n    static readonly FUNCT_ANDI   = \"111\";\n\n    static readonly FUNCT_SLLI = \"0000000001\";\n    static readonly FUNCT_SRLI = \"0000000101\";\n    static readonly FUNCT_SRAI = \"0100000101\";\n\n    /* Load Functions */\n    static readonly FUNCT_LB  = \"000\";\n    static readonly FUNCT_LH  = \"001\";\n    static readonly FUNCT_LW  = \"010\";\n    static readonly FUNCT_LBU = \"100\";\n    static readonly FUNCT_LHU = \"10\";\n\n    /* Store Functions */\n    static readonly FUNCT_SB = \"000\";\n    static readonly FUNCT_SH = \"001\";\n    static readonly FUNCT_SW = \"010\";\n\n    /* Branch Functions */\n    static readonly FUNCT_BEQ  = \"000\";\n    static readonly FUNCT_BNE  = \"001\";\n    static readonly FUNCT_BLT  = \"100\";\n    static readonly FUNCT_BGE  = \"101\";\n    static readonly FUNCT_BLTU = \"110\";\n    static readonly FUNCT_BGEU = \"111\";\n\n    /* @formatter:on */\n\n    private static convertAndPad(num: Number, len: number = 32) {\n        let str = num.toString(2);\n        while (str.length < len) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    static toBitString(instr: Val) {\n        return this.convertAndPad(instr.asUnsignedInt());\n    }\n\n    static getOpCodeStr(inst: Val) {\n        return this.toBitString(inst).substr(this.INSTR_SIZE - this.OP_CODE_SIZE);\n    }\n\n    static getRd(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(20, 5), 2);\n    }\n\n    static getRs1(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(12, 5), 2);\n    }\n\n    static getRs2(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(7, 5), 2);\n    }\n\n    static getImmIType(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(0, 12), 2);\n    }\n\n    static getImmBType(instr: Val): number {\n        let str = instr.asBinaryString();\n        let imm12 = str.substr(0, 1);\n        let imm10 = str.substr(1, 6);\n        let imm4 = str.substr(20, 4);\n        let imm11 = str.substr(24, 1);\n\n        return parseInt(imm12 + imm11 + imm10 + imm4 + \"0\", 2);\n    }\n\n    static getImmSType(instr: Val): number {\n        let str = instr.asBinaryString();\n        let imm11 = str.substr(0, 7);\n        let imm4 = str.substr(20, 5);\n\n        return parseInt(imm11 + imm4, 2);\n    }\n\n    static createRType(opCode: string, funct: string, rd: number, rs1: number, rs2: number): Val {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) + funct3 +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createIType(opCode: string, funct: string, rd: number, rs1: number, imm: number): Val {\n        let instr = this.convertAndPad(imm, 12) + this.convertAndPad(rs1, 5) + funct +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createITypeShift(opCode: string, funct: string, rd: number, rs1: number, shamt: number) {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 + this.convertAndPad(shamt, 5) + this.convertAndPad(rs1, 5) + funct3 +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createSType(opCode: string, funct: string, rs1: number, rs2: number, imm: number): Val {\n        let immStr = this.convertAndPad(imm, 12);\n        let imm11 = immStr.substr(0, 7);\n        let imm4 = immStr.substr(7, 5);\n\n        let instr = imm11 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) + funct + imm4 + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createBType(opCode: string, funct: string, rs1: number, rs2: number, imm: number) {\n        let immStr = this.convertAndPad(imm, 12);\n        let imm12 = immStr.substr(0, 1);\n        let imm10 = immStr.substr(2, 6);\n        let imm4 = immStr.substr(8, 4);\n        let imm11 = immStr.substr(1, 1);\n\n        let instr = imm12 + imm10 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) +\n            funct + imm4 + imm11 + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static decode(instr: Val): string {\n        let opCode = this.getOpCodeStr(instr);\n\n        switch (opCode) {\n            case this.OP_CODE_ALU:\n                return this.decodeALU(instr);\n\n            case this.OP_CODE_ALUI:\n                return this.decodeALUI(instr);\n\n            case this.OP_CODE_LW:\n                return this.decodeLW(instr);\n\n            case this.OP_CODE_SW:\n                return this.decodeSW(instr);\n\n            case this.OP_CODE_BRANCH:\n                return this.decodeBRANCH(instr);\n\n            case this.OP_CODE_JAL:\n                return this.decodeJAL(instr);\n\n            case this.OP_CODE_JALR:\n                return this.decodeJALR(instr);\n\n            default:\n                console.error(\"Unsupported OP Code: \" + opCode);\n                return instr.asHexString();\n        }\n    }\n\n    static decodeALU(instr: Val): string {\n        let func = instr.asBinaryString().substr(0, 7) + instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_ADD: {\n                name = \"ADD\";\n                break;\n            }\n            case this.FUNCT_SUB: {\n                name = \"SUB\";\n                break;\n            }\n            case this.FUNCT_SLL: {\n                name = \"SLT\";\n                break;\n            }\n            case this.FUNCT_SLT: {\n                name = \"SLT\";\n                break;\n            }\n            case this.FUNCT_SLTIU: {\n                name = \"SLTU\";\n                break;\n            }\n            case this.FUNCT_XOR: {\n                name = \"XOR\";\n                break;\n            }\n            case this.FUNCT_SRL: {\n                name = \"SRL\";\n                break;\n            }\n            case this.FUNCT_SRA: {\n                name = \"SRA\";\n                break;\n            }\n            case this.FUNCT_OR: {\n                name = \"OR\";\n                break;\n            }\n            case this.FUNCT_AND: {\n                name = \"\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", x\" + this.getRs1(instr) + \", x\" + this.getRs2(instr);\n    }\n\n    static decodeALUI(instr: Val): string {\n        let func7 = instr.asBinaryString().substr(0, 7);\n        let func3 = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func3) {\n            case this.FUNCT_ADDI: {\n                name = \"ADDI\";\n                break;\n            }\n            case this.FUNCT_SLTI: {\n                name = \"SLTI\";\n                break;\n            }\n            case this.FUNCT_SLTIU: {\n                name = \"SLTIU\";\n                break;\n            }\n            case this.FUNCT_XORI: {\n                name = \"XORI\";\n                break;\n            }\n            case this.FUNCT_ORI: {\n                name = \"ORI\";\n                break;\n            }\n            case this.FUNCT_ANDI: {\n                name = \"ANDI\";\n                break;\n            }\n        }\n\n        switch (func7 + func3) {\n            case this.FUNCT_SLLI: {\n                name = \"SSLI\";\n                break;\n            }\n            case this.FUNCT_SRLI: {\n                name = \"SRLI\";\n                break;\n            }\n            case this.FUNCT_SRAI: {\n                name = \"SRAI\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", x\" + this.getRs1(instr) + \", \" +\n            this.getImmIType(instr).toString(10);\n    }\n\n    static decodeLW(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_LB: {\n                name = \"LB\";\n                break;\n            }\n            case this.FUNCT_LH: {\n                name = \"LH\";\n                break;\n            }\n            case this.FUNCT_LW: {\n                name = \"LW\";\n                break;\n            }\n            case this.FUNCT_LBU: {\n                name = \"LBU\";\n                break;\n            }\n            case this.FUNCT_LHU: {\n                name = \"LHU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", 0x\" + this.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + this.getRs1(instr) + \")\";\n    }\n\n    static decodeSW(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_SB: {\n                name = \"SW\";\n                break;\n            }\n            case this.FUNCT_SH: {\n                name = \"SW\";\n                break;\n            }\n            case this.FUNCT_SW: {\n                name = \"SW\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRs1(instr) + \", 0x\" + this.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + this.getRs2(instr) + \")\";\n    }\n\n    static decodeBRANCH(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_BEQ: {\n                name = \"BEQ\";\n                break;\n            }\n            case this.FUNCT_BNE: {\n                name = \"BNE\";\n                break;\n            }\n            case this.FUNCT_BLT: {\n                name = \"BLT\";\n                break;\n            }\n            case this.FUNCT_BGE: {\n                name = \"BGE\";\n                break;\n            }\n            case this.FUNCT_BLTU: {\n                name = \"BLTU\";\n                break;\n            }\n            case this.FUNCT_BGEU: {\n                name = \"BGEU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRs1(instr) + \", x\" + this.getRs2(instr) +\n            \", 0x\" + this.getImmBType(instr).toString(16).toUpperCase();\n    }\n\n    static decodeJAL(instr: Val): string {\n        return \"JAL instruction\";\n    }\n\n    static decodeJALR(instr: Val): string {\n        return \"JALR instruction\";\n    }\n\n    static compare(v: Val, s: string) {\n        console.log(v.asBinaryString());\n        console.log(s.replace(/ /g, \"\"));\n    }\n\n    static main(args: String[] = []): void {\n        this.compare(this.createRType(this.OP_CODE_ALU, this.FUNCT_ADD, 2, 1, 1),\n            \"0000000 00001 00001 000 00010 0110011\");\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class InstructionMemory extends Component {\n    public static readonly SIZE: number = 32;\n    private readonly values: Val[] = [];\n\n    private _addressNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number, values: Val[]) {\n        super(x, y);\n        this.values = values;\n\n        this.values[0] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 1, 0, 5);\n\n        this.values[1] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 2, 0, 7);\n\n        this.values[2] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_ADD, 3, 1, 2);\n\n        this.values[3] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[4] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_SUB, 4, 3, 1);\n\n        this.values[5] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_ADD, 5, 4, 2);\n\n        this.values[6] = InstructionHelper.createITypeShift(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_SRLI, 6, 5, 1);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, InstructionMemory.SIZE * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < InstructionMemory.SIZE; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._outputDataNode.forwardSignal(this, this.values[value.asUnsignedInt() / 4]);\n    }\n\n    mark(caller: Component): void {\n        this._addressNode.mark(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\n\nexport enum MultiplexerOrientation {\n    LEFT,\n    RIGHT\n}\n\nexport default class Multiplexer extends Component {\n    private readonly ninputs: number;\n    private readonly orientation: MultiplexerOrientation;\n    private readonly inputDistance: number;\n\n    private readonly _inputNodes: CircuitNode[];\n    private _selInputNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private selValue: number = undefined;\n    private inputValues: Val[] = [];\n\n    private marked = false;\n\n    constructor(x: number, y: number, ninputs: number,\n                orientation: MultiplexerOrientation = MultiplexerOrientation.RIGHT, inputDistance: number = 15) {\n        super(x, y);\n        this.ninputs = ninputs;\n        this.orientation = orientation;\n        this.inputDistance = inputDistance;\n        this._inputNodes = [];\n    }\n\n    draw(g: Graphics): void {\n        let height = 50 + (this.ninputs - 1) * this.inputDistance;\n\n        if (this.orientation == MultiplexerOrientation.RIGHT) {\n            g.fillPolygon(Graphics.addOffset([[0, 0], [25, 15], [25, height - 15], [0, height]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        } else {\n            g.fillPolygon(Graphics.addOffset([[0, 15], [25, 0], [25, height], [0, height - 15]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        }\n\n        if (this.marked) {\n            let y = this._inputNodes[this.selValue].y;\n            let xCenter = this.x + 12.5;\n            let yCenter = this.y + height / 2;\n            if (this.orientation == MultiplexerOrientation.RIGHT) {\n                g.drawPath([[this.x, y], [xCenter, y], [xCenter, yCenter], [this.x + 25, yCenter]],\n                    Config.signalColor);\n            } else {\n                g.drawPath([[this.x + 25, y], [xCenter, y], [xCenter, yCenter], [this.x, yCenter]],\n                    Config.signalColor);\n            }\n        }\n\n        // if (this.orientation == MultiplexerOrientation.RIGHT) {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x + 25, this.y + height / 2, 2, \"red\");\n        // } else {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x + 25, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x, this.y + height / 2, 2, \"red\");\n        // }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        if (signaler == this._selInputNode) {\n            this.selValue = value.asUnsignedInt();\n        } else {\n            for (let i in this._inputNodes) {\n                if (signaler == this._inputNodes[i]) {\n                    this.inputValues[i] = value;\n                    break;\n                }\n            }\n        }\n\n        if (this.selValue != undefined && this.inputValues[this.selValue]) {\n            this._outNode.forwardSignal(this, this.inputValues[this.selValue]);\n        }\n    }\n\n    refresh(): void {\n        this.selValue = undefined;\n        this.inputValues = [];\n        this.marked = false;\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n\n        this._selInputNode.mark(this);\n        if (this._inputNodes[this.selValue]) {\n            this._inputNodes[this.selValue].mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    setInputNodes(idx: number, node: CircuitNode) {\n        this._inputNodes[idx] = node;\n        node.addNeighbour(this);\n    }\n\n    set selInputNode(node: CircuitNode) {\n        this._selInputNode = node;\n        node.addNeighbour(this);\n    }\n\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class ALUControl extends Component {\n    public static readonly FUNC = Val.UnsignedInt(0, 2);\n    public static readonly OP = Val.UnsignedInt(1, 2);\n    public static readonly ADD = Val.UnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Val;\n    private ctrlValue: Val;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"ALU\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 10, this.y + 43, \"Control\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Val;\n\n        switch (this.ctrlValue) {\n            case ALUControl.FUNC: {\n                result = this.handleFunc();\n                break;\n            }\n            case ALUControl.OP: {\n                result = this.handleOp();\n                break;\n            }\n            case ALUControl.ADD: {\n                result = ALUControl.ADD;\n                break;\n            }\n            default: {\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        if (result == undefined) {\n            console.log(\"Unsupported operation\")\n        } else {\n            this._outNode.forwardSignal(this, result);\n        }\n\n    }\n\n    private handleFunc(): Val {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n        let func = func7 + func3;\n\n        switch (func) {\n            case InstructionHelper.FUNCT_ADD:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionHelper.FUNCT_SUB:\n                return ArithmeticLogicUnit.SUB;\n\n            case InstructionHelper.FUNCT_SLL:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionHelper.FUNCT_SLT:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionHelper.FUNCT_SLTU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionHelper.FUNCT_XOR:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_SRL:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_SRA:\n                return ArithmeticLogicUnit.SRA;\n\n            case InstructionHelper.FUNCT_OR:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionHelper.FUNCT_AND:\n                return ArithmeticLogicUnit.AND;\n\n            default:\n                return null;\n        }\n    }\n\n    private handleOp(): Val {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n\n        switch (func3) {\n            case InstructionHelper.FUNCT_ADDI:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionHelper.FUNCT_SLTI:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionHelper.FUNCT_SLTIU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionHelper.FUNCT_XORI:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_ORI:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionHelper.FUNCT_ANDI:\n                return ArithmeticLogicUnit.AND;\n        }\n\n        switch (func7 + func3) {\n            case InstructionHelper.FUNCT_SLLI:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionHelper.FUNCT_SRLI:\n                return ArithmeticLogicUnit.SRL;\n\n            case InstructionHelper.FUNCT_SRAI:\n                return ArithmeticLogicUnit.SRA;\n\n            default:\n                return undefined;\n        }\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import CircuitNode from \"./CircutNode\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport Component from \"./Component\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\n\nexport default class DataMemory extends Component {\n    public static readonly WRITE_NO = Val.UnsignedInt(0, 1);\n    public static readonly WRITE_YES = Val.UnsignedInt(1, 1);\n\n    private readonly size: number = 32;\n    private values: Val[] = [];\n\n    private _writeEnNode: CircuitNode;\n    private _addressNode: CircuitNode;\n    private _inputDataNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._outputDataNode.forwardSignal(this, this.values[value.asUnsignedInt() / 4]);\n    }\n\n    set writeEnNode(value: CircuitNode) {\n        this._writeEnNode = value;\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set inputDataNode(value: CircuitNode) {\n        this._inputDataNode = value;\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class RegisterFile extends Component {\n    public static readonly WRITE_NO = Val.UnsignedInt(0, 1);\n    public static readonly WRITE_YES = Val.UnsignedInt(1, 1);\n\n    private readonly size: number = 16;\n    private values: Val[] = [];\n\n    private nextValue: Val;\n    private nextSel: number;\n\n    private _readSel1Node: CircuitNode;\n    private _readSel2Node: CircuitNode;\n    private _inputWriteSelNode: CircuitNode;\n\n    private _inputWriteEnNode: CircuitNode;\n    private _inputWriteDataNode: CircuitNode;\n\n    private _readData1Node: CircuitNode;\n    private _readData2Node: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    refresh() : void {\n        if (this.nextSel && this.nextValue) {\n            this.values[this.nextSel] = this.nextValue;\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        if (signaler == this._readSel1Node) {\n            this._readData1Node.forwardSignal(this, this.values[InstructionHelper.getRs1(value)]);\n        } else if (signaler == this._readSel2Node) {\n            this._readData2Node.forwardSignal(this, this.values[InstructionHelper.getRs2(value)]);\n        } else {\n            console.error(\"Error\");\n        }\n    }\n\n    onRisingEdge(): void {\n        if (this._inputWriteEnNode.value == RegisterFile.WRITE_YES) {\n            this.nextSel = InstructionHelper.getRd(this._inputWriteSelNode.value);\n\n            if (this._inputWriteDataNode.value == null) {\n                console.log(\"Error\");\n                return;\n            }\n\n            this.nextValue = this._inputWriteDataNode.value;\n            this._inputWriteEnNode.mark(this);\n            this._inputWriteSelNode.mark(this);\n            this._inputWriteDataNode.mark(this);\n        }\n    }\n\n\n    mark(caller: Component): void {\n        switch (caller) {\n            case this._readData1Node: {\n                this._readSel1Node.mark(this);\n                break;\n            }\n            case this._readData2Node: {\n                this._readSel2Node.mark(this);\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n    }\n\n    set readSel1Node(node: CircuitNode) {\n        this._readSel1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set readSel2Node(node: CircuitNode) {\n        this._readSel2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set inputWriteSelNode(node: CircuitNode) {\n        this._inputWriteSelNode = node;\n    }\n\n    set inputWriteEnNode(node: CircuitNode) {\n        this._inputWriteEnNode = node;\n    }\n\n    set inputWriteDataNode(node: CircuitNode) {\n        this._inputWriteDataNode = node;\n    }\n\n    set readData1Node(node: CircuitNode) {\n        this._readData1Node = node;\n    }\n\n    set readData2Node(node: CircuitNode) {\n        this._readData2Node = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class ImmSelect extends Component {\n    public static readonly ITYPE = Val.UnsignedInt(0, 2);\n    public static readonly BRTYPE = Val.UnsignedInt(1, 2);\n    public static readonly BSTYPE = Val.UnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Val;\n    private ctrlValue: Val;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"Imm\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 15, this.y + 43, \"Select\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: number;\n\n        switch (this.ctrlValue) {\n            case ImmSelect.ITYPE: {\n                result = InstructionHelper.getImmIType(this.instrValue);\n                break;\n            }\n            case ImmSelect.BRTYPE: {\n                result = InstructionHelper.getImmBType(this.instrValue);\n                break;\n            }\n            case ImmSelect.BSTYPE: {\n                result = InstructionHelper.getImmSType(this.instrValue);\n                break;\n            }\n            default: {\n                result = 0;\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        this._outNode.forwardSignal(this, new Val(result, 32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val, {VAL_ONE_32b, VAL_THREE_32b, VAL_TWO_32b, VAL_ZERO_32b} from \"./Val\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport RegisterFile from \"./RegisterFile\";\nimport InstructionHelper from \"./InstructionHelper\";\nimport ImmSelect from \"./ImmSelect\";\n\nexport default class ControlUnit extends Component {\n    private _instrNode: CircuitNode;\n\n    private _PCSelNode: CircuitNode;\n    private _RegWriteEn: CircuitNode;\n    private _MemWrite: CircuitNode;\n    private _WBSel: CircuitNode;\n    private _WASel: CircuitNode;\n    private _ImmSel: CircuitNode;\n    private _FuncSel: CircuitNode;\n    private _Op2Sel: CircuitNode;\n\n    private instrValue: Val = VAL_ZERO_32b;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 250, 125, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawTextCentered(this.x, this.y + 45, 250, \"Control\", Config.fontColor, Config.fontSize);\n        g.drawTextCentered(this.x, this.y + 70, 250, \"Unit\", Config.fontColor, Config.fontSize);\n\n        g.fillRect(this.x + 10, this.y + 90, 230, 25,\n            Config.memoryFillColor, Config.memoryStrokeColor);\n        g.drawText(this.x + 20, this.y + 90 + 21, InstructionHelper.decode(this.instrValue),\n            Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n\n        let opcode = InstructionHelper.getOpCodeStr(this.instrValue);\n        let ImmSel, Op2Sel, FuncSel, MemWr, RFWen, WBSel, WASel, PCSel: Val;\n\n        switch (opcode) {\n            case InstructionHelper.OP_CODE_ALU : {\n                ImmSel = undefined;\n                Op2Sel = VAL_ZERO_32b;\n                FuncSel = ALUControl.FUNC;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_ALUI : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.OP;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_LW : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ONE_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_SW : {\n                ImmSel = ImmSelect.BSTYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_YES;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_BRANCH : {\n                ImmSel = ImmSelect.BRTYPE;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = true ? VAL_ZERO_32b : VAL_THREE_32b; // TODO\n                break\n            }\n            case InstructionHelper.OP_CODE_JAL : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ZERO_32b;\n                PCSel = VAL_TWO_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_JALR : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_ONE_32b;\n                break\n            }\n\n            default: {\n                console.error(\"Unknown OP Code: \" + opcode);\n                PCSel = VAL_THREE_32b;\n            }\n        }\n\n        if (ImmSel) this._ImmSel.forwardSignal(this, ImmSel);\n        if (Op2Sel) this._Op2Sel.forwardSignal(this, Op2Sel);\n        if (FuncSel) this._FuncSel.forwardSignal(this, FuncSel);\n        if (MemWr) this._MemWrite.forwardSignal(this, MemWr);\n        if (RFWen) this._RegWriteEn.forwardSignal(this, RFWen);\n        if (WBSel) this._WBSel.forwardSignal(this, WBSel);\n        if (WASel) this._WASel.forwardSignal(this, WASel);\n        if (PCSel) this._PCSelNode.forwardSignal(this, PCSel);\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set PCSelNode(node: CircuitNode) {\n        this._PCSelNode = node;\n    }\n\n    set RegWriteEn(node: CircuitNode) {\n        this._RegWriteEn = node;\n    }\n\n    set MemWrite(node: CircuitNode) {\n        this._MemWrite = node;\n    }\n\n    set WBSel(node: CircuitNode) {\n        this._WBSel = node;\n    }\n\n    set WASel(node: CircuitNode) {\n        this._WASel = node;\n    }\n\n    set ImmSel(node: CircuitNode) {\n        this._ImmSel = node;\n    }\n\n    set FuncSel(node: CircuitNode) {\n        this._FuncSel = node;\n    }\n\n    set Op2Sel(node: CircuitNode) {\n        this._Op2Sel = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val from \"./Val\";\n\nexport default class ConstValue extends Component {\n    readonly value: Val;\n    private _outNode: CircuitNode;\n\n    constructor(x: number, y: number, value: Val) {\n        super(x, y);\n        this.value = value;\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [0, 25], [25, 25], [25, 0]], this.x, this.y),\n            Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 5, this.y + 20, this.value.asShortHexString(), Config.fontColor, Config.fontSize);\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    mark(caller: Component): void {\n        // TODO: change color\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Graphics from \"./Graphics\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport Register from \"./Register\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Component from \"./Component\";\nimport InstructionMemory from \"./InstructionMemory\";\nimport Multiplexer, {MultiplexerOrientation} from \"./Multiplexer\";\nimport ControlUnit from \"./ControlUnit\";\nimport ConstValue from \"./ConstValue\";\nimport RegisterFile from \"./RegisterFile\";\nimport ImmSelect from \"./ImmSelect\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport Val from \"./Val\";\n\nexport default class Simulator {\n    protected elements: Component[] = [];\n    private readonly g: Graphics;\n    private initialInstruct : Val[];\n\n    constructor(canvas: HTMLCanvasElement, parsed: Val[]) {\n        this.g = new Graphics(canvas, 1200, 800);\n        this.load(parsed);\n    }\n\n    create() {\n        let PCRegister = new Register(35, 230);\n        let instrMemory = new InstructionMemory(60, 285, this.initialInstruct);\n        let PCStep = new ConstValue(150, 135, Val.UnsignedInt(4));\n        let PCAdder = new ArithmeticLogicUnit(205, 135, ArithmeticLogicUnit.ADD);\n        let PCSelMux = new Multiplexer(210, 25, 4, MultiplexerOrientation.LEFT);\n        let controlUnit = new ControlUnit(170, 450);\n\n        this.elements.push(PCRegister, instrMemory, PCStep, PCSelMux, PCAdder, controlUnit);\n\n        let WASel1 = new ConstValue(450, 520, Val.UnsignedInt(1));\n        let WASelMux = new Multiplexer(485, 520, 2);\n        let registerFile = new RegisterFile(550, 350);\n        let immSelect = new ImmSelect(670, 550);\n        let ALUCtrl = new ALUControl(740, 630);\n\n        this.elements.push(WASel1, registerFile, WASelMux, immSelect, ALUCtrl);\n\n        let op2SelMux = new Multiplexer(850, 500, 2);\n        let ALU = new ArithmeticLogicUnit(895, 400);\n\n        this.elements.push(op2SelMux, ALU);\n\n        let dataMemory = new DataMemory(985, 200);\n        let WBSelMux = new Multiplexer(1135, 600, 3);\n\n        this.elements.push(dataMemory, WBSelMux);\n\n        /* PC enable write */\n        let node = new CircuitNode(65, 230, Val.UnsignedInt(1));\n        PCRegister.writeEnable = node;\n        this.elements.push(node); // Not required\n\n        let path: CircuitNode[];\n\n        /* PCSelMux ->  PC */\n        path = this.createPath([[210, 72.5], [25, 72.5], [25, 242.5], [35, 242.5]]);\n        PCSelMux.outNode = path[0];\n        PCRegister.inputNode = path[path.length - 1];\n\n        /* PC Step -> PC Adder */\n        path = this.createPath([[175, 147.5], [205, 147.5]]);\n        PCStep.outNode = path[0];\n        PCAdder.input1Node = path[path.length - 1];\n\n        /* PC Register -> PC Adder */\n        path = this.createPath([[185, 242.5], [195, 242.5], [195, 197.5], [205, 197.5]]);\n        PCRegister.outNode = path[0];\n        PCAdder.input2Node = path[path.length - 1];\n\n        let PCRegisterNode = path[1];\n\n        /* PC Adder -> PCSelMux */\n        path = this.createPath([[245, 172.5], [255, 172.5], [255, 95], [235, 95]]);\n        PCAdder.resultNode = path[0];\n        PCSelMux.setInputNodes(3, path[path.length - 1]);\n\n        /* PC Register -> Instruction memory */\n        path = this.createPath([[195, 242.5], [195, 275], [110, 275], [110, 285]]);\n        PCRegisterNode.addNeighbour(path[0]);\n        instrMemory.addressNode = path[path.length - 1];\n\n        /* Instruction memory -> instrNode */\n        path = this.createPath([[160, 412.5], [295, 412.5]]);\n        instrMemory.outputDataNode = path[0];\n\n        let instrNode = path[path.length - 1];\n\n        /* instrNode -> Control unit */\n        path = this.createPath([[295, 412.5], [295, 450]]);\n        instrNode.addNeighbour(path[0]);\n        controlUnit.instrNode = path[path.length - 1];\n\n        /* Extend instruction wire */\n        node = new CircuitNode(430, 412.5);\n        this.elements.push(node);\n        instrNode.addNeighbour(node);\n        instrNode = node;\n\n        /* WASel1 -> WASelMux */\n        path = this.createPath([[475, 532.5], [485, 532.5]]);\n        WASel1.outNode = path[1];\n        WASelMux.setInputNodes(0, path[path.length - 1]);\n\n        /* WASelMux -> Register File */\n        path = this.createPath([[510, 552.5], [550, 552.5]]);\n        WASelMux.outNode = path[0];\n        registerFile.inputWriteSelNode = path[path.length - 1];\n\n        /* instrNode -> RF Write select */\n        path = this.createPath([[430, 570], [485, 570]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeBottom = path[0];\n        WASelMux.setInputNodes(1, path[path.length - 1]);\n\n        /* instrNode -> ImmSelect */\n        path = this.createPath([[430, 620], [660, 620], [660, 575], [670, 575]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        immSelect.instrNode = path[path.length - 1];\n\n        /* instrNode -> ALU Control */\n        path = this.createPath([[430, 655], [740, 655]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        ALUCtrl.instrNode = path[path.length - 1];\n\n        /* instrNode -> ReadSel2 */\n        path = this.createPath([[430, 390], [550, 390]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeTop = path[0];\n        registerFile.readSel2Node = path[path.length - 1];\n\n        /* instrNode -> ReadSel1 */\n        path = this.createPath([[430, 370], [550, 370]]);\n        instrNodeTop.addNeighbour(path[0]);\n        instrNodeTop = path[0];\n        registerFile.readSel1Node = path[path.length - 1];\n\n        /* ImmSelect -> op2SelMux */\n        path = this.createPath([[770, 575], [790, 575], [790, 550], [850, 550]]);\n        immSelect.outNode = path[0];\n        op2SelMux.setInputNodes(1, path[path.length - 1]);\n\n        /* RF ReadData2 -> op2SelMux */\n        path = this.createPath([[650, 390], [670, 390], [670, 525], [830, 525], [850, 525]]);\n        registerFile.readData2Node = path[0];\n        op2SelMux.setInputNodes(0, path[path.length - 1]);\n        let readData2Node = path[path.length - 2];\n\n        /* RF ReadData1 -> ALU */\n        path = this.createPath([[650, 370], [885, 370], [885, 415], [895, 415]]);\n        registerFile.readData1Node = path[0];\n        ALU.input1Node = path[path.length - 1];\n\n        /* op2SelMux -> ALU */\n        path = this.createPath([[875, 532.5], [885, 532.5], [885, 460], [895, 460]]);\n        op2SelMux.outNode = path[0];\n        ALU.input2Node = path[path.length - 1];\n\n        /* ALU Control -> ALU */\n        path = this.createPath([[840, 655], [915, 655], [915, 467.5]]);\n        ALUCtrl.outNode = path[0];\n        ALU.selOpNode = path[path.length - 1];\n\n        /* ALU -> WBSel Mux */\n        path = this.createPath([[935, 437.5], [960, 437.5], [960, 710], [1110, 710], [1110, 655], [1135, 655]]);\n        ALU.resultNode = path[0];\n        WBSelMux.setInputNodes(2, path[path.length - 1]);\n\n        /* WBSel Mux -> RF WriteData */\n        path = this.createPath([[1160, 640], [1180, 640], [1180, 730], [530, 730], [530, 590], [550, 590]]);\n        WBSelMux.outNode = path[0];\n        registerFile.inputWriteDataNode = path[path.length - 1];\n\n        /* RF ReadData2 -> DataMemory */\n        path = this.createPath([[830, 610], [985, 610]]);\n        readData2Node.addNeighbour(path[0]);\n        dataMemory.inputDataNode = path[path.length - 1];\n\n        /*\n         *Control signals\n         */\n\n        /* PCSel */\n        path = this.createPath([[222.5, 10], [222.5, 32.5]]);\n        controlUnit.PCSelNode = path[0];\n        PCSelMux.selInputNode = path[path.length - 1];\n\n        /* RegEnWrite */\n        path = this.createPath([[575, 10], [575, 350]]);\n        controlUnit.RegWriteEn = path[0];\n        registerFile.inputWriteEnNode = path[path.length - 1];\n\n        /* MemWrite */\n        path = this.createPath([[1010, 10], [1010, 200]]);\n        controlUnit.MemWrite = path[0];\n        dataMemory.writeEnNode = path[path.length - 1];\n\n        /* WBSel */\n        path = this.createPath([[1147.5, 10], [1147.5, 607.5]]);\n        controlUnit.WBSel = path[0];\n        WBSelMux.selInputNode = path[path.length - 1];\n\n        /* WASel */\n        path = this.createPath([[497.5, 790], [497.5, 577.5]]);\n        controlUnit.WASel = path[0];\n        WASelMux.selInputNode = path[path.length - 1];\n\n        /* ImmSel */\n        path = this.createPath([[720, 790], [720, 600]]);\n        controlUnit.ImmSel = path[0];\n        immSelect.controlNode = path[path.length - 1];\n\n        /* FuncSel */\n        path = this.createPath([[790, 790], [790, 680]]);\n        controlUnit.FuncSel = path[0];\n        ALUCtrl.controlNode = path[path.length - 1];\n\n        /* Op2Sel */\n        path = this.createPath([[862.5, 790], [862.5, 557.5]]);\n        controlUnit.Op2Sel = path[0];\n        op2SelMux.selInputNode = path[path.length - 1];\n    }\n\n    private createPath(path: number[][]): CircuitNode[] {\n        let pathNodes: CircuitNode[] = [];\n\n        pathNodes.push(new CircuitNode(path[0][0], path[0][1]));\n        let last = pathNodes[0];\n\n        for (let i = 1; i < path.length; i++) {\n            let node = new CircuitNode(path[i][0], path[i][1]);\n            last.addNeighbour(node);\n            pathNodes.push(node);\n            last = node;\n        }\n\n        pathNodes.forEach(el => this.elements.push(el));\n\n        return pathNodes;\n    }\n\n    draw() {\n        this.g.rescale();\n        this.g.clear(Config.backgroundColor);\n\n        this.elements.forEach(el => el.draw(this.g))\n    }\n\n    step() {\n        console.log(\"Step\");\n        this.elements.forEach(el => el.refresh());\n        this.elements.forEach(el => el.onFallingEdge());\n        this.elements.forEach(el => el.onRisingEdge());\n        this.draw();\n    }\n\n    load(parsed: Val[]) {\n        this.initialInstruct = parsed;\n        this.reset();\n    }\n\n    reset() {\n        this.elements = [];\n        this.create();\n        this.step();\n    }\n}","import Val, {VAL_ZERO_32b} from \"././Val\";\nimport InstructionMemory from \"./InstructionMemory\";\nimport InstructionHelper from \"./InstructionHelper\";\n\n\nexport default class Parser {\n    static parse(textContent : String) : Val[] {\n\n        let ret : Val[] = [];\n        let lines = textContent.split('\\n');\n        for(let i = 0; i < lines.length; i++) {\n             ret.push(Val.HexString(lines[i]));\n        }\n\n        while(ret.length < InstructionMemory.SIZE)\n            ret.push(VAL_ZERO_32b);\n\n        return ret;\n    }\n}","export function toggleFullScreen() {\n    let documentBody = document.body;\n\n    if (!this.isFullScreen) {\n        // @ts-ignoreç\n        if (documentBody.requestFullScreen) {\n            // @ts-ignoreç\n            documentBody.requestFullScreen();\n        } else if (documentBody.webkitRequestFullscreen) {\n            documentBody.webkitRequestFullscreen();\n            // @ts-ignoreç\n        } else if (documentBody.mozRequestFullScreen) {\n            // @ts-ignoreç\n            documentBody.mozRequestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.msRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.msRequestFullscreen();\n        }\n        this.isFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            // @ts-ignoreç\n        } else if (document.msExitFullscreen) {\n            // @ts-ignoreç\n            document.msExitFullscreen();\n            // @ts-ignoreç\n        } else if (document.mozCancelFullScreen) {\n            // @ts-ignorec\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n        this.isFullScreen = false;\n    }\n}","import Simulator from \"./Simulator\";\nimport Parser from \"./Parser\";\nimport {toggleFullScreen} from \"./util\";\n\nlet canvas = <HTMLCanvasElement> document.getElementById(\"sim-canvas\");\nlet menuBar = <HTMLDivElement> document.getElementById(\"menu\");\nlet btnStep = <HTMLButtonElement> document.getElementById(\"btn-step\");\nlet btnPlay = <HTMLButtonElement> document.getElementById(\"btn-play\");\nlet btnPause = <HTMLButtonElement> document.getElementById(\"btn-pause\");\nlet txtCode = <HTMLTextAreaElement> document.getElementById(\"txt-code\");\nlet btnLoad = <HTMLButtonElement> document.getElementById(\"btn-load\");\nlet btnReset = <HTMLButtonElement> document.getElementById(\"btn-reset\");\nlet sim = new Simulator(canvas, Parser.parse(txtCode.textContent));\nlet play = false;\n\nlet resize = () => {\n    canvas.style.width = document.body.clientWidth + \"px\";\n    canvas.style.height = (document.body.clientHeight - menuBar.clientHeight) + \"px\";\n    sim.draw();\n};\n\nresize();\n\nwindow.addEventListener(\"resize\", () => resize());\n\n\nwindow.addEventListener(\"keydown\", evt => {\n    switch (evt.key) {\n        case \"s\":\n        case \"S\": {\n            sim.step();\n            break;\n        }\n\n        case \"r\":\n        case \"R\": {\n            sim.reset();\n            break;\n        }\n\n        case \"f\":\n        case \"F\": {\n            toggleFullScreen();\n            break;\n        }\n        case \"ArrowRight\":\n            console.log(\"->\")\n    }\n});\n\nbtnStep.addEventListener(\"click\", evt => {\n    sim.step();\n    btnPause.click()\n});\n\nbtnPlay.addEventListener(\"click\", evt => {\n    play = true;\n    btnPlay.disabled = true;\n    btnPause.disabled = false\n});\n\nbtnPause.addEventListener(\"click\", evt => {\n    play = false;\n    btnPlay.disabled = false;\n    btnPause.disabled = true\n});\n\nbtnLoad.addEventListener(\"click\", evt => {\n    let parsed = Parser.parse(txtCode.textContent);\n    if (parsed) sim.load(parsed)\n});\n\nbtnReset.addEventListener(\"click\", evt => sim.reset());\n\nsetInterval(() => {\n    if (play) {\n        sim.step();\n    }\n\n}, 1000);\n"]}