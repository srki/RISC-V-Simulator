{"version":3,"sources":["util/Graphics.ts","components/Component.ts","util/Config.ts","util/Value.ts","components/ArithmeticLogicUnit.ts","components/Register.ts","components/CircutNode.ts","instructions/InstructionConstants.ts","instructions/InstructionHelper.ts","instructions/InstructionDecoder.ts","instructions/InstructionFactory.ts","components/InstructionMemory.ts","components/Multiplexer.ts","components/ALUControl.ts","components/DataMemory.ts","components/RegisterFile.ts","components/ImmSelect.ts","components/BranchLogic.ts","components/ControlUnit.ts","components/ConstValue.ts","Simulator.ts","util/Parser.ts","util/util.ts","main.ts"],"names":[],"mappings":"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","file":"main.c39d6dcf.map","sourceRoot":"../src","sourcesContent":["export default class Graphics {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n\n    private readonly width: number;\n    private readonly height: number;\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.width = width;\n        this.height = height;\n\n        if (canvas.style.width == undefined || canvas.style.height == undefined) {\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n            console.warn(\"Canvas width or height undefined\");\n        }\n    }\n\n    rescale() {\n        let canvasWidth = this.canvas.clientWidth;\n        let canvasHeight = this.canvas.clientHeight;\n\n        /* Added support for Retina display */\n        this.canvas.width = canvasWidth * window.devicePixelRatio;\n        this.canvas.height = canvasHeight * window.devicePixelRatio;\n\n        let scale = canvasWidth / canvasHeight > this.width / this.height ?\n            canvasHeight / this.height :\n            canvasWidth / this.width;\n\n        let rescaleOffsetX = (canvasWidth - scale * this.width) / 2;\n        let rescaleOffsetY = (canvasHeight - scale * this.height) / 2;\n\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.translate(rescaleOffsetX , rescaleOffsetY);\n        this.ctx.scale(scale * window.devicePixelRatio, scale * window.devicePixelRatio);\n    }\n\n    clear(color: string) {\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.restore();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, color: string, lineWidth: number = 2) {\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n    }\n\n    drawPath(path: number[][], strokeStyle: string, lineWidth: number = 2) {\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(path[0][0], path[0][1]);\n        for (let i = 1; i < path.length; i++) {\n            this.ctx.lineTo(path[i][0], path[i][1]);\n        }\n\n        this.ctx.stroke();\n    }\n\n\n    fillRect(x: number, y: number, w: number, h: number, fillStyle: string, strokeStyle: string, lineWidth: number = 2) {\n        this.fillPolygon([[x, y], [x + w, y], [x + w, y + h], [x, y + h]], fillStyle, strokeStyle ,lineWidth);\n    }\n\n    fillPolygon(point: number[][], fillStyle: string, strokeStyle: string, lineWidth: number = 2) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(point[0][0], point[0][1]);\n        for (let i = 1; i < point.length; i++) {\n            this.ctx.lineTo(point[i][0], point[i][1]);\n        }\n\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    fillCircle(x: number, y: number, r: number, fillStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, r, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    drawText(x: number, y: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n        this.ctx.fillText(text, x, y);\n    }\n\n    drawTextCentered(x: number, y: number, width: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n\n        let textWidth = this.ctx.measureText(text).width;\n\n        this.ctx.fillText(text, (x + (width - textWidth) / 2), y);\n    }\n\n    static addOffset(points: number[][], xOffset: number, yOffset: number): number[][] {\n        let updated: number[][] = [];\n\n        for (let idx  in points) {\n            updated.push([xOffset + points[idx][0], yOffset + points[idx][1]]);\n        }\n\n        return updated;\n    }\n\n}","import Graphics from \"../util/Graphics\";\nimport Value from \"../util/Value\";\n\nexport default abstract class Component {\n    private static cnt = 0;\n    public readonly id: number;\n\n    public readonly x: number;\n    public readonly y: number;\n\n    protected constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n\n        this.id = Component.cnt++;\n    }\n\n    abstract draw(g: Graphics): void;\n\n    refresh(): void {\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n    }\n\n    mark(caller: Component): void {\n    }\n\n    onFallingEdge(): void {\n    }\n\n    onRisingEdge(): void {\n    }\n}","export default class Config {\n    static readonly backgroundColor: string = \"#ffffff\";\n    static readonly elementFillColor: string = \"#b1e5e0\";\n    static readonly elementStrokeColor: string = \"#000000\";\n    static readonly memoryFillColor: string = \"#fffed0\";\n    static readonly memoryStrokeColor: string = \"#000000\";\n    static readonly lineColor: string = \"#000000\";\n    static readonly signalColor: string = \"#FF0000\";\n    static readonly fontColor: string = \"#000000\";\n    static readonly readFontColor: string = \"#0000FF\";\n    static readonly writeFontColor: string = \"#FF0000\";\n\n    static readonly fontSize: number = 20;\n}","export default class Value {\n    readonly bitValue: string;\n    readonly numBits: number;\n\n    private static mod(n: number, m: number): number {\n        return ((n % m) + m) % m;\n    }\n\n    constructor(bitValue: string, numBits: number) {\n        if (bitValue.length > numBits) {\n            console.log(\"BitValue is too long\");\n        }\n\n        this.numBits = numBits;\n        this.bitValue = this.padWith(bitValue, \"0\", numBits);\n    }\n\n    static fromUnsignedInt(val: number, num_bits: number = 32): Value {\n        return new Value(Value.mod(val, 2 ** num_bits).toString(2), num_bits);\n    }\n\n    static fromSignedInt(val: number, numBits: number = 32): Value {\n        return new Value((val < 0 ? val + (1 << numBits) : val).toString(2), numBits);\n    }\n\n    asUnsignedInt(): number {\n        return parseInt(this.bitValue, 2);\n    }\n\n    asSignedInt(): number {\n        let str = this.padWith(this.bitValue, \"0\", this.numBits);\n        if (str[0] == \"0\") {\n            return parseInt(this.bitValue, 2);\n        }\n\n        let flippedStr = \"\";\n        for (let i = 1; i < str.length; i++) {\n            flippedStr += str[i] == \"1\" ? \"0\" : \"1\";\n        }\n\n        return -parseInt(flippedStr, 2) - 1;\n    }\n\n    asHexString(): string {\n        let str = this.asUnsignedInt().toString(16);\n        while (str.length < this.numBits / 4) {\n            str = \"0\" + str;\n        }\n        return \"0x\" + str.toUpperCase();\n    }\n\n    asBinaryString(): string {\n        return this.bitValue;\n    }\n\n    asShortHexString(): string {\n        return this.asUnsignedInt().toString(16).toUpperCase();\n    }\n\n    signExtend(numBits: number): Value {\n        return new Value(this.padWith(this.bitValue, this.bitValue[0], numBits), numBits);\n    }\n\n    getNumBits(): number {\n        return this.numBits;\n    }\n\n    getByteBinary(byteIdx: number): string {\n        if (this.numBits != 32) {\n            console.log(\"Error\");\n            return null;\n        }\n\n        return this.asBinaryString().substr((3 - byteIdx) * 8, 8)\n    }\n\n    writeByte(byteIdx: number, byte: string): Value {\n        if (this.numBits != 32) {\n            console.log(\"Error\");\n            return null;\n        }\n\n        byteIdx = 3 - byteIdx;\n        let str = this.asBinaryString();\n        str = str.substring(0, byteIdx * 8) + byte + str.substr((byteIdx + 1) * 8);\n\n        return new Value(str, 32);\n    }\n\n    private padWith(str: string, padValue: string, length: number) {\n        while (str.length < length) {\n            str = padValue + str;\n        }\n        return str;\n    }\n\n    // TODO: check if the implementations are correct\n    static add(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() + rhs.asUnsignedInt(), 32);\n    }\n\n    static sub(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() - rhs.asUnsignedInt(), 32);\n    }\n\n    static and(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() & rhs.asUnsignedInt(), 32);\n    }\n\n    static or(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() | rhs.asUnsignedInt(), 32);\n    }\n\n    static xor(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() ^ rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftLeftLogical(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() << rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightLogical(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() >>> rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightArithmetic(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() >> rhs.asUnsignedInt(), 32);\n    }\n\n    static cmp(lhs: Value, rhs: Value, signed: boolean): number {\n        if (lhs.numBits != rhs.numBits) {\n            console.error(\"The nuber of bits do not match\");\n            return null;\n        }\n\n        let a = lhs.asBinaryString();\n        let b = rhs.asBinaryString();\n\n        if (signed && (a[0]) != b[0]) {\n            return a[0] == '1' ? -1 : 1;\n        }\n\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] != b[i]) {\n                return a[i] == '0' ? -1 : 1;\n            }\n        }\n\n        return 0;\n    }\n\n    static cmpEQ(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) == 0;\n    }\n\n    static cmpNE(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) != 0;\n    }\n\n    static cmpLT(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, true) == -1;\n    }\n\n    static cmpGE(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, true) != -1;\n    }\n\n    static cmpLTU(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) == -1;\n    }\n\n    static cmpGEU(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) != -1;\n    }\n\n    static main() {\n        // for (let i = -4; i < 4; i++) {\n        //     let v = this.fromSignedInt(i, 3);\n        //     console.log(v.asBinaryString() + \" \" + v.asSignedInt() + \" \" + v.asUnsignedInt());\n        // }\n\n        //@formatter:off\n        // console.log(this.cmpEQ(new Value(-10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpEQ(new Value(-10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpEQ(new Value(  9, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpEQ(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 11, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value(-11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpNE(new Value(-10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpNE(new Value(-10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpNE(new Value(  9, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpNE(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 11, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value(-11, 32), new Value( 10, 32)) == true);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpLT(new Value(-10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLT(new Value( 10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLT(new Value(-10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value(  9, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLT(new Value( 11, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLT(new Value(-11, 32), new Value( 10, 32)) == true);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpGE(new Value(-10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGE(new Value( 10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGE(new Value(-10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value(  9, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGE(new Value( 11, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGE(new Value(-11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpLTU(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLTU(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLTU(new Value( 11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpGEU(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGEU(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGEU(new Value( 11, 32), new Value( 10, 32)) == true);\n        //@formatter:on\n\n    }\n\n    static HexString(s: string, num_bits: number = 32) {\n        return Value.fromUnsignedInt(parseInt(s, 16), num_bits);\n    }\n}\n\nexport const VAL_ZERO_32b = Value.fromUnsignedInt(0, 32);\nexport const VAL_ONE_32b = Value.fromUnsignedInt(1, 32);\nexport const VAL_TWO_32b = Value.fromUnsignedInt(2, 32);\nexport const VAL_THREE_32b = Value.fromUnsignedInt(3, 32);\nexport const VAL_MAX_32b = new Value(\"11111111111111111111111111111111\", 32);\n\nexport const VAL_ZERO_1b = Value.fromUnsignedInt(0, 1);\nexport const VAL_ZERO_5b = Value.fromUnsignedInt(0, 5);","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value, {VAL_ZERO_1b, VAL_ZERO_32b, VAL_ZERO_5b} from \"../util/Value\";\n\nexport default class ArithmeticLogicUnit extends Component {\n    /* @formatter:off */\n    public static readonly ADD  = new Value(\"0\", 4); /* Addition               */\n    public static readonly SUB  = new Value(\"1\", 4); /* Subtraction            */\n    public static readonly AND  = new Value(\"2\", 4); /* Bitwise AND            */\n    public static readonly OR   = new Value(\"3\", 4); /* Bitwise OR             */\n    public static readonly XOR  = new Value(\"4\", 4); /* Bitwise XOR            */\n    public static readonly SLL  = new Value(\"5\", 4); /* Shift Left Logical     */\n    public static readonly SRL  = new Value(\"6\", 4); /* Shift Right Logical    */\n    public static readonly SRA  = new Value(\"7\", 4); /* Shift Right Arithmetic */\n    public static readonly SLT  = new Value(\"8\", 4); /* Shift Right Arithmetic */\n    public static readonly SLTU = new Value(\"9\", 4); /* Shift Right Arithmetic */\n\n    /* @formatter:on */\n\n    private readonly defaultOp: Value;\n\n    private _resultNode: CircuitNode = null;\n    private _input1Node: CircuitNode = null;\n    private _input2Node: CircuitNode = null;\n    private _selOpNode: CircuitNode = null;\n\n    private input1Value: Value = VAL_ZERO_32b;\n    private input2Value: Value = VAL_ZERO_1b;\n    private selOpValue: Value = VAL_ZERO_5b;\n\n    constructor(x: number, y: number, defaultOp: Value = undefined) {\n        super(x, y);\n        this.defaultOp = defaultOp;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [40, 15], [40, 60], [0, 75], [0, 45], [10, 37.5], [0, 30]],\n            this.x, this.y), Config.elementFillColor, Config.elementStrokeColor);\n    }\n\n    refresh(): void {\n        this.input1Value = undefined;\n        this.input2Value = undefined;\n        this.selOpValue = this.defaultOp;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._input1Node:\n                this.input1Value = value;\n                break;\n\n            case this._input2Node:\n                this.input2Value = value;\n                break;\n\n            case this._selOpNode:\n                this.selOpValue = value;\n                break;\n        }\n\n        if (this.input1Value == undefined || this.input2Value == undefined || this.selOpValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n        switch (this.selOpValue) {\n            case ArithmeticLogicUnit.ADD: {\n                result = Value.add(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SUB: {\n                result = Value.sub(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.AND: {\n                result = Value.and(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.OR: {\n                result = Value.or(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.XOR: {\n                result = Value.xor(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLL: {\n                result = Value.shiftLeftLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRL: {\n                result = Value.shiftRightLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRA: {\n                result = Value.shiftRightArithmetic(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLT: {\n                // TODO: implement\n                break;\n            }\n            case ArithmeticLogicUnit.SLTU: {\n                // TODO: implement\n                break;\n            }\n            default: {\n                console.error(\"Unknown operation\");\n                result = VAL_ZERO_32b;\n            }\n        }\n\n        this._resultNode.forwardSignal(this, result);\n    }\n\n    mark(caller: Component): void {\n        this._input1Node.mark(this);\n        this._input2Node.mark(this);\n\n        if (this.defaultOp == null) {\n            this._selOpNode.mark(this);\n        }\n    }\n\n    set resultNode(node: CircuitNode) {\n        this._resultNode = node;\n    }\n\n    set input1Node(node: CircuitNode) {\n        this._input1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set input2Node(node: CircuitNode) {\n        this._input2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set selOpNode(node: CircuitNode) {\n        this._selOpNode = node;\n        node.addNeighbour(this);\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value, {VAL_ZERO_32b} from \"../util/Value\";\n\nexport enum RegisterOrientation {\n    HORIZONTAL,\n    VERTICAL\n}\n\nexport default class Register extends Component {\n    private readonly orientation: RegisterOrientation;\n\n    private _inputNode: CircuitNode = null;\n    private _outNode: CircuitNode = null;\n    private _writeEnable: CircuitNode = null;\n\n    private value: Value = VAL_ZERO_32b;\n\n    private nextValue: Value = undefined;\n\n    constructor(x: number, y: number, orientation: RegisterOrientation = RegisterOrientation.HORIZONTAL) {\n        super(x, y);\n        this.orientation = orientation;\n        this.nextValue = undefined;\n    }\n\n    draw(g: Graphics): void {\n        if (this.orientation == RegisterOrientation.HORIZONTAL) {\n            g.fillRect(this.x, this.y, 150, 25, Config.elementFillColor, Config.elementStrokeColor);\n            g.drawText(this.x + 10, this.y + 21, this.value.asHexString(), Config.fontColor, Config.fontSize);\n        } else if (this.orientation == RegisterOrientation.VERTICAL) {\n            // TODO: implement\n        }\n    }\n\n    refresh(): void {\n        if (this.nextValue) {\n            this.value = this.nextValue;\n        }\n        this.nextValue = undefined;\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnable && this._writeEnable.value.asUnsignedInt() != 0) {\n            this.nextValue = this._inputNode.value;\n            this._inputNode.mark(this);\n        }\n    }\n\n    set inputNode(node: CircuitNode) {\n        this._inputNode = node;\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n\n    set writeEnable(node: CircuitNode) {\n        this._writeEnable = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport Value from \"../util/Value\";\n\nexport default class CircuitNode extends Component {\n    private readonly defaultValue: Value;\n\n    private neighbours: Component[] = [];\n    private neighbourNodes: CircuitNode[] = [];\n\n    private _value: Value;\n    private signaler: Component;\n    private marked: boolean;\n\n    constructor(x: number, y: number, defaultValue: Value = undefined) {\n        super(x, y);\n        this.defaultValue = defaultValue;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillCircle(this.x, this.y, 2, Config.signalColor);\n        this.neighbourNodes.forEach(el =>\n            g.drawLine(this.x, this.y, el.x, el.y, el.marked ? Config.signalColor : Config.lineColor)\n        );\n    }\n\n    refresh(): void {\n        this._value = this.defaultValue;\n        this.signaler = undefined;\n        this.marked = false;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        this._value = value;\n        this.signaler = signaler;\n\n        this.neighbours.forEach(nb => {\n            if (nb != signaler) {\n                nb.forwardSignal(this, value);\n            }\n        })\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n        if (this.signaler) {\n            this.signaler.mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    addNeighbour(neighbour: Component) {\n        this.neighbours.push(neighbour);\n\n        if (neighbour instanceof CircuitNode) {\n            this.neighbourNodes.push(neighbour);\n        }\n    }\n\n\n    get value(): Value {\n        return this._value;\n    }\n}","\nexport default class InstructionConstants {\n    /* @formatter:off */\n\n    static readonly OP_CODE_ALU    = \"0110011\";\n    static readonly OP_CODE_ALUI   = \"0010011\";\n    static readonly OP_CODE_LW     = \"0000011\";\n    static readonly OP_CODE_SW     = \"0100011\";\n    static readonly OP_CODE_BRANCH = \"1100011\";\n    static readonly OP_CODE_JAL    = \"1101111\";\n    static readonly OP_CODE_JALR   = \"1100111\";\n\n    /* ALU Functions */\n    static readonly FUNCT_ADD  = \"0000000000\";\n    static readonly FUNCT_SUB  = \"0100000000\";\n    static readonly FUNCT_SLL  = \"0000000001\";\n    static readonly FUNCT_SLT  = \"0000000010\";\n    static readonly FUNCT_SLTU = \"0000000011\";\n    static readonly FUNCT_XOR  = \"0000000100\";\n    static readonly FUNCT_SRL  = \"0000000101\";\n    static readonly FUNCT_SRA  = \"0100000101\";\n    static readonly FUNCT_OR   = \"0000000110\";\n    static readonly FUNCT_AND  = \"0000000111\";\n\n    /* ALUi Functions */\n    static readonly FUNCT_ADDI   = \"000\";\n    static readonly FUNCT_SLTI   = \"010\";\n    static readonly FUNCT_SLTIU  = \"011\";\n    static readonly FUNCT_XORI   = \"100\";\n    static readonly FUNCT_ORI    = \"110\";\n    static readonly FUNCT_ANDI   = \"111\";\n\n    static readonly FUNCT_SLLI = \"0000000001\";\n    static readonly FUNCT_SRLI = \"0000000101\";\n    static readonly FUNCT_SRAI = \"0100000101\";\n\n    /* Load Functions */\n    static readonly FUNCT_LB  = \"000\";\n    static readonly FUNCT_LH  = \"001\";\n    static readonly FUNCT_LW  = \"010\";\n    static readonly FUNCT_LBU = \"100\";\n    static readonly FUNCT_LHU = \"101\";\n\n    /* Store Functions */\n    static readonly FUNCT_SB = \"000\";\n    static readonly FUNCT_SH = \"001\";\n    static readonly FUNCT_SW = \"010\";\n\n    /* Branch Functions */\n    static readonly FUNCT_BEQ  = \"000\";\n    static readonly FUNCT_BNE  = \"001\";\n    static readonly FUNCT_BLT  = \"100\";\n    static readonly FUNCT_BGE  = \"101\";\n    static readonly FUNCT_BLTU = \"110\";\n    static readonly FUNCT_BGEU = \"111\";\n\n    /* @formatter:on */\n}\n\n\n","import Value from \"../util/Value\";\n\nexport default class InstructionHelper {\n    static readonly INSTR_SIZE = 32;\n    static readonly OP_CODE_SIZE = 7;\n\n\n    static convertAndPad(num: number, len: number = 32) {\n        if (num < 0) {\n            num += 2 ** len;\n        }\n\n        let str = num.toString(2);\n        while (str.length < len) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    static toBitString(instr: Value) {\n        return this.convertAndPad(instr.asUnsignedInt());\n    }\n\n    static getOpCodeStr(inst: Value) {\n        return this.toBitString(inst).substr(this.INSTR_SIZE - this.OP_CODE_SIZE);\n    }\n\n    static getRd(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(20, 5), 2);\n    }\n\n    static getRs1(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(12, 5), 2);\n    }\n\n    static getRs2(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(7, 5), 2);\n    }\n\n    static getImmIType(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(0, 12), 2);\n    }\n\n    static getImmBType(instr: Value): number {\n        let str = instr.asBinaryString();\n        let imm12 = str.substr(0, 1);\n        let imm10 = str.substr(1, 6);\n        let imm4 = str.substr(20, 4);\n        let imm11 = str.substr(24, 1);\n\n        return parseInt(imm12 + imm11 + imm10 + imm4 + \"0\", 2);\n    }\n\n    static getImmSType(instr: Value): number {\n        let str = instr.asBinaryString();\n        let imm11 = str.substr(0, 7);\n        let imm4 = str.substr(20, 5);\n\n        return parseInt(imm11 + imm4, 2);\n    }\n\n    static getFuncLType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n    static getFuncSType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n    static getFuncBType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n\n}\n","import Value from \"../util/Value\";\nimport InstructionConstants from \"./InstructionConstants\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport class InstructionDecoder {\n    static decode(instr: Value): string {\n        let opCode = InstructionHelper.getOpCodeStr(instr);\n\n        switch (opCode) {\n            case InstructionConstants.OP_CODE_ALU:\n                return this.decodeALU(instr);\n\n            case InstructionConstants.OP_CODE_ALUI:\n                return this.decodeALUI(instr);\n\n            case InstructionConstants.OP_CODE_LW:\n                return this.decodeLW(instr);\n\n            case InstructionConstants.OP_CODE_SW:\n                return this.decodeSW(instr);\n\n            case InstructionConstants.OP_CODE_BRANCH:\n                return this.decodeBRANCH(instr);\n\n            case InstructionConstants.OP_CODE_JAL:\n                return this.decodeJAL(instr);\n\n            case InstructionConstants.OP_CODE_JALR:\n                return this.decodeJALR(instr);\n\n            default:\n                // console.error(\"Unsupported OP Code: \" + opCode);\n                return instr.asHexString();\n        }\n    }\n\n    static decodeALU(instr: Value): string {\n        let func = instr.asBinaryString().substr(0, 7) + instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_ADD: {\n                name = \"ADD\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SUB: {\n                name = \"SUB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLL: {\n                name = \"SLT\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLT: {\n                name = \"SLT\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTIU: {\n                name = \"SLTU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_XOR: {\n                name = \"XOR\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRL: {\n                name = \"SRL\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRA: {\n                name = \"SRA\";\n                break;\n            }\n            case InstructionConstants.FUNCT_OR: {\n                name = \"OR\";\n                break;\n            }\n            case InstructionConstants.FUNCT_AND: {\n                name = \"\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", x\" +\n            InstructionHelper.getRs1(instr) + \", x\" + InstructionHelper.getRs2(instr);\n    }\n\n    static decodeALUI(instr: Value): string {\n        let func7 = instr.asBinaryString().substr(0, 7);\n        let func3 = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func3) {\n            case InstructionConstants.FUNCT_ADDI: {\n                name = \"ADDI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTI: {\n                name = \"SLTI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTIU: {\n                name = \"SLTIU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_XORI: {\n                name = \"XORI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_ORI: {\n                name = \"ORI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_ANDI: {\n                name = \"ANDI\";\n                break;\n            }\n        }\n\n        switch (func7 + func3) {\n            case InstructionConstants.FUNCT_SLLI: {\n                name = \"SSLI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRLI: {\n                name = \"SRLI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRAI: {\n                name = \"SRAI\";\n                break;\n            }\n        }\n\n        let imm = InstructionHelper.getImmIType(instr);\n        if (imm >= 1<< 11) {\n            imm -= (1 << 12);\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", x\" + InstructionHelper.getRs1(instr) + \", \" +\n            imm.toString(10);\n    }\n\n    static decodeLW(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_LB: {\n                name = \"LB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LH: {\n                name = \"LH\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LW: {\n                name = \"LW\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LBU: {\n                name = \"LBU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LHU: {\n                name = \"LHU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", 0x\" +\n            InstructionHelper.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + InstructionHelper.getRs1(instr) + \")\";\n    }\n\n    static decodeSW(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_SB: {\n                name = \"SB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SH: {\n                name = \"SH\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SW: {\n                name = \"SW\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRs1(instr) + \", 0x\" +\n            InstructionHelper.getImmSType(instr).toString(16).toUpperCase() +\n            \"(x\" + InstructionHelper.getRs2(instr) + \")\";\n    }\n\n    static decodeBRANCH(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_BEQ: {\n                name = \"BEQ\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BNE: {\n                name = \"BNE\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BLT: {\n                name = \"BLT\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BGE: {\n                name = \"BGE\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BLTU: {\n                name = \"BLTU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BGEU: {\n                name = \"BGEU\";\n                break;\n            }\n        }\n\n        let imm = InstructionHelper.getImmBType(instr);\n        if (imm >= 1<< 12) {\n            imm -= (1 << 13);\n        }\n\n        return name + \" x\" + InstructionHelper.getRs1(instr) + \", x\" + InstructionHelper.getRs2(instr) +\n            \", \" + imm.toString(10);\n    }\n\n    static decodeJAL(instr: Value): string {\n        return \"JAL instruction\";\n    }\n\n    static decodeJALR(instr: Value): string {\n        return \"JALR instruction\";\n    }\n}","import Value from \"../util/Value\";\nimport InstructionConstants from \"./InstructionConstants\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class InstructionFactory {\n    static createRType(opCode: string, funct: string, rd: number, rs1: number, rs2: number): Value {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct3 +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createIType(opCode: string, funct: string, rd: number, rs1: number, imm: number): Value {\n        let instr =\n            InstructionHelper.convertAndPad(imm, 12) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createITypeShift(opCode: string, funct: string, rd: number, rs1: number, shamt: number) {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 +\n            InstructionHelper.convertAndPad(shamt, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct3 +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createSType(opCode: string, funct: string, rs1: number, rs2: number, imm: number): Value {\n        let immStr = InstructionHelper.convertAndPad(imm, 12);\n        let imm11 = immStr.substr(0, 7);\n        let imm4 = immStr.substr(7, 5);\n\n        let instr = imm11 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) +\n            funct + imm4 + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createBType(opCode: string, funct: string, rs1: number, rs2: number, imm: number) {\n        if (imm % 4 != 0) {\n            console.error(\"Imm should be divisible by 4!\");\n            imm -= imm / 4;\n        }\n\n        imm /= 2;\n\n        let immStr = InstructionHelper.convertAndPad(imm, 12);\n        let imm12 = immStr.substr(0, 1);\n        let imm10 = immStr.substr(2, 6);\n        let imm4 = immStr.substr(8, 4);\n        let imm11 = immStr.substr(1, 1);\n\n        let instr = imm12 + imm10 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) +\n            funct + imm4 + imm11 + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static compare(v: Value, s: string) {\n        console.log(v.asBinaryString());\n        console.log(s.replace(/ /g, \"\"));\n    }\n\n    static main(args: String[] = []): void {\n        this.compare(this.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD,\n            2, 1, 1),\n            \"0000000 00001 00001 000 00010 0110011\");\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\nimport {InstructionDecoder} from \"../instructions/InstructionDecoder\";\nimport InstructionFactory from \"../instructions/InstructionFactory\";\n\nexport default class InstructionMemory extends Component {\n    public static readonly SIZE: number = 32;\n    private readonly values: Value[] = [];\n\n    private selectedInstr;\n\n    private _decoded = true;\n\n    private _addressNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number, values: Value[]) {\n        super(x, y);\n        this.values = values;\n\n        this.values[0] = InstructionFactory.createIType(InstructionConstants.OP_CODE_LW, InstructionConstants.FUNCT_LW, 1, 0, 124);\n        this.values[1] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 0, 0);\n        this.values[2] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 0, 0);\n\n        this.values[3] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 112);\n        this.values[4] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 4, 0, 0);\n        this.values[5] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 4, 0);\n        this.values[6] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[7] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[8] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 92);\n        this.values[9] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 5, 0, 1);\n        this.values[10] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 5, 0);\n        this.values[11] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[12] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[13] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 72);\n        this.values[14] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 6, 5 ,0);\n        this.values[15] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 5, 5 ,4);\n        this.values[16] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 4, 6 ,0);\n        this.values[17] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 5, 0);\n        this.values[18] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[19] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n        this.values[20] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 0, 0, -28);\n\n        this.values[31] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 0, 0, 0);\n    }\n\n    refresh(): void {\n        this.selectedInstr = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 230, InstructionMemory.SIZE * 20 + 30,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < InstructionMemory.SIZE; i++) {\n            g.fillRect(this.x + 15, this.y + 15 + i * 20, 200, 20,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n\n            let text = this._decoded ? InstructionDecoder.decode(this.values[i]) : this.values[i].asHexString();\n            let color = this.selectedInstr == i ? Config.readFontColor : Config.fontColor;\n            g.drawText(this.x + 15 + 10, this.y + 15 + 17 + i * 20, text, color, 18);\n        }\n\n        if (this.selectedInstr != undefined) {\n            let instrY = this.y + 15 + this.selectedInstr * 20 + 11;\n            g.drawPath([[this.x + 215, instrY], [this.x + 222.5, instrY],\n                    [this.x + 222.5, this._outputDataNode.y], [this._outputDataNode.x, this._outputDataNode.y]],\n                Config.signalColor);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        this.selectedInstr = value.asUnsignedInt() / 4;\n        this._outputDataNode.forwardSignal(this, this.values[this.selectedInstr]);\n    }\n\n    mark(caller: Component): void {\n        this._addressNode.mark(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\n\nexport enum MultiplexerOrientation {\n    LEFT,\n    RIGHT\n}\n\nexport default class Multiplexer extends Component {\n    private readonly ninputs: number;\n    private readonly orientation: MultiplexerOrientation;\n    private readonly inputDistance: number;\n\n    private readonly _inputNodes: CircuitNode[];\n    private _selInputNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private selValue: number = undefined;\n    private inputValues: Value[] = [];\n\n    private marked = false;\n\n    constructor(x: number, y: number, ninputs: number,\n                orientation: MultiplexerOrientation = MultiplexerOrientation.RIGHT, inputDistance: number = 15) {\n        super(x, y);\n        this.ninputs = ninputs;\n        this.orientation = orientation;\n        this.inputDistance = inputDistance;\n        this._inputNodes = [];\n    }\n\n    draw(g: Graphics): void {\n        let height = 50 + (this.ninputs - 1) * this.inputDistance;\n\n        if (this.orientation == MultiplexerOrientation.RIGHT) {\n            g.fillPolygon(Graphics.addOffset([[0, 0], [25, 15], [25, height - 15], [0, height]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        } else {\n            g.fillPolygon(Graphics.addOffset([[0, 15], [25, 0], [25, height], [0, height - 15]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        }\n\n        if (this.marked) {\n            let y = this._inputNodes[this.selValue].y;\n            let xCenter = this.x + 12.5;\n            let yCenter = this.y + height / 2;\n            if (this.orientation == MultiplexerOrientation.RIGHT) {\n                g.drawPath([[this.x, y], [xCenter, y], [xCenter, yCenter], [this.x + 25, yCenter]],\n                    Config.signalColor);\n            } else {\n                g.drawPath([[this.x + 25, y], [xCenter, y], [xCenter, yCenter], [this.x, yCenter]],\n                    Config.signalColor);\n            }\n        }\n\n        // if (this.orientation == MultiplexerOrientation.RIGHT) {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x + 25, this.y + height / 2, 2, \"red\");\n        // } else {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x + 25, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x, this.y + height / 2, 2, \"red\");\n        // }\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        if (signaler == this._selInputNode) {\n            this.selValue = value.asUnsignedInt();\n        } else {\n            for (let i in this._inputNodes) {\n                if (signaler == this._inputNodes[i]) {\n                    this.inputValues[i] = value;\n                    break;\n                }\n            }\n        }\n\n        if (this.selValue != undefined && this.inputValues[this.selValue]) {\n            this._outNode.forwardSignal(this, this.inputValues[this.selValue]);\n        }\n    }\n\n    refresh(): void {\n        this.selValue = undefined;\n        this.inputValues = [];\n        this.marked = false;\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n\n        this._selInputNode.mark(this);\n        if (this._inputNodes[this.selValue]) {\n            this._inputNodes[this.selValue].mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    setInputNode(idx: number, node: CircuitNode) {\n        this._inputNodes[idx] = node;\n        node.addNeighbour(this);\n    }\n\n    set selInputNode(node: CircuitNode) {\n        this._selInputNode = node;\n        node.addNeighbour(this);\n    }\n\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class ALUControl extends Component {\n    public static readonly FUNC = Value.fromUnsignedInt(0, 2);\n    public static readonly OP = Value.fromUnsignedInt(1, 2);\n    public static readonly ADD = Value.fromUnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private ctrlValue: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"ALU\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 10, this.y + 43, \"Control\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n\n        switch (this.ctrlValue) {\n            case ALUControl.FUNC: {\n                result = this.handleFunc();\n                break;\n            }\n            case ALUControl.OP: {\n                result = this.handleOp();\n                break;\n            }\n            case ALUControl.ADD: {\n                result = ArithmeticLogicUnit.ADD;\n                break;\n            }\n            default: {\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        if (result == undefined) {\n            console.log(\"Unsupported operation\")\n        } else {\n            this._outNode.forwardSignal(this, result);\n        }\n\n    }\n\n    private handleFunc(): Value {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n        let func = func7 + func3;\n\n        switch (func) {\n            case InstructionConstants.FUNCT_ADD:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionConstants.FUNCT_SUB:\n                return ArithmeticLogicUnit.SUB;\n\n            case InstructionConstants.FUNCT_SLL:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionConstants.FUNCT_SLT:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionConstants.FUNCT_SLTU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionConstants.FUNCT_XOR:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_SRL:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_SRA:\n                return ArithmeticLogicUnit.SRA;\n\n            case InstructionConstants.FUNCT_OR:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionConstants.FUNCT_AND:\n                return ArithmeticLogicUnit.AND;\n\n            default:\n                return null;\n        }\n    }\n\n    private handleOp(): Value {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n\n        switch (func3) {\n            case InstructionConstants.FUNCT_ADDI:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionConstants.FUNCT_SLTI:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionConstants.FUNCT_SLTIU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionConstants.FUNCT_XORI:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_ORI:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionConstants.FUNCT_ANDI:\n                return ArithmeticLogicUnit.AND;\n        }\n\n        switch (func7 + func3) {\n            case InstructionConstants.FUNCT_SLLI:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionConstants.FUNCT_SRLI:\n                return ArithmeticLogicUnit.SRL;\n\n            case InstructionConstants.FUNCT_SRAI:\n                return ArithmeticLogicUnit.SRA;\n\n            default:\n                return undefined;\n        }\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import CircuitNode from \"./CircutNode\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport Component from \"./Component\";\nimport Value, {VAL_MAX_32b, VAL_ZERO_32b} from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class DataMemory extends Component {\n    public static readonly WRITE_NO = Value.fromUnsignedInt(0, 1);\n    public static readonly WRITE_YES = Value.fromUnsignedInt(1, 1);\n\n    private readonly size: number = 32;\n    private values: Value[] = [];\n\n    private _instrNode: CircuitNode;\n    private _writeEnNode: CircuitNode;\n    private _addressNode: CircuitNode;\n    private _inputDataNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    private instrValue: Value;\n    private writeEnValue: Value;\n    private addressValue: Value;\n\n    private nextValue: Value[] = [];\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size + 1; i++) {\n            // this.values.push(VAL_ZERO_32b);\n            this.values.push(VAL_MAX_32b);\n        }\n\n        this.values[31] = Value.fromUnsignedInt(25, 32);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.writeEnValue = undefined;\n        this.addressValue = undefined;\n\n        for (let i in this.nextValue) {\n            this.values[i] = this.nextValue[i];\n        }\n\n        this.nextValue = [];\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._writeEnNode: {\n                this.writeEnValue = value;\n                break;\n            }\n            case this._addressNode: {\n                this.addressValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.writeEnValue == undefined || this.addressValue == undefined) {\n            return;\n        }\n\n        if (InstructionHelper.getOpCodeStr(this.instrValue) != InstructionConstants.OP_CODE_LW) {\n            return;\n        }\n\n        let funct = InstructionHelper.getFuncLType(this.instrValue);\n        let nbytes: number;\n\n        switch (funct) {\n            case InstructionConstants.FUNCT_LB:\n            case InstructionConstants.FUNCT_LBU: {\n                nbytes = 1;\n                break;\n            }\n            case InstructionConstants.FUNCT_LH:\n            case InstructionConstants.FUNCT_LHU: {\n                nbytes = 2;\n                break;\n            }\n            case InstructionConstants.FUNCT_LW: {\n                nbytes = 4;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        let address = this.addressValue.asUnsignedInt();\n        let wordIdx = Math.floor(address / 4);\n        let byteIdx = address % 4;\n\n        let result = \"\";\n\n        for (let i = 0; i < nbytes; i++) {\n            result = this.values[wordIdx].getByteBinary(byteIdx) + result;\n            if (++byteIdx == 4) {\n                byteIdx = 0;\n                wordIdx++;\n            }\n        }\n\n        /* Sign extend */\n        if (funct == InstructionConstants.FUNCT_LBU || funct == InstructionConstants.FUNCT_LHU || true) {\n            let signBit = result[0];\n            while (result.length < 32) {\n                result = signBit + result;\n            }\n        }\n\n        this._outputDataNode.forwardSignal(this, new Value(result, 32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._writeEnNode.mark(this);\n        this._addressNode.mark(this);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnNode.value == DataMemory.WRITE_YES) {\n            if (this._addressNode.value == null || this._inputDataNode.value == null) {\n                console.log(\"Error\");\n            }\n\n            let funct = InstructionHelper.getFuncSType(this.instrValue);\n            let nbytes;\n\n            switch (funct) {\n                case InstructionConstants.FUNCT_SB: {\n                    nbytes = 1;\n                    break;\n                }\n                case InstructionConstants.FUNCT_SH: {\n                    nbytes = 2;\n                    break;\n                }\n                case InstructionConstants.FUNCT_SW: {\n                    nbytes = 4;\n                    break;\n                }\n                default: {\n                    console.log(\"Error\");\n                }\n            }\n\n            let address = this._addressNode.value.asUnsignedInt();\n            let wordIdx = Math.floor(address / 4);\n            let byteIdx = address % 4;\n            let writeValue = this._inputDataNode.value;\n\n            this.nextValue[wordIdx] = this.values[wordIdx];\n            this.nextValue[wordIdx + 1] = this.values[wordIdx + 1];\n\n            for (let i = 0; i < nbytes; i++) {\n                this.nextValue[wordIdx] = this.nextValue[wordIdx].writeByte(byteIdx, writeValue.getByteBinary(i));\n                if (++byteIdx == 4) {\n                    byteIdx = 0;\n                    wordIdx++;\n                }\n            }\n\n            this._writeEnNode.mark(this);\n            this._addressNode.mark(this);\n            this._inputDataNode.mark(this);\n        }\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set writeEnNode(node: CircuitNode) {\n        this._writeEnNode = node;\n        node.addNeighbour(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set inputDataNode(node: CircuitNode) {\n        this._inputDataNode = node;\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value, {VAL_ZERO_32b} from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\nexport default class RegisterFile extends Component {\n    public static readonly WRITE_NO = Value.fromUnsignedInt(0, 1);\n    public static readonly WRITE_YES = Value.fromUnsignedInt(1, 1);\n\n    private readonly maxSize: number = 32;\n    private readonly size: number = 16;\n    private values: Value[] = [];\n\n    private selectedReadReg1: number;\n    private readReg1Marked: boolean;\n    private selectedReadReg2: number;\n    private readReg2Marked: boolean;\n    private selectedWriteReg: number;\n\n    private nextValue: Value;\n    private nextSel: number;\n\n    private _readSel1Node: CircuitNode;\n    private _readSel2Node: CircuitNode;\n    private _inputWriteSelNode: CircuitNode;\n\n    private _inputWriteEnNode: CircuitNode;\n    private _inputWriteDataNode: CircuitNode;\n\n    private _readData1Node: CircuitNode;\n    private _readData2Node: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.maxSize; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    refresh(): void {\n        if (this.nextSel && this.nextValue) {\n            this.values[this.nextSel] = this.nextValue;\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n\n        this.selectedReadReg1 = undefined;\n        this.readReg1Marked = false;\n        this.selectedReadReg2 = undefined;\n        this.readReg2Marked = false;\n        this.selectedWriteReg = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 150, this.size * 20 + 30,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 15, this.y + 15 + i * 20, 120, 20,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n            g.drawText(this.x + 15 + 5, this.y + 15 + 17 + i * 20, this.values[i].asHexString(),\n                Config.fontColor, 18);\n        }\n\n        if (this.selectedWriteReg != undefined) {\n            let regY = this.y + 15 + this.selectedWriteReg * 20 + 10;\n            g.drawPath([[this.x, this._inputWriteDataNode.y], [this.x + 7.5, this._inputWriteDataNode.y],\n                [this.x + 7.5, regY], [this.x + 15, regY]], Config.signalColor);\n        }\n\n        if (this.selectedReadReg1 != undefined && this.readReg1Marked) {\n            let regY = this.y + 15 + this.selectedReadReg1 * 20 + 10;\n            g.drawPath([[this.x + 135, regY], [this.x + 140, regY],\n                [this.x + 140, this._readSel1Node.y], [this.x+150, this._readSel1Node.y]], Config.signalColor);\n        }\n\n        if (this.selectedReadReg2 != undefined && this.readReg2Marked) {\n            let regY = this.y + 15 + this.selectedReadReg2 * 20 + 10;\n            g.drawPath([[this.x + 135, regY], [this.x + 145, regY],\n                [this.x + 145, this._readSel2Node.y], [this.x+150, this._readSel2Node.y]], Config.signalColor);\n        }\n\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        if (signaler == this._readSel1Node) {\n            this.selectedReadReg1 = InstructionHelper.getRs1(value);\n            this._readData1Node.forwardSignal(this, this.values[this.selectedReadReg1]);\n        } else if (signaler == this._readSel2Node) {\n            this.selectedReadReg2 = InstructionHelper.getRs2(value);\n            this._readData2Node.forwardSignal(this, this.values[this.selectedReadReg2]);\n        } else {\n            console.error(\"Error\");\n        }\n    }\n\n    onRisingEdge(): void {\n        if (this._inputWriteEnNode.value == RegisterFile.WRITE_YES) {\n            this.nextSel = InstructionHelper.getRd(this._inputWriteSelNode.value);\n            this.selectedWriteReg = this.nextSel;\n\n            if (this._inputWriteDataNode.value == null) {\n                console.log(\"Error\");\n                return;\n            }\n\n            this.nextValue = this._inputWriteDataNode.value;\n            this._inputWriteEnNode.mark(this);\n            this._inputWriteSelNode.mark(this);\n            this._inputWriteDataNode.mark(this);\n        }\n    }\n\n\n    mark(caller: Component): void {\n        switch (caller) {\n            case this._readData1Node: {\n                this.readReg1Marked = true;\n                this._readSel1Node.mark(this);\n                break;\n            }\n            case this._readData2Node: {\n                this.readReg2Marked = true;\n                this._readSel2Node.mark(this);\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n    }\n\n    set readSel1Node(node: CircuitNode) {\n        this._readSel1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set readSel2Node(node: CircuitNode) {\n        this._readSel2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set inputWriteSelNode(node: CircuitNode) {\n        this._inputWriteSelNode = node;\n    }\n\n    set inputWriteEnNode(node: CircuitNode) {\n        this._inputWriteEnNode = node;\n    }\n\n    set inputWriteDataNode(node: CircuitNode) {\n        this._inputWriteDataNode = node;\n    }\n\n    set readData1Node(node: CircuitNode) {\n        this._readData1Node = node;\n    }\n\n    set readData2Node(node: CircuitNode) {\n        this._readData2Node = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\nexport default class ImmSelect extends Component {\n    public static readonly ITYPE = Value.fromUnsignedInt(0, 2);\n    public static readonly BRTYPE = Value.fromUnsignedInt(1, 2);\n    public static readonly BSTYPE = Value.fromUnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private ctrlValue: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"Imm\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 15, this.y + 43, \"Select\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n\n        switch (this.ctrlValue) {\n            case ImmSelect.ITYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmIType(this.instrValue), 12);\n                break;\n            }\n            case ImmSelect.BRTYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmBType(this.instrValue), 13);\n                break;\n            }\n            case ImmSelect.BSTYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmSType(this.instrValue), 12);\n                break;\n            }\n            default: {\n                result = new Value(\"0\", 12);\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        this._outNode.forwardSignal(this, result.signExtend(32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class BranchLogic extends Component {\n    public static readonly BRANCH_TRUE = new Value(\"0\", 1);\n    public static readonly BRANCH_FALSE = new Value(\"1\", 1);\n\n    private _data1Node: CircuitNode;\n    private _data2Node: CircuitNode;\n    private _instrNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private data1Value: Value;\n    private data2Value: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawTextCentered(this.x, this.y + 23, 100, \"Branch\", Config.fontColor, Config.fontSize);\n        g.drawTextCentered(this.x, this.y + 43, 100, \"Logic\", Config.fontColor, Config.fontSize);\n    }\n\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._data1Node:\n                this.data1Value = value;\n                break;\n            case this._data2Node:\n                this.data2Value = value;\n                break;\n            case this._instrNode:\n                this.instrValue = value;\n                break;\n        }\n\n        if (this.data1Value == undefined || this.data2Value == undefined || this.instrValue == undefined) {\n            return;\n        }\n\n        let func = InstructionHelper.getFuncBType(this.instrValue);\n        let result: boolean;\n\n        switch (func) {\n            case InstructionConstants.FUNCT_BEQ: {\n                result = Value.cmpEQ(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BNE: {\n                result = Value.cmpNE(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BLT: {\n                result = Value.cmpLT(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BGE: {\n                result = Value.cmpGE(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BLTU: {\n                result = Value.cmpLTU(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BGEU: {\n                result = Value.cmpGEU(this.data1Value, this.data2Value);\n                break;\n            }\n        }\n\n        this._outNode.forwardSignal(this, result ? BranchLogic.BRANCH_TRUE : BranchLogic.BRANCH_FALSE);\n    }\n\n\n    mark(caller: Component): void {\n        this._data1Node.mark(this);\n        this._data2Node.mark(this);\n        this._instrNode.mark(this);\n    }\n\n    set data1Node(node: CircuitNode) {\n        this._data1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set data2Node(node: CircuitNode) {\n        this._data2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value, {VAL_ONE_32b, VAL_THREE_32b, VAL_TWO_32b, VAL_ZERO_32b} from \"../util/Value\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport RegisterFile from \"./RegisterFile\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport ImmSelect from \"./ImmSelect\";\nimport BranchLogic from \"./BranchLogic\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class ControlUnit extends Component {\n    private _instrNode: CircuitNode;\n    private _branchNode: CircuitNode;\n\n    private _PCSelNode: CircuitNode;\n    private _RegWriteEn: CircuitNode;\n    private _MemWrite: CircuitNode;\n    private _WBSel: CircuitNode;\n    private _WASel: CircuitNode;\n    private _ImmSel: CircuitNode;\n    private _FuncSel: CircuitNode;\n    private _Op2Sel: CircuitNode;\n\n    private instrValue: Value = VAL_ZERO_32b;\n    private branchValue: Value;\n    private markBranch: boolean;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillRect(this.x - 5, this.y - 5, 10, 10, Config.signalColor, Config.signalColor);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.branchValue = undefined;\n        this.markBranch = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._branchNode: {\n                this.branchValue = value;\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.branchValue == undefined) {\n            return;\n        }\n\n        let opcode = InstructionHelper.getOpCodeStr(this.instrValue);\n        let ImmSel, Op2Sel, FuncSel, MemWr, RFWen, WBSel, WASel, PCSel: Value;\n\n        switch (opcode) {\n            case InstructionConstants.OP_CODE_ALU : {\n                ImmSel = undefined;\n                Op2Sel = VAL_ZERO_32b;\n                FuncSel = ALUControl.FUNC;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_ALUI : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.OP;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_LW : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ONE_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_SW : {\n                ImmSel = ImmSelect.BSTYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_YES;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_BRANCH : {\n                ImmSel = ImmSelect.BRTYPE;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = this.branchValue == BranchLogic.BRANCH_TRUE ? VAL_ZERO_32b : VAL_THREE_32b;\n                this.markBranch = true;\n                break;\n            }\n            case InstructionConstants.OP_CODE_JAL : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ZERO_32b;\n                PCSel = VAL_TWO_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_JALR : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_ONE_32b;\n                break;\n            }\n\n            default: {\n                console.error(\"Unknown OP Code: \" + opcode);\n                PCSel = VAL_THREE_32b;\n            }\n        }\n\n        if (ImmSel) this._ImmSel.forwardSignal(this, ImmSel);\n        if (Op2Sel) this._Op2Sel.forwardSignal(this, Op2Sel);\n        if (FuncSel) this._FuncSel.forwardSignal(this, FuncSel);\n        if (MemWr) this._MemWrite.forwardSignal(this, MemWr);\n        if (RFWen) this._RegWriteEn.forwardSignal(this, RFWen);\n        if (WBSel) this._WBSel.forwardSignal(this, WBSel);\n        if (WASel) this._WASel.forwardSignal(this, WASel);\n        if (PCSel) this._PCSelNode.forwardSignal(this, PCSel);\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n\n        if (this.markBranch) {\n            this._branchNode.mark(this);\n        }\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set branchNode(node: CircuitNode) {\n        this._branchNode = node;\n        node.addNeighbour(this);\n    }\n\n    set PCSelNode(node: CircuitNode) {\n        this._PCSelNode = node;\n    }\n\n    set RegWriteEn(node: CircuitNode) {\n        this._RegWriteEn = node;\n    }\n\n    set MemWrite(node: CircuitNode) {\n        this._MemWrite = node;\n    }\n\n    set WBSel(node: CircuitNode) {\n        this._WBSel = node;\n    }\n\n    set WASel(node: CircuitNode) {\n        this._WASel = node;\n    }\n\n    set ImmSel(node: CircuitNode) {\n        this._ImmSel = node;\n    }\n\n    set FuncSel(node: CircuitNode) {\n        this._FuncSel = node;\n    }\n\n    set Op2Sel(node: CircuitNode) {\n        this._Op2Sel = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value from \"../util/Value\";\n\nexport default class ConstValue extends Component {\n    readonly value: Value;\n    private _outNode: CircuitNode;\n\n    constructor(x: number, y: number, value: Value) {\n        super(x, y);\n        this.value = value;\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [0, 25], [25, 25], [25, 0]], this.x, this.y),\n            Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 5, this.y + 20, this.value.asShortHexString(), Config.fontColor, Config.fontSize);\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    mark(caller: Component): void {\n        // TODO: change color\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Graphics from \"./util/Graphics\";\nimport ArithmeticLogicUnit from \"./components/ArithmeticLogicUnit\";\nimport Register from \"./components/Register\";\nimport CircuitNode from \"./components/CircutNode\";\nimport Config from \"./util/Config\";\nimport Component from \"./components/Component\";\nimport InstructionMemory from \"./components/InstructionMemory\";\nimport Multiplexer, {MultiplexerOrientation} from \"./components/Multiplexer\";\nimport ControlUnit from \"./components/ControlUnit\";\nimport ConstValue from \"./components/ConstValue\";\nimport RegisterFile from \"./components/RegisterFile\";\nimport ImmSelect from \"./components/ImmSelect\";\nimport ALUControl from \"./components/ALUControl\";\nimport DataMemory from \"./components/DataMemory\";\nimport Value from \"./util/Value\";\nimport BranchLogic from \"./components/BranchLogic\";\n\nexport default class Simulator {\n    protected elements: Component[] = [];\n    private readonly g: Graphics;\n    private initialInstruct: Value[];\n\n    constructor(canvas: HTMLCanvasElement, parsed: Value[]) {\n        this.g = new Graphics(canvas, 1200, 800);\n        this.load(parsed);\n    }\n\n    create() {\n        let controlUnit = new ControlUnit(0, 0);\n\n        let PCRegister = new Register(50, 50);\n        let instrMemory = new InstructionMemory(10, 100, this.initialInstruct);\n        let PCStepVal = new ConstValue(350, 135, Value.fromUnsignedInt(4));\n        let PCAdder = new ArithmeticLogicUnit(405, 135, ArithmeticLogicUnit.ADD);\n        let PCSelMux = new Multiplexer(410, 25, 4, MultiplexerOrientation.LEFT);\n\n        this.elements.push(PCRegister, instrMemory, PCStepVal, PCSelMux, PCAdder, controlUnit);\n\n        let WASel1 = new ConstValue(325, 520, Value.fromUnsignedInt(1));\n        let WASelMux = new Multiplexer(360, 520, 2);\n        let registerFile = new RegisterFile(425, 260);\n        let immSelect = new ImmSelect(625, 550);\n        let ALUCtrl = new ALUControl(740, 630);\n\n        this.elements.push(WASel1, registerFile, WASelMux, immSelect, ALUCtrl);\n\n        let op2SelMux = new Multiplexer(850, 500, 2);\n        let ALU = new ArithmeticLogicUnit(895, 400);\n\n        this.elements.push(op2SelMux, ALU);\n\n        let dataMemory = new DataMemory(985, 200);\n        let WBSelMux = new Multiplexer(1135, 600, 3);\n\n        this.elements.push(dataMemory, WBSelMux);\n\n        let branchAdder = new ArithmeticLogicUnit(800, 210, ArithmeticLogicUnit.ADD);\n        let branchLogic = new BranchLogic(670, 275);\n\n        this.elements.push(branchAdder, branchLogic);\n\n        /* PC enable write */\n        let node = new CircuitNode(70, 50, Value.fromUnsignedInt(1));\n        PCRegister.writeEnable = node;\n        this.elements.push(node); // Not required\n\n        let path: CircuitNode[];\n\n        /* PCSelMux ->  PC */\n        path = this.createPath([[410, 72.5], [375, 72.5], [375, 40], [30, 40], [30, 62.5], [50, 62.5]]);\n        PCSelMux.outNode = path[0];\n        PCRegister.inputNode = path[path.length - 1];\n\n        /* PC Step -> PC Adder */\n        path = this.createPath([[375, 147.5], [405, 147.5]]);\n        PCStepVal.outNode = path[0];\n        PCAdder.input1Node = path[path.length - 1];\n\n        /* PC Register -> PC Adder */\n        path = this.createPath([[200, 62.5], [220, 62.5], [275, 62.5], [325, 62.5], [325, 197.5], [405, 197.5]]);\n        PCRegister.outNode = path[0];\n        PCAdder.input2Node = path[path.length - 1];\n\n        let PCRegisterNode1 = path[1];\n        let PCRegisterNode2 = path[2];\n\n        /* PC Adder -> PCSelMux */\n        path = this.createPath([[445, 172.5], [455, 172.5], [455, 95], [435, 95]]);\n        PCAdder.resultNode = path[0];\n        PCSelMux.setInputNode(3, path[path.length - 1]);\n\n        /* PC Register -> Instruction memory */\n        path = this.createPath([[220, 85], [125, 85], [125, 100]]);\n        PCRegisterNode1.addNeighbour(path[0]);\n        instrMemory.addressNode = path[path.length - 1];\n\n        /* Instruction memory -> instrNode */\n        path = this.createPath([[240, 425], [305, 425]]);\n        instrMemory.outputDataNode = path[0];\n        let instrNode = path[path.length - 1];\n\n        /* Instr node for Control unit */\n        controlUnit.instrNode = instrNode;\n\n        /* WASel1 -> WASelMux */\n        path = this.createPath([[350, 532.5], [360, 532.5]]);\n        WASel1.outNode = path[1];\n        WASelMux.setInputNode(0, path[path.length - 1]);\n\n        /* WASelMux -> Register File */\n        path = this.createPath([[385, 552.5], [425, 552.5]]);\n        WASelMux.outNode = path[0];\n        registerFile.inputWriteSelNode = path[path.length - 1];\n\n        /* instrNode -> RF Write select */\n        path = this.createPath([[305, 570], [360, 570]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeBottom = path[0];\n        WASelMux.setInputNode(1, path[path.length - 1]);\n\n        /* instrNode -> ImmSelect */\n        path = this.createPath([[305, 620], [600, 620], [600, 575], [625, 575]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        immSelect.instrNode = path[path.length - 1];\n\n        /* instrNode -> ALU Control */\n        path = this.createPath([[305, 655], [740, 655]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        ALUCtrl.instrNode = path[path.length - 1];\n\n        /* instrNode -> DataMemory */\n        path = this.createPath([[305, 690], [985, 690]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        dataMemory.instrNode = path[path.length - 1];\n\n        /* instrNode -> ReadSel2 */\n        path = this.createPath([[305, 390], [425, 390]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeTop = path[0];\n        registerFile.readSel2Node = path[path.length - 1];\n\n        /* instrNode -> ReadSel1 */\n        path = this.createPath([[305, 370], [425, 370]]);\n        instrNodeTop.addNeighbour(path[0]);\n        instrNodeTop = path[0];\n        registerFile.readSel1Node = path[path.length - 1];\n\n        /* ImmSelect -> op2SelMux */\n        path = this.createPath([[725, 575], [790, 575], [790, 550], [850, 550]]);\n        immSelect.outNode = path[0];\n        op2SelMux.setInputNode(1, path[path.length - 1]);\n\n        let immSelectNode = path[2];\n\n        /* RF ReadData2 -> op2SelMux */\n        path = this.createPath([[575, 390], [670, 390], [670, 525], [745, 525], [830, 525], [850, 525]]);\n        registerFile.readData2Node = path[0];\n        op2SelMux.setInputNode(0, path[path.length - 1]);\n        let readData2Node = path[path.length - 2];\n        let readData2BranchNode = path[3];\n\n        /* RF ReadData1 -> ALU */\n        path = this.createPath([[575, 370], [695, 370], [885, 370], [885, 415], [895, 415]]);\n        registerFile.readData1Node = path[0];\n        ALU.input1Node = path[path.length - 1];\n\n        let readData1BranchNode = path[1];\n\n        /* op2SelMux -> ALU */\n        path = this.createPath([[875, 532.5], [885, 532.5], [885, 460], [895, 460]]);\n        op2SelMux.outNode = path[0];\n        ALU.input2Node = path[path.length - 1];\n\n        /* ALU Control -> ALU */\n        path = this.createPath([[840, 655], [915, 655], [915, 467.5]]);\n        ALUCtrl.outNode = path[0];\n        ALU.selOpNode = path[path.length - 1];\n\n        /* ALU -> WBSel Mux */\n        path = this.createPath([[935, 437.5], [960, 437.5], [960, 710], [1110, 710], [1110, 655], [1135, 655]]);\n        ALU.resultNode = path[0];\n        WBSelMux.setInputNode(2, path[path.length - 1]);\n        let ALUoutNode = path[1];\n\n        /* ALU -> DataMemory */\n        path = this.createPath([[960, 300], [985, 300]]);\n        ALUoutNode.addNeighbour(path[0]);\n        dataMemory.addressNode = path[path.length - 1];\n\n        /* DataMemory - > WBSel Mux */\n        path = this.createPath([[1085, 640], [1135, 640]]);\n        dataMemory.outputDataNode = path[0];\n        WBSelMux.setInputNode(1, path[path.length - 1]);\n\n        /* WBSel Mux -> RF WriteData */\n        path = this.createPath([[1160, 640], [1180, 640], [1180, 730], [405, 730], [405, 590], [425, 590]]);\n        WBSelMux.outNode = path[0];\n        registerFile.inputWriteDataNode = path[path.length - 1];\n\n        /* RF ReadData2 -> DataMemory */\n        path = this.createPath([[830, 610], [985, 610]]);\n        readData2Node.addNeighbour(path[0]);\n        dataMemory.inputDataNode = path[path.length - 1];\n\n        /* PC -> branchAdder */\n        path = this.createPath([[275, 222.5], [800, 222.5]]);\n        PCRegisterNode2.addNeighbour(path[0]);\n        branchAdder.input1Node = path[path.length - 1];\n\n        /* ImmSelect -> branchAdder */\n        path = this.createPath([[790, 272.5], [800, 272.5]]);\n        immSelectNode.addNeighbour(path[0]);\n        branchAdder.input2Node = path[path.length - 1];\n\n        /* branchAdder -> PCSel */\n        path = this.createPath([[840, 247.5], [850, 247.5], [850, 50], [435, 50]]);\n        branchAdder.resultNode = path[0];\n        PCSelMux.setInputNode(0, path[path.length - 1]);\n\n        /* readData1 -> Branch Logic */\n        node = new CircuitNode(695, 325);\n        readData1BranchNode.addNeighbour(node);\n        branchLogic.data1Node = node;\n        this.elements.push(node);\n\n        /* readData2 -> Branch Logic */\n        node = new CircuitNode(745, 325);\n        readData2BranchNode.addNeighbour(node);\n        branchLogic.data2Node = node;\n        this.elements.push(node);\n\n        /* instrNode -> Branch Select */\n        branchLogic.instrNode = instrNodeTop;\n\n        /* Branch Logic -> Control Unit */\n        node = new CircuitNode(770, 300);\n        branchLogic.outNode = node;\n        controlUnit.branchNode = node;\n        this.elements.push(node);\n\n        /*\n         *Control signals\n         */\n\n        /* PCSel */\n        path = this.createPath([[422.5, 10], [422.5, 32.5]]);\n        controlUnit.PCSelNode = path[0];\n        PCSelMux.selInputNode = path[path.length - 1];\n\n        /* RegEnWrite */\n        path = this.createPath([[550, 10], [550, 260]]);\n        controlUnit.RegWriteEn = path[0];\n        registerFile.inputWriteEnNode = path[path.length - 1];\n\n        /* MemWrite */\n        path = this.createPath([[1010, 10], [1010, 200]]);\n        controlUnit.MemWrite = path[0];\n        dataMemory.writeEnNode = path[path.length - 1];\n\n        /* WBSel */\n        path = this.createPath([[1147.5, 10], [1147.5, 607.5]]);\n        controlUnit.WBSel = path[0];\n        WBSelMux.selInputNode = path[path.length - 1];\n\n        /* WASel */\n        path = this.createPath([[372.5, 790], [372.5, 577.5]]);\n        controlUnit.WASel = path[0];\n        WASelMux.selInputNode = path[path.length - 1];\n\n        /* ImmSel */\n        path = this.createPath([[675, 790], [675, 600]]);\n        controlUnit.ImmSel = path[0];\n        immSelect.controlNode = path[path.length - 1];\n\n        /* FuncSel */\n        path = this.createPath([[790, 790], [790, 680]]);\n        controlUnit.FuncSel = path[0];\n        ALUCtrl.controlNode = path[path.length - 1];\n\n        /* Op2Sel */\n        path = this.createPath([[862.5, 790], [862.5, 557.5]]);\n        controlUnit.Op2Sel = path[0];\n        op2SelMux.selInputNode = path[path.length - 1];\n    }\n\n    private createPath(path: number[][]): CircuitNode[] {\n        let pathNodes: CircuitNode[] = [];\n\n        pathNodes.push(new CircuitNode(path[0][0], path[0][1]));\n        let last = pathNodes[0];\n\n        for (let i = 1; i < path.length; i++) {\n            let node = new CircuitNode(path[i][0], path[i][1]);\n            last.addNeighbour(node);\n            pathNodes.push(node);\n            last = node;\n        }\n\n        pathNodes.forEach(el => this.elements.push(el));\n\n        return pathNodes;\n    }\n\n    draw() {\n        this.g.rescale();\n        this.g.clear(Config.backgroundColor);\n        // this.g.fillRect(0, 0, 1200, 800, \"#00000000\", \"red\");\n\n        this.elements.forEach(el => el.draw(this.g))\n    }\n\n    step() {\n        console.log(\"Step\");\n        this.elements.forEach(el => el.refresh());\n        this.elements.forEach(el => el.onFallingEdge());\n        this.elements.forEach(el => el.onRisingEdge());\n        this.draw();\n    }\n\n    load(parsed: Value[]) {\n        this.initialInstruct = parsed;\n        this.reset();\n    }\n\n    reset() {\n        this.elements = [];\n        this.create();\n        this.step();\n    }\n}\n\n","import Value, {VAL_ZERO_32b} from \"./Value\";\nimport InstructionMemory from \"../components/InstructionMemory\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\n\nexport default class Parser {\n    static parse(textContent : String) : Value[] {\n\n        let ret : Value[] = [];\n        let lines = textContent.split('\\n');\n        for(let i = 0; i < lines.length; i++) {\n             ret.push(Value.HexString(lines[i]));\n        }\n\n        while(ret.length < InstructionMemory.SIZE)\n            ret.push(VAL_ZERO_32b);\n\n        return ret;\n    }\n}","export function toggleFullScreen() {\n    let documentBody = document.body;\n\n    if (!this.isFullScreen) {\n        // @ts-ignoreç\n        if (documentBody.requestFullScreen) {\n            // @ts-ignoreç\n            documentBody.requestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.webkitRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.webkitRequestFullscreen();\n            // @ts-ignoreç\n        } else if (documentBody.mozRequestFullScreen) {\n            // @ts-ignoreç\n            documentBody.mozRequestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.msRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.msRequestFullscreen();\n        }\n        this.isFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            // @ts-ignoreç\n        } else if (document.msExitFullscreen) {\n            // @ts-ignoreç\n            document.msExitFullscreen();\n            // @ts-ignoreç\n        } else if (document.mozCancelFullScreen) {\n            // @ts-ignorec\n            document.mozCancelFullScreen();\n            // @ts-ignoreç\n        } else if (document.webkitExitFullscreen) {\n            // @ts-ignoreç\n            document.webkitExitFullscreen();\n        }\n        this.isFullScreen = false;\n    }\n}","import Simulator from \"./Simulator\";\nimport Parser from \"./util/Parser\";\nimport {toggleFullScreen} from \"./util/util\";\nimport Value from \"./util/Value\";\n\nlet canvas = <HTMLCanvasElement> document.getElementById(\"sim-canvas\");\nlet menuBar = <HTMLDivElement> document.getElementById(\"menu\");\nlet btnStep = <HTMLButtonElement> document.getElementById(\"btn-step\");\nlet btnPlay = <HTMLButtonElement> document.getElementById(\"btn-play\");\nlet btnPause = <HTMLButtonElement> document.getElementById(\"btn-pause\");\nlet txtCode = <HTMLTextAreaElement> document.getElementById(\"txt-code\");\nlet btnLoad = <HTMLButtonElement> document.getElementById(\"btn-load\");\nlet btnReset = <HTMLButtonElement> document.getElementById(\"btn-reset\");\nlet sim = new Simulator(canvas, Parser.parse(txtCode.textContent));\nlet play = false;\n\nlet resize = () => {\n    canvas.style.width = document.body.clientWidth + \"px\";\n    canvas.style.height = (document.body.clientHeight - menuBar.clientHeight) + \"px\";\n    sim.draw();\n};\n\nresize();\n\nwindow.addEventListener(\"resize\", () => resize());\n\nValue.main();\n\nwindow.addEventListener(\"keydown\", evt => {\n    switch (evt.key) {\n        case \"s\":\n        case \"S\": {\n            sim.step();\n            break;\n        }\n\n        case \"r\":\n        case \"R\": {\n            sim.reset();\n            break;\n        }\n\n        case \"f\":\n        case \"F\": {\n            toggleFullScreen();\n            break;\n        }\n        case \"ArrowRight\":\n            console.log(\"->\")\n    }\n});\n\nbtnStep.addEventListener(\"click\", evt => {\n    sim.step();\n    btnPause.click()\n});\n\nbtnPlay.addEventListener(\"click\", evt => {\n    play = true;\n    btnPlay.disabled = true;\n    btnPause.disabled = false\n});\n\nbtnPause.addEventListener(\"click\", evt => {\n    play = false;\n    btnPlay.disabled = false;\n    btnPause.disabled = true\n});\n\nbtnLoad.addEventListener(\"click\", evt => {\n    let parsed = Parser.parse(txtCode.textContent);\n    if (parsed) sim.load(parsed)\n});\n\nbtnReset.addEventListener(\"click\", evt => sim.reset());\n\nsetInterval(() => {\n    if (play) {\n        sim.step();\n    }\n\n}, 100);\n"]}