{"version":3,"sources":["util/Graphics.ts","components/Component.ts","util/Config.ts","util/Value.ts","components/ArithmeticLogicUnit.ts","components/Register.ts","components/CircutNode.ts","instructions/InstructionConstants.ts","instructions/InstructionHelper.ts","instructions/InstructionDecoder.ts","instructions/InstructionFactory.ts","components/InstructionMemory.ts","components/Multiplexer.ts","components/ALUControl.ts","components/DataMemory.ts","components/RegisterFile.ts","components/ImmSelect.ts","components/BranchLogic.ts","components/ControlUnit.ts","components/ConstValue.ts","Simulator.ts","util/Parser.ts","util/util.ts","main.ts"],"names":[],"mappings":"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","file":"main.af090d59.js","sourceRoot":"../src","sourcesContent":["export default class Graphics {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n\n    private readonly width: number;\n    private readonly height: number;\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.width = width;\n        this.height = height;\n\n        if (canvas.style.width == undefined || canvas.style.height == undefined) {\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n            console.warn(\"Canvas width or height undefined\");\n        }\n    }\n\n    rescale() {\n        let canvasWidth = this.canvas.clientWidth;\n        let canvasHeight = this.canvas.clientHeight;\n\n        /* Added support for Retina display */\n        this.canvas.width = canvasWidth * window.devicePixelRatio;\n        this.canvas.height = canvasHeight * window.devicePixelRatio;\n\n        let scale = canvasWidth / canvasHeight > this.width / this.height ?\n            canvasHeight / this.height :\n            canvasWidth / this.width;\n\n        let rescaleOffsetX = (canvasWidth - scale * this.width) / 2;\n        let rescaleOffsetY = (canvasHeight - scale * this.height) / 2;\n\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.translate(rescaleOffsetX * window.devicePixelRatio, rescaleOffsetY * window.devicePixelRatio);\n        this.ctx.scale(scale * window.devicePixelRatio, scale * window.devicePixelRatio);\n    }\n\n    clear(color: string) {\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.restore();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, color: string, lineWidth: number = 2) {\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n    }\n\n    drawPath(path: number[][], strokeStyle: string, lineWidth: number = 2) {\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(path[0][0], path[0][1]);\n        for (let i = 1; i < path.length; i++) {\n            this.ctx.lineTo(path[i][0], path[i][1]);\n        }\n\n        this.ctx.stroke();\n    }\n\n\n    fillRect(x: number, y: number, w: number, h: number, fillStyle: string, strokeStyle: string, lineWidth: number = 2) {\n        this.fillPolygon([[x, y], [x + w, y], [x + w, y + h], [x, y + h]], fillStyle, strokeStyle, lineWidth);\n    }\n\n    fillPolygon(point: number[][], fillStyle: string, strokeStyle: string, lineWidth: number = 2) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(point[0][0], point[0][1]);\n        for (let i = 1; i < point.length; i++) {\n            this.ctx.lineTo(point[i][0], point[i][1]);\n        }\n\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    fillCircle(x: number, y: number, r: number, fillStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, r, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    drawText(x: number, y: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n        this.ctx.fillText(text, x, y);\n    }\n\n    drawTextCentered(x: number, y: number, width: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n\n        let textWidth = this.ctx.measureText(text).width;\n\n        this.ctx.fillText(text, (x + (width - textWidth) / 2), y);\n    }\n\n    static addOffset(points: number[][], xOffset: number, yOffset: number): number[][] {\n        let updated: number[][] = [];\n\n        for (let idx  in points) {\n            updated.push([xOffset + points[idx][0], yOffset + points[idx][1]]);\n        }\n\n        return updated;\n    }\n\n}","import Graphics from \"../util/Graphics\";\nimport Value from \"../util/Value\";\n\nexport default abstract class Component {\n    private static cnt = 0;\n    public readonly id: number;\n\n    public readonly x: number;\n    public readonly y: number;\n\n    protected constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n\n        this.id = Component.cnt++;\n    }\n\n    abstract draw(g: Graphics): void;\n\n    refresh(): void {\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n    }\n\n    mark(caller: Component): void {\n    }\n\n    onFallingEdge(): void {\n    }\n\n    onRisingEdge(): void {\n    }\n}","export default class Config {\n    static readonly backgroundColor: string = \"#ffffff\";\n    static readonly elementFillColor: string = \"#b1e5e0\";\n    static readonly elementStrokeColor: string = \"#000000\";\n    static readonly memoryFillColor: string = \"#fffed0\";\n    static readonly memoryStrokeColor: string = \"#000000\";\n    static readonly lineColor: string = \"#000000\";\n    static readonly signalColor: string = \"#FF0000\";\n    static readonly fontColor: string = \"#000000\";\n    static readonly readFontColor: string = \"#0000FF\";\n    static readonly writeFontColor: string = \"#FF0000\";\n\n    static readonly fontSize: number = 20;\n}","export default class Value {\n    readonly bitValue: string;\n    readonly numBits: number;\n\n    private static mod(n: number, m: number): number {\n        return ((n % m) + m) % m;\n    }\n\n    constructor(bitValue: string, numBits: number) {\n        if (bitValue.length > numBits) {\n            console.log(\"BitValue is too long\");\n        }\n\n        this.numBits = numBits;\n        this.bitValue = this.padWith(bitValue, \"0\", numBits);\n    }\n\n    static fromUnsignedInt(val: number, num_bits: number = 32): Value {\n        return new Value(Value.mod(val, 2 ** num_bits).toString(2), num_bits);\n    }\n\n    static fromSignedInt(val: number, numBits: number = 32): Value {\n        return new Value((val < 0 ? val + (1 << numBits) : val).toString(2), numBits);\n    }\n\n    asUnsignedInt(): number {\n        return parseInt(this.bitValue, 2);\n    }\n\n    asSignedInt(): number {\n        let str = this.padWith(this.bitValue, \"0\", this.numBits);\n        if (str[0] == \"0\") {\n            return parseInt(this.bitValue, 2);\n        }\n\n        let flippedStr = \"\";\n        for (let i = 1; i < str.length; i++) {\n            flippedStr += str[i] == \"1\" ? \"0\" : \"1\";\n        }\n\n        return -parseInt(flippedStr, 2) - 1;\n    }\n\n    asHexString(): string {\n        let str = this.asUnsignedInt().toString(16);\n        while (str.length < this.numBits / 4) {\n            str = \"0\" + str;\n        }\n        return \"0x\" + str.toUpperCase();\n    }\n\n    asBinaryString(): string {\n        return this.bitValue;\n    }\n\n    asShortHexString(): string {\n        return this.asUnsignedInt().toString(16).toUpperCase();\n    }\n\n    signExtend(numBits: number): Value {\n        return new Value(this.padWith(this.bitValue, this.bitValue[0], numBits), numBits);\n    }\n\n    getNumBits(): number {\n        return this.numBits;\n    }\n\n    getByteBinary(byteIdx: number): string {\n        if (this.numBits != 32) {\n            console.log(\"Error\");\n            return null;\n        }\n\n        return this.asBinaryString().substr((3 - byteIdx) * 8, 8)\n    }\n\n    writeByte(byteIdx: number, byte: string): Value {\n        if (this.numBits != 32) {\n            console.log(\"Error\");\n            return null;\n        }\n\n        byteIdx = 3 - byteIdx;\n        let str = this.asBinaryString();\n        str = str.substring(0, byteIdx * 8) + byte + str.substr((byteIdx + 1) * 8);\n\n        return new Value(str, 32);\n    }\n\n    private padWith(str: string, padValue: string, length: number) {\n        while (str.length < length) {\n            str = padValue + str;\n        }\n        return str;\n    }\n\n    // TODO: check if the implementations are correct\n    static add(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() + rhs.asUnsignedInt(), 32);\n    }\n\n    static sub(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() - rhs.asUnsignedInt(), 32);\n    }\n\n    static and(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() & rhs.asUnsignedInt(), 32);\n    }\n\n    static or(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() | rhs.asUnsignedInt(), 32);\n    }\n\n    static xor(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() ^ rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftLeftLogical(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() << rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightLogical(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() >>> rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightArithmetic(lhs: Value, rhs: Value): Value {\n        return Value.fromUnsignedInt(lhs.asUnsignedInt() >> rhs.asUnsignedInt(), 32);\n    }\n\n    static cmp(lhs: Value, rhs: Value, signed: boolean): number {\n        if (lhs.numBits != rhs.numBits) {\n            console.error(\"The nuber of bits do not match\");\n            return null;\n        }\n\n        let a = lhs.asBinaryString();\n        let b = rhs.asBinaryString();\n\n        if (signed && (a[0]) != b[0]) {\n            return a[0] == '1' ? -1 : 1;\n        }\n\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] != b[i]) {\n                return a[i] == '0' ? -1 : 1;\n            }\n        }\n\n        return 0;\n    }\n\n    static cmpEQ(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) == 0;\n    }\n\n    static cmpNE(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) != 0;\n    }\n\n    static cmpLT(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, true) == -1;\n    }\n\n    static cmpGE(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, true) != -1;\n    }\n\n    static cmpLTU(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) == -1;\n    }\n\n    static cmpGEU(lhs: Value, rhs: Value): boolean {\n        return this.cmp(lhs, rhs, false) != -1;\n    }\n\n    static main() {\n        // for (let i = -4; i < 4; i++) {\n        //     let v = this.fromSignedInt(i, 3);\n        //     console.log(v.asBinaryString() + \" \" + v.asSignedInt() + \" \" + v.asUnsignedInt());\n        // }\n\n        //@formatter:off\n        // console.log(this.cmpEQ(new Value(-10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpEQ(new Value(-10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpEQ(new Value(  9, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpEQ(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value( 11, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpEQ(new Value(-11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpNE(new Value(-10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpNE(new Value(-10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpNE(new Value(  9, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpNE(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value( 11, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpNE(new Value(-11, 32), new Value( 10, 32)) == true);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpLT(new Value(-10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLT(new Value( 10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLT(new Value(-10, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value(  9, 32), new Value(-10, 32)) == false);\n        // console.log(this.cmpLT(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLT(new Value( 11, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLT(new Value(-11, 32), new Value( 10, 32)) == true);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpGE(new Value(-10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGE(new Value( 10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGE(new Value(-10, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value(  9, 32), new Value(-10, 32)) == true);\n        // console.log(this.cmpGE(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGE(new Value( 11, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGE(new Value(-11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpLTU(new Value( 10, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpLTU(new Value(  9, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpLTU(new Value( 11, 32), new Value( 10, 32)) == false);\n        //\n        // console.log(\"--\");\n        //\n        // console.log(this.cmpGEU(new Value( 10, 32), new Value( 10, 32)) == true);\n        // console.log(this.cmpGEU(new Value(  9, 32), new Value( 10, 32)) == false);\n        // console.log(this.cmpGEU(new Value( 11, 32), new Value( 10, 32)) == true);\n        //@formatter:on\n\n    }\n\n    static HexString(s: string, num_bits: number = 32) {\n        return Value.fromUnsignedInt(parseInt(s, 16), num_bits);\n    }\n}\n\nexport const VAL_ZERO_32b = Value.fromUnsignedInt(0, 32);\nexport const VAL_ONE_32b = Value.fromUnsignedInt(1, 32);\nexport const VAL_TWO_32b = Value.fromUnsignedInt(2, 32);\nexport const VAL_THREE_32b = Value.fromUnsignedInt(3, 32);\nexport const VAL_MAX_32b = new Value(\"11111111111111111111111111111111\", 32);\n\nexport const VAL_ZERO_1b = Value.fromUnsignedInt(0, 1);\nexport const VAL_ZERO_5b = Value.fromUnsignedInt(0, 5);","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value, {VAL_ZERO_1b, VAL_ZERO_32b, VAL_ZERO_5b} from \"../util/Value\";\n\nexport default class ArithmeticLogicUnit extends Component {\n    /* @formatter:off */\n    public static readonly ADD  = new Value(\"0\", 4); /* Addition               */\n    public static readonly SUB  = new Value(\"1\", 4); /* Subtraction            */\n    public static readonly AND  = new Value(\"2\", 4); /* Bitwise AND            */\n    public static readonly OR   = new Value(\"3\", 4); /* Bitwise OR             */\n    public static readonly XOR  = new Value(\"4\", 4); /* Bitwise XOR            */\n    public static readonly SLL  = new Value(\"5\", 4); /* Shift Left Logical     */\n    public static readonly SRL  = new Value(\"6\", 4); /* Shift Right Logical    */\n    public static readonly SRA  = new Value(\"7\", 4); /* Shift Right Arithmetic */\n    public static readonly SLT  = new Value(\"8\", 4); /* Shift Right Arithmetic */\n    public static readonly SLTU = new Value(\"9\", 4); /* Shift Right Arithmetic */\n\n    /* @formatter:on */\n\n    private readonly defaultOp: Value;\n\n    private _resultNode: CircuitNode = null;\n    private _input1Node: CircuitNode = null;\n    private _input2Node: CircuitNode = null;\n    private _selOpNode: CircuitNode = null;\n\n    private input1Value: Value = VAL_ZERO_32b;\n    private input2Value: Value = VAL_ZERO_1b;\n    private selOpValue: Value = VAL_ZERO_5b;\n\n    constructor(x: number, y: number, defaultOp: Value = undefined) {\n        super(x, y);\n        this.defaultOp = defaultOp;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [40, 15], [40, 60], [0, 75], [0, 45], [10, 37.5], [0, 30]],\n            this.x, this.y), Config.elementFillColor, Config.elementStrokeColor);\n    }\n\n    refresh(): void {\n        this.input1Value = undefined;\n        this.input2Value = undefined;\n        this.selOpValue = this.defaultOp;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._input1Node:\n                this.input1Value = value;\n                break;\n\n            case this._input2Node:\n                this.input2Value = value;\n                break;\n\n            case this._selOpNode:\n                this.selOpValue = value;\n                break;\n        }\n\n        if (this.input1Value == undefined || this.input2Value == undefined || this.selOpValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n        switch (this.selOpValue) {\n            case ArithmeticLogicUnit.ADD: {\n                result = Value.add(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SUB: {\n                result = Value.sub(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.AND: {\n                result = Value.and(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.OR: {\n                result = Value.or(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.XOR: {\n                result = Value.xor(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLL: {\n                result = Value.shiftLeftLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRL: {\n                result = Value.shiftRightLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRA: {\n                result = Value.shiftRightArithmetic(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLT: {\n                // TODO: implement\n                break;\n            }\n            case ArithmeticLogicUnit.SLTU: {\n                // TODO: implement\n                break;\n            }\n            default: {\n                console.error(\"Unknown operation\");\n                result = VAL_ZERO_32b;\n            }\n        }\n\n        this._resultNode.forwardSignal(this, result);\n    }\n\n    mark(caller: Component): void {\n        this._input1Node.mark(this);\n        this._input2Node.mark(this);\n\n        if (this.defaultOp == null) {\n            this._selOpNode.mark(this);\n        }\n    }\n\n    set resultNode(node: CircuitNode) {\n        this._resultNode = node;\n    }\n\n    set input1Node(node: CircuitNode) {\n        this._input1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set input2Node(node: CircuitNode) {\n        this._input2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set selOpNode(node: CircuitNode) {\n        this._selOpNode = node;\n        node.addNeighbour(this);\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value, {VAL_ZERO_32b} from \"../util/Value\";\n\nexport enum RegisterOrientation {\n    HORIZONTAL,\n    VERTICAL\n}\n\nexport default class Register extends Component {\n    private readonly orientation: RegisterOrientation;\n\n    private _inputNode: CircuitNode = null;\n    private _outNode: CircuitNode = null;\n    private _writeEnable: CircuitNode = null;\n\n    private value: Value = VAL_ZERO_32b;\n\n    private nextValue: Value = undefined;\n\n    constructor(x: number, y: number, orientation: RegisterOrientation = RegisterOrientation.HORIZONTAL) {\n        super(x, y);\n        this.orientation = orientation;\n        this.nextValue = undefined;\n    }\n\n    draw(g: Graphics): void {\n        if (this.orientation == RegisterOrientation.HORIZONTAL) {\n            g.fillRect(this.x, this.y, 150, 25, Config.elementFillColor, Config.elementStrokeColor);\n            g.drawText(this.x + 10, this.y + 21, this.value.asHexString(), Config.fontColor, Config.fontSize);\n        } else if (this.orientation == RegisterOrientation.VERTICAL) {\n            // TODO: implement\n        }\n    }\n\n    refresh(): void {\n        if (this.nextValue) {\n            this.value = this.nextValue;\n        }\n        this.nextValue = undefined;\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnable && this._writeEnable.value.asUnsignedInt() != 0) {\n            this.nextValue = this._inputNode.value;\n            this._inputNode.mark(this);\n        }\n    }\n\n    set inputNode(node: CircuitNode) {\n        this._inputNode = node;\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n\n    set writeEnable(node: CircuitNode) {\n        this._writeEnable = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport Value from \"../util/Value\";\n\nexport default class CircuitNode extends Component {\n    private readonly defaultValue: Value;\n\n    private neighbours: Component[] = [];\n    private neighbourNodes: CircuitNode[] = [];\n\n    private _value: Value;\n    private signaler: Component;\n    private marked: boolean;\n\n    constructor(x: number, y: number, defaultValue: Value = undefined) {\n        super(x, y);\n        this.defaultValue = defaultValue;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillCircle(this.x, this.y, 2, Config.signalColor);\n        this.neighbourNodes.forEach(el =>\n            g.drawLine(this.x, this.y, el.x, el.y, el.marked ? Config.signalColor : Config.lineColor)\n        );\n    }\n\n    refresh(): void {\n        this._value = this.defaultValue;\n        this.signaler = undefined;\n        this.marked = false;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        this._value = value;\n        this.signaler = signaler;\n\n        this.neighbours.forEach(nb => {\n            if (nb != signaler) {\n                nb.forwardSignal(this, value);\n            }\n        })\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n        if (this.signaler) {\n            this.signaler.mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    addNeighbour(neighbour: Component) {\n        this.neighbours.push(neighbour);\n\n        if (neighbour instanceof CircuitNode) {\n            this.neighbourNodes.push(neighbour);\n        }\n    }\n\n\n    get value(): Value {\n        return this._value;\n    }\n}","\nexport default class InstructionConstants {\n    /* @formatter:off */\n\n    static readonly OP_CODE_ALU    = \"0110011\";\n    static readonly OP_CODE_ALUI   = \"0010011\";\n    static readonly OP_CODE_LW     = \"0000011\";\n    static readonly OP_CODE_SW     = \"0100011\";\n    static readonly OP_CODE_BRANCH = \"1100011\";\n    static readonly OP_CODE_JAL    = \"1101111\";\n    static readonly OP_CODE_JALR   = \"1100111\";\n\n    /* ALU Functions */\n    static readonly FUNCT_ADD  = \"0000000000\";\n    static readonly FUNCT_SUB  = \"0100000000\";\n    static readonly FUNCT_SLL  = \"0000000001\";\n    static readonly FUNCT_SLT  = \"0000000010\";\n    static readonly FUNCT_SLTU = \"0000000011\";\n    static readonly FUNCT_XOR  = \"0000000100\";\n    static readonly FUNCT_SRL  = \"0000000101\";\n    static readonly FUNCT_SRA  = \"0100000101\";\n    static readonly FUNCT_OR   = \"0000000110\";\n    static readonly FUNCT_AND  = \"0000000111\";\n\n    /* ALUi Functions */\n    static readonly FUNCT_ADDI   = \"000\";\n    static readonly FUNCT_SLTI   = \"010\";\n    static readonly FUNCT_SLTIU  = \"011\";\n    static readonly FUNCT_XORI   = \"100\";\n    static readonly FUNCT_ORI    = \"110\";\n    static readonly FUNCT_ANDI   = \"111\";\n\n    static readonly FUNCT_SLLI = \"0000000001\";\n    static readonly FUNCT_SRLI = \"0000000101\";\n    static readonly FUNCT_SRAI = \"0100000101\";\n\n    /* Load Functions */\n    static readonly FUNCT_LB  = \"000\";\n    static readonly FUNCT_LH  = \"001\";\n    static readonly FUNCT_LW  = \"010\";\n    static readonly FUNCT_LBU = \"100\";\n    static readonly FUNCT_LHU = \"101\";\n\n    /* Store Functions */\n    static readonly FUNCT_SB = \"000\";\n    static readonly FUNCT_SH = \"001\";\n    static readonly FUNCT_SW = \"010\";\n\n    /* Branch Functions */\n    static readonly FUNCT_BEQ  = \"000\";\n    static readonly FUNCT_BNE  = \"001\";\n    static readonly FUNCT_BLT  = \"100\";\n    static readonly FUNCT_BGE  = \"101\";\n    static readonly FUNCT_BLTU = \"110\";\n    static readonly FUNCT_BGEU = \"111\";\n\n    /* @formatter:on */\n}\n\n\n","import Value from \"../util/Value\";\n\nexport default class InstructionHelper {\n    static readonly INSTR_SIZE = 32;\n    static readonly OP_CODE_SIZE = 7;\n\n\n    static convertAndPad(num: number, len: number = 32) {\n        if (num < 0) {\n            num += 2 ** len;\n        }\n\n        let str = num.toString(2);\n        while (str.length < len) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    static toBitString(instr: Value) {\n        return this.convertAndPad(instr.asUnsignedInt());\n    }\n\n    static getOpCodeStr(inst: Value) {\n        return this.toBitString(inst).substr(this.INSTR_SIZE - this.OP_CODE_SIZE);\n    }\n\n    static getRd(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(20, 5), 2);\n    }\n\n    static getRs1(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(12, 5), 2);\n    }\n\n    static getRs2(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(7, 5), 2);\n    }\n\n    static getImmIType(instr: Value): number {\n        return parseInt(instr.asBinaryString().substr(0, 12), 2);\n    }\n\n    static getImmBType(instr: Value): number {\n        let str = instr.asBinaryString();\n        let imm12 = str.substr(0, 1);\n        let imm10 = str.substr(1, 6);\n        let imm4 = str.substr(20, 4);\n        let imm11 = str.substr(24, 1);\n\n        return parseInt(imm12 + imm11 + imm10 + imm4 + \"0\", 2);\n    }\n\n    static getImmSType(instr: Value): number {\n        let str = instr.asBinaryString();\n        let imm11 = str.substr(0, 7);\n        let imm4 = str.substr(20, 5);\n\n        return parseInt(imm11 + imm4, 2);\n    }\n\n    static getFuncLType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n    static getFuncSType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n    static getFuncBType(instr: Value): string {\n        return instr.asBinaryString().substr(17, 3);\n    }\n\n\n}\n","import Value from \"../util/Value\";\nimport InstructionConstants from \"./InstructionConstants\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport class InstructionDecoder {\n    static decode(instr: Value): string {\n        let opCode = InstructionHelper.getOpCodeStr(instr);\n\n        switch (opCode) {\n            case InstructionConstants.OP_CODE_ALU:\n                return this.decodeALU(instr);\n\n            case InstructionConstants.OP_CODE_ALUI:\n                return this.decodeALUI(instr);\n\n            case InstructionConstants.OP_CODE_LW:\n                return this.decodeLW(instr);\n\n            case InstructionConstants.OP_CODE_SW:\n                return this.decodeSW(instr);\n\n            case InstructionConstants.OP_CODE_BRANCH:\n                return this.decodeBRANCH(instr);\n\n            case InstructionConstants.OP_CODE_JAL:\n                return this.decodeJAL(instr);\n\n            case InstructionConstants.OP_CODE_JALR:\n                return this.decodeJALR(instr);\n\n            default:\n                // console.error(\"Unsupported OP Code: \" + opCode);\n                return instr.asHexString();\n        }\n    }\n\n    static decodeALU(instr: Value): string {\n        let func = instr.asBinaryString().substr(0, 7) + instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_ADD: {\n                name = \"ADD\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SUB: {\n                name = \"SUB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLL: {\n                name = \"SLL\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLT: {\n                name = \"SLT\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTIU: {\n                name = \"SLTU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_XOR: {\n                name = \"XOR\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRL: {\n                name = \"SRL\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRA: {\n                name = \"SRA\";\n                break;\n            }\n            case InstructionConstants.FUNCT_OR: {\n                name = \"OR\";\n                break;\n            }\n            case InstructionConstants.FUNCT_AND: {\n                name = \"\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", x\" +\n            InstructionHelper.getRs1(instr) + \", x\" + InstructionHelper.getRs2(instr);\n    }\n\n    static decodeALUI(instr: Value): string {\n        let func7 = instr.asBinaryString().substr(0, 7);\n        let func3 = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func3) {\n            case InstructionConstants.FUNCT_ADDI: {\n                name = \"ADDI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTI: {\n                name = \"SLTI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SLTIU: {\n                name = \"SLTIU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_XORI: {\n                name = \"XORI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_ORI: {\n                name = \"ORI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_ANDI: {\n                name = \"ANDI\";\n                break;\n            }\n        }\n\n        switch (func7 + func3) {\n            case InstructionConstants.FUNCT_SLLI: {\n                name = \"SSLI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRLI: {\n                name = \"SRLI\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SRAI: {\n                name = \"SRAI\";\n                break;\n            }\n        }\n\n        let imm = InstructionHelper.getImmIType(instr);\n        if (imm >= 1<< 11) {\n            imm -= (1 << 12);\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", x\" + InstructionHelper.getRs1(instr) + \", \" +\n            imm.toString(10);\n    }\n\n    static decodeLW(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_LB: {\n                name = \"LB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LH: {\n                name = \"LH\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LW: {\n                name = \"LW\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LBU: {\n                name = \"LBU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_LHU: {\n                name = \"LHU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRd(instr) + \", 0x\" +\n            InstructionHelper.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + InstructionHelper.getRs1(instr) + \")\";\n    }\n\n    static decodeSW(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_SB: {\n                name = \"SB\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SH: {\n                name = \"SH\";\n                break;\n            }\n            case InstructionConstants.FUNCT_SW: {\n                name = \"SW\";\n                break;\n            }\n        }\n\n        return name + \" x\" + InstructionHelper.getRs1(instr) + \", 0x\" +\n            InstructionHelper.getImmSType(instr).toString(16).toUpperCase() +\n            \"(x\" + InstructionHelper.getRs2(instr) + \")\";\n    }\n\n    static decodeBRANCH(instr: Value): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case InstructionConstants.FUNCT_BEQ: {\n                name = \"BEQ\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BNE: {\n                name = \"BNE\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BLT: {\n                name = \"BLT\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BGE: {\n                name = \"BGE\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BLTU: {\n                name = \"BLTU\";\n                break;\n            }\n            case InstructionConstants.FUNCT_BGEU: {\n                name = \"BGEU\";\n                break;\n            }\n        }\n\n        let imm = InstructionHelper.getImmBType(instr);\n        if (imm >= 1<< 12) {\n            imm -= (1 << 13);\n        }\n\n        return name + \" x\" + InstructionHelper.getRs1(instr) + \", x\" + InstructionHelper.getRs2(instr) +\n            \", \" + imm.toString(10);\n    }\n\n    static decodeJAL(instr: Value): string {\n        return \"JAL instruction\";\n    }\n\n    static decodeJALR(instr: Value): string {\n        return \"JALR instruction\";\n    }\n}","import Value from \"../util/Value\";\nimport InstructionConstants from \"./InstructionConstants\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class InstructionFactory {\n    static createRType(opCode: string, funct: string, rd: number, rs1: number, rs2: number): Value {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct3 +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createIType(opCode: string, funct: string, rd: number, rs1: number, imm: number): Value {\n        let instr =\n            InstructionHelper.convertAndPad(imm, 12) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createITypeShift(opCode: string, funct: string, rd: number, rs1: number, shamt: number) {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 +\n            InstructionHelper.convertAndPad(shamt, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) + funct3 +\n            InstructionHelper.convertAndPad(rd, 5) + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createSType(opCode: string, funct: string, rs1: number, rs2: number, imm: number): Value {\n        let immStr = InstructionHelper.convertAndPad(imm, 12);\n        let imm11 = immStr.substr(0, 7);\n        let imm4 = immStr.substr(7, 5);\n\n        let instr = imm11 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) +\n            funct + imm4 + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static createBType(opCode: string, funct: string, rs1: number, rs2: number, imm: number) {\n        if (imm % 4 != 0) {\n            console.error(\"Imm should be divisible by 4!\");\n            imm -= imm / 4;\n        }\n\n        imm /= 2;\n\n        let immStr = InstructionHelper.convertAndPad(imm, 12);\n        let imm12 = immStr.substr(0, 1);\n        let imm10 = immStr.substr(2, 6);\n        let imm4 = immStr.substr(8, 4);\n        let imm11 = immStr.substr(1, 1);\n\n        let instr = imm12 + imm10 +\n            InstructionHelper.convertAndPad(rs2, 5) +\n            InstructionHelper.convertAndPad(rs1, 5) +\n            funct + imm4 + imm11 + opCode;\n\n        return new Value(instr, 32);\n    }\n\n    static compare(v: Value, s: string) {\n        console.log(v.asBinaryString());\n        console.log(s.replace(/ /g, \"\"));\n    }\n\n    static main(args: String[] = []): void {\n        this.compare(this.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD,\n            2, 1, 1),\n            \"0000000 00001 00001 000 00010 0110011\");\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\nimport {InstructionDecoder} from \"../instructions/InstructionDecoder\";\nimport InstructionFactory from \"../instructions/InstructionFactory\";\n\nexport default class InstructionMemory extends Component {\n    public static readonly SIZE: number = 32;\n    private readonly values: Value[] = [];\n\n    private selectedInstr;\n\n    private _decoded = true;\n\n    private _addressNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number, values: Value[]) {\n        super(x, y);\n        this.values = values;\n\n        this.values[0] = InstructionFactory.createIType(InstructionConstants.OP_CODE_LW, InstructionConstants.FUNCT_LW, 1, 0, 124);\n        this.values[1] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 0, 0);\n        this.values[2] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 0, 0);\n\n        this.values[3] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 112);\n        this.values[4] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 4, 0, 0);\n        this.values[5] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 4, 0);\n        this.values[6] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[7] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[8] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 92);\n        this.values[9] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 5, 0, 1);\n        this.values[10] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 5, 0);\n        this.values[11] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[12] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[13] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 2, 1, 72);\n        this.values[14] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 6, 5 ,0);\n        this.values[15] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 5, 5 ,4);\n        this.values[16] = InstructionFactory.createRType(InstructionConstants.OP_CODE_ALU, InstructionConstants.FUNCT_ADD, 4, 6 ,0);\n        this.values[17] = InstructionFactory.createSType(InstructionConstants.OP_CODE_SW, InstructionConstants.FUNCT_SW, 3, 5, 0);\n        this.values[18] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 2, 2, 1);\n        this.values[19] = InstructionFactory.createIType(InstructionConstants.OP_CODE_ALUI, InstructionConstants.FUNCT_ADDI, 3, 3, 4);\n        this.values[20] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 0, 0, -28);\n\n        this.values[31] = InstructionFactory.createBType(InstructionConstants.OP_CODE_BRANCH, InstructionConstants.FUNCT_BGE, 0, 0, 0);\n    }\n\n    refresh(): void {\n        this.selectedInstr = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 230, InstructionMemory.SIZE * 20 + 30,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < InstructionMemory.SIZE; i++) {\n            g.fillRect(this.x + 15, this.y + 15 + i * 20, 200, 20,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n\n            let text = this._decoded ? InstructionDecoder.decode(this.values[i]) : this.values[i].asHexString();\n            let color = this.selectedInstr == i ? Config.readFontColor : Config.fontColor;\n            g.drawText(this.x + 15 + 10, this.y + 15 + 17 + i * 20, text, color, 18);\n        }\n\n        if (this.selectedInstr != undefined) {\n            let instrY = this.y + 15 + this.selectedInstr * 20 + 11;\n            g.drawPath([[this.x + 215, instrY], [this.x + 222.5, instrY],\n                    [this.x + 222.5, this._outputDataNode.y], [this._outputDataNode.x, this._outputDataNode.y]],\n                Config.signalColor);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        this.selectedInstr = value.asUnsignedInt() / 4;\n        this._outputDataNode.forwardSignal(this, this.values[this.selectedInstr]);\n    }\n\n    mark(caller: Component): void {\n        this._addressNode.mark(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\n\nexport enum MultiplexerOrientation {\n    LEFT,\n    RIGHT\n}\n\nexport default class Multiplexer extends Component {\n    private readonly ninputs: number;\n    private readonly orientation: MultiplexerOrientation;\n    private readonly inputDistance: number;\n\n    private readonly _inputNodes: CircuitNode[];\n    private _selInputNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private selValue: number = undefined;\n    private inputValues: Value[] = [];\n\n    private marked = false;\n\n    constructor(x: number, y: number, ninputs: number,\n                orientation: MultiplexerOrientation = MultiplexerOrientation.RIGHT, inputDistance: number = 15) {\n        super(x, y);\n        this.ninputs = ninputs;\n        this.orientation = orientation;\n        this.inputDistance = inputDistance;\n        this._inputNodes = [];\n    }\n\n    draw(g: Graphics): void {\n        let height = 50 + (this.ninputs - 1) * this.inputDistance;\n\n        if (this.orientation == MultiplexerOrientation.RIGHT) {\n            g.fillPolygon(Graphics.addOffset([[0, 0], [25, 15], [25, height - 15], [0, height]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        } else {\n            g.fillPolygon(Graphics.addOffset([[0, 15], [25, 0], [25, height], [0, height - 15]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        }\n\n        if (this.marked) {\n            let y = this._inputNodes[this.selValue].y;\n            let xCenter = this.x + 12.5;\n            let yCenter = this.y + height / 2;\n            if (this.orientation == MultiplexerOrientation.RIGHT) {\n                g.drawPath([[this.x, y], [xCenter, y], [xCenter, yCenter], [this.x + 25, yCenter]],\n                    Config.signalColor);\n            } else {\n                g.drawPath([[this.x + 25, y], [xCenter, y], [xCenter, yCenter], [this.x, yCenter]],\n                    Config.signalColor);\n            }\n        }\n\n        // if (this.orientation == MultiplexerOrientation.RIGHT) {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x + 25, this.y + height / 2, 2, \"red\");\n        // } else {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x + 25, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x, this.y + height / 2, 2, \"red\");\n        // }\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        if (signaler == this._selInputNode) {\n            this.selValue = value.asUnsignedInt();\n        } else {\n            for (let i in this._inputNodes) {\n                if (signaler == this._inputNodes[i]) {\n                    this.inputValues[i] = value;\n                    break;\n                }\n            }\n        }\n\n        if (this.selValue != undefined && this.inputValues[this.selValue]) {\n            this._outNode.forwardSignal(this, this.inputValues[this.selValue]);\n        }\n    }\n\n    refresh(): void {\n        this.selValue = undefined;\n        this.inputValues = [];\n        this.marked = false;\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n\n        this._selInputNode.mark(this);\n        if (this._inputNodes[this.selValue]) {\n            this._inputNodes[this.selValue].mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    setInputNode(idx: number, node: CircuitNode) {\n        this._inputNodes[idx] = node;\n        node.addNeighbour(this);\n    }\n\n    set selInputNode(node: CircuitNode) {\n        this._selInputNode = node;\n        node.addNeighbour(this);\n    }\n\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class ALUControl extends Component {\n    public static readonly FUNC = Value.fromUnsignedInt(0, 2);\n    public static readonly OP = Value.fromUnsignedInt(1, 2);\n    public static readonly ADD = Value.fromUnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private ctrlValue: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"ALU\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 10, this.y + 43, \"Control\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n\n        switch (this.ctrlValue) {\n            case ALUControl.FUNC: {\n                result = this.handleFunc();\n                break;\n            }\n            case ALUControl.OP: {\n                result = this.handleOp();\n                break;\n            }\n            case ALUControl.ADD: {\n                result = ArithmeticLogicUnit.ADD;\n                break;\n            }\n            default: {\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        if (result == undefined) {\n            console.log(\"Unsupported operation\")\n        } else {\n            this._outNode.forwardSignal(this, result);\n        }\n\n    }\n\n    private handleFunc(): Value {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n        let func = func7 + func3;\n\n        switch (func) {\n            case InstructionConstants.FUNCT_ADD:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionConstants.FUNCT_SUB:\n                return ArithmeticLogicUnit.SUB;\n\n            case InstructionConstants.FUNCT_SLL:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionConstants.FUNCT_SLT:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionConstants.FUNCT_SLTU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionConstants.FUNCT_XOR:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_SRL:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_SRA:\n                return ArithmeticLogicUnit.SRA;\n\n            case InstructionConstants.FUNCT_OR:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionConstants.FUNCT_AND:\n                return ArithmeticLogicUnit.AND;\n\n            default:\n                return null;\n        }\n    }\n\n    private handleOp(): Value {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n\n        switch (func3) {\n            case InstructionConstants.FUNCT_ADDI:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionConstants.FUNCT_SLTI:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionConstants.FUNCT_SLTIU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionConstants.FUNCT_XORI:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionConstants.FUNCT_ORI:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionConstants.FUNCT_ANDI:\n                return ArithmeticLogicUnit.AND;\n        }\n\n        switch (func7 + func3) {\n            case InstructionConstants.FUNCT_SLLI:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionConstants.FUNCT_SRLI:\n                return ArithmeticLogicUnit.SRL;\n\n            case InstructionConstants.FUNCT_SRAI:\n                return ArithmeticLogicUnit.SRA;\n\n            default:\n                return undefined;\n        }\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import CircuitNode from \"./CircutNode\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport Component from \"./Component\";\nimport Value, {VAL_MAX_32b, VAL_ZERO_32b} from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class DataMemory extends Component {\n    public static readonly WRITE_NO = Value.fromUnsignedInt(0, 1);\n    public static readonly WRITE_YES = Value.fromUnsignedInt(1, 1);\n\n    private readonly size: number = 32;\n    private values: Value[] = [];\n\n    private _instrNode: CircuitNode;\n    private _writeEnNode: CircuitNode;\n    private _addressNode: CircuitNode;\n    private _inputDataNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    private instrValue: Value;\n    private writeEnValue: Value;\n    private addressValue: Value;\n\n    private nextValue: Value[] = [];\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size + 1; i++) {\n            // this.values.push(VAL_ZERO_32b);\n            this.values.push(VAL_MAX_32b);\n        }\n\n        this.values[31] = Value.fromUnsignedInt(25, 32);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.writeEnValue = undefined;\n        this.addressValue = undefined;\n\n        for (let i in this.nextValue) {\n            this.values[i] = this.nextValue[i];\n        }\n\n        this.nextValue = [];\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._writeEnNode: {\n                this.writeEnValue = value;\n                break;\n            }\n            case this._addressNode: {\n                this.addressValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.writeEnValue == undefined || this.addressValue == undefined) {\n            return;\n        }\n\n        if (InstructionHelper.getOpCodeStr(this.instrValue) != InstructionConstants.OP_CODE_LW) {\n            return;\n        }\n\n        let funct = InstructionHelper.getFuncLType(this.instrValue);\n        let nbytes: number;\n\n        switch (funct) {\n            case InstructionConstants.FUNCT_LB:\n            case InstructionConstants.FUNCT_LBU: {\n                nbytes = 1;\n                break;\n            }\n            case InstructionConstants.FUNCT_LH:\n            case InstructionConstants.FUNCT_LHU: {\n                nbytes = 2;\n                break;\n            }\n            case InstructionConstants.FUNCT_LW: {\n                nbytes = 4;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        let address = this.addressValue.asUnsignedInt();\n        let wordIdx = Math.floor(address / 4);\n        let byteIdx = address % 4;\n\n        let result = \"\";\n\n        for (let i = 0; i < nbytes; i++) {\n            result = this.values[wordIdx].getByteBinary(byteIdx) + result;\n            if (++byteIdx == 4) {\n                byteIdx = 0;\n                wordIdx++;\n            }\n        }\n\n        /* Sign extend */\n        if (funct == InstructionConstants.FUNCT_LBU || funct == InstructionConstants.FUNCT_LHU || true) {\n            let signBit = result[0];\n            while (result.length < 32) {\n                result = signBit + result;\n            }\n        }\n\n        this._outputDataNode.forwardSignal(this, new Value(result, 32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._writeEnNode.mark(this);\n        this._addressNode.mark(this);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnNode.value == DataMemory.WRITE_YES) {\n            if (this._addressNode.value == null || this._inputDataNode.value == null) {\n                console.log(\"Error\");\n            }\n\n            let funct = InstructionHelper.getFuncSType(this.instrValue);\n            let nbytes;\n\n            switch (funct) {\n                case InstructionConstants.FUNCT_SB: {\n                    nbytes = 1;\n                    break;\n                }\n                case InstructionConstants.FUNCT_SH: {\n                    nbytes = 2;\n                    break;\n                }\n                case InstructionConstants.FUNCT_SW: {\n                    nbytes = 4;\n                    break;\n                }\n                default: {\n                    console.log(\"Error\");\n                }\n            }\n\n            let address = this._addressNode.value.asUnsignedInt();\n            let wordIdx = Math.floor(address / 4);\n            let byteIdx = address % 4;\n            let writeValue = this._inputDataNode.value;\n\n            this.nextValue[wordIdx] = this.values[wordIdx];\n            this.nextValue[wordIdx + 1] = this.values[wordIdx + 1];\n\n            for (let i = 0; i < nbytes; i++) {\n                this.nextValue[wordIdx] = this.nextValue[wordIdx].writeByte(byteIdx, writeValue.getByteBinary(i));\n                if (++byteIdx == 4) {\n                    byteIdx = 0;\n                    wordIdx++;\n                }\n            }\n\n            this._writeEnNode.mark(this);\n            this._addressNode.mark(this);\n            this._inputDataNode.mark(this);\n        }\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set writeEnNode(node: CircuitNode) {\n        this._writeEnNode = node;\n        node.addNeighbour(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set inputDataNode(node: CircuitNode) {\n        this._inputDataNode = node;\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value, {VAL_ZERO_32b} from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\nexport default class RegisterFile extends Component {\n    public static readonly WRITE_NO = Value.fromUnsignedInt(0, 1);\n    public static readonly WRITE_YES = Value.fromUnsignedInt(1, 1);\n\n    private readonly maxSize: number = 32;\n    private readonly size: number = 16;\n    private values: Value[] = [];\n\n    private selectedReadReg1: number;\n    private readReg1Marked: boolean;\n    private selectedReadReg2: number;\n    private readReg2Marked: boolean;\n    private selectedWriteReg: number;\n\n    private nextValue: Value;\n    private nextSel: number;\n\n    private _readSel1Node: CircuitNode;\n    private _readSel2Node: CircuitNode;\n    private _inputWriteSelNode: CircuitNode;\n\n    private _inputWriteEnNode: CircuitNode;\n    private _inputWriteDataNode: CircuitNode;\n\n    private _readData1Node: CircuitNode;\n    private _readData2Node: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.maxSize; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    refresh(): void {\n        if (this.nextSel && this.nextValue) {\n            this.values[this.nextSel] = this.nextValue;\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n\n        this.selectedReadReg1 = undefined;\n        this.readReg1Marked = false;\n        this.selectedReadReg2 = undefined;\n        this.readReg2Marked = false;\n        this.selectedWriteReg = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 150, this.size * 20 + 30,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 15, this.y + 15 + i * 20, 120, 20,\n                Config.memoryFillColor, Config.memoryStrokeColor, 1);\n            g.drawText(this.x + 15 + 5, this.y + 15 + 17 + i * 20, this.values[i].asHexString(),\n                Config.fontColor, 18);\n        }\n\n        if (this.selectedWriteReg != undefined) {\n            let regY = this.y + 15 + this.selectedWriteReg * 20 + 10;\n            g.drawPath([[this.x, this._inputWriteDataNode.y], [this.x + 7.5, this._inputWriteDataNode.y],\n                [this.x + 7.5, regY], [this.x + 15, regY]], Config.signalColor);\n        }\n\n        if (this.selectedReadReg1 != undefined && this.readReg1Marked) {\n            let regY = this.y + 15 + this.selectedReadReg1 * 20 + 10;\n            g.drawPath([[this.x + 135, regY], [this.x + 140, regY],\n                [this.x + 140, this._readSel1Node.y], [this.x+150, this._readSel1Node.y]], Config.signalColor);\n        }\n\n        if (this.selectedReadReg2 != undefined && this.readReg2Marked) {\n            let regY = this.y + 15 + this.selectedReadReg2 * 20 + 10;\n            g.drawPath([[this.x + 135, regY], [this.x + 145, regY],\n                [this.x + 145, this._readSel2Node.y], [this.x+150, this._readSel2Node.y]], Config.signalColor);\n        }\n\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        if (signaler == this._readSel1Node) {\n            this.selectedReadReg1 = InstructionHelper.getRs1(value);\n            this._readData1Node.forwardSignal(this, this.values[this.selectedReadReg1]);\n        } else if (signaler == this._readSel2Node) {\n            this.selectedReadReg2 = InstructionHelper.getRs2(value);\n            this._readData2Node.forwardSignal(this, this.values[this.selectedReadReg2]);\n        } else {\n            console.error(\"Error\");\n        }\n    }\n\n    onRisingEdge(): void {\n        if (this._inputWriteEnNode.value == RegisterFile.WRITE_YES) {\n            this.nextSel = InstructionHelper.getRd(this._inputWriteSelNode.value);\n            this.selectedWriteReg = this.nextSel;\n\n            if (this._inputWriteDataNode.value == null) {\n                console.log(\"Error\");\n                return;\n            }\n\n            this.nextValue = this._inputWriteDataNode.value;\n            this._inputWriteEnNode.mark(this);\n            this._inputWriteSelNode.mark(this);\n            this._inputWriteDataNode.mark(this);\n        }\n    }\n\n\n    mark(caller: Component): void {\n        switch (caller) {\n            case this._readData1Node: {\n                this.readReg1Marked = true;\n                this._readSel1Node.mark(this);\n                break;\n            }\n            case this._readData2Node: {\n                this.readReg2Marked = true;\n                this._readSel2Node.mark(this);\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n    }\n\n    set readSel1Node(node: CircuitNode) {\n        this._readSel1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set readSel2Node(node: CircuitNode) {\n        this._readSel2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set inputWriteSelNode(node: CircuitNode) {\n        this._inputWriteSelNode = node;\n    }\n\n    set inputWriteEnNode(node: CircuitNode) {\n        this._inputWriteEnNode = node;\n    }\n\n    set inputWriteDataNode(node: CircuitNode) {\n        this._inputWriteDataNode = node;\n    }\n\n    set readData1Node(node: CircuitNode) {\n        this._readData1Node = node;\n    }\n\n    set readData2Node(node: CircuitNode) {\n        this._readData2Node = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\nexport default class ImmSelect extends Component {\n    public static readonly ITYPE = Value.fromUnsignedInt(0, 2);\n    public static readonly BRTYPE = Value.fromUnsignedInt(1, 2);\n    public static readonly BSTYPE = Value.fromUnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private ctrlValue: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"Imm\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 15, this.y + 43, \"Select\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Value;\n\n        switch (this.ctrlValue) {\n            case ImmSelect.ITYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmIType(this.instrValue), 12);\n                break;\n            }\n            case ImmSelect.BRTYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmBType(this.instrValue), 13);\n                break;\n            }\n            case ImmSelect.BSTYPE: {\n                result = Value.fromUnsignedInt(InstructionHelper.getImmSType(this.instrValue), 12);\n                break;\n            }\n            default: {\n                result = new Value(\"0\", 12);\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        this._outNode.forwardSignal(this, result.signExtend(32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value from \"../util/Value\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class BranchLogic extends Component {\n    public static readonly BRANCH_TRUE = new Value(\"0\", 1);\n    public static readonly BRANCH_FALSE = new Value(\"1\", 1);\n\n    private _data1Node: CircuitNode;\n    private _data2Node: CircuitNode;\n    private _instrNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Value;\n    private data1Value: Value;\n    private data2Value: Value;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawTextCentered(this.x, this.y + 23, 100, \"Branch\", Config.fontColor, Config.fontSize);\n        g.drawTextCentered(this.x, this.y + 43, 100, \"Logic\", Config.fontColor, Config.fontSize);\n    }\n\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._data1Node:\n                this.data1Value = value;\n                break;\n            case this._data2Node:\n                this.data2Value = value;\n                break;\n            case this._instrNode:\n                this.instrValue = value;\n                break;\n        }\n\n        if (this.data1Value == undefined || this.data2Value == undefined || this.instrValue == undefined) {\n            return;\n        }\n\n        let func = InstructionHelper.getFuncBType(this.instrValue);\n        let result: boolean;\n\n        switch (func) {\n            case InstructionConstants.FUNCT_BEQ: {\n                result = Value.cmpEQ(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BNE: {\n                result = Value.cmpNE(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BLT: {\n                result = Value.cmpLT(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BGE: {\n                result = Value.cmpGE(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BLTU: {\n                result = Value.cmpLTU(this.data1Value, this.data2Value);\n                break;\n            }\n            case InstructionConstants.FUNCT_BGEU: {\n                result = Value.cmpGEU(this.data1Value, this.data2Value);\n                break;\n            }\n        }\n\n        this._outNode.forwardSignal(this, result ? BranchLogic.BRANCH_TRUE : BranchLogic.BRANCH_FALSE);\n    }\n\n\n    mark(caller: Component): void {\n        this._data1Node.mark(this);\n        this._data2Node.mark(this);\n        this._instrNode.mark(this);\n    }\n\n    set data1Node(node: CircuitNode) {\n        this._data1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set data2Node(node: CircuitNode) {\n        this._data2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport Config from \"../util/Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Value, {VAL_ONE_32b, VAL_THREE_32b, VAL_TWO_32b, VAL_ZERO_32b} from \"../util/Value\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport RegisterFile from \"./RegisterFile\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\nimport ImmSelect from \"./ImmSelect\";\nimport BranchLogic from \"./BranchLogic\";\nimport InstructionConstants from \"../instructions/InstructionConstants\";\n\nexport default class ControlUnit extends Component {\n    private _instrNode: CircuitNode;\n    private _branchNode: CircuitNode;\n\n    private _PCSelNode: CircuitNode;\n    private _RegWriteEn: CircuitNode;\n    private _MemWrite: CircuitNode;\n    private _WBSel: CircuitNode;\n    private _ImmSel: CircuitNode;\n    private _FuncSel: CircuitNode;\n    private _Op2Sel: CircuitNode;\n\n    private instrValue: Value = VAL_ZERO_32b;\n    private branchValue: Value;\n    private markBranch: boolean;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillRect(this.x - 5, this.y - 5, 10, 10, Config.signalColor, Config.signalColor);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.branchValue = undefined;\n        this.markBranch = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Value): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._branchNode: {\n                this.branchValue = value;\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.branchValue == undefined) {\n            return;\n        }\n\n        let opcode = InstructionHelper.getOpCodeStr(this.instrValue);\n        let ImmSel, Op2Sel, FuncSel, MemWr, RFWen, WBSel, WASel, PCSel: Value;\n\n        switch (opcode) {\n            case InstructionConstants.OP_CODE_ALU : {\n                ImmSel = undefined;\n                Op2Sel = VAL_ZERO_32b;\n                FuncSel = ALUControl.FUNC;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_ALUI : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.OP;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_LW : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ONE_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_SW : {\n                ImmSel = ImmSelect.BSTYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_YES;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = VAL_THREE_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_BRANCH : {\n                ImmSel = ImmSelect.BRTYPE;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = this.branchValue == BranchLogic.BRANCH_TRUE ? VAL_ZERO_32b : VAL_THREE_32b;\n                this.markBranch = true;\n                break;\n            }\n            case InstructionConstants.OP_CODE_JAL : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ZERO_32b;\n                PCSel = VAL_TWO_32b;\n                break;\n            }\n            case InstructionConstants.OP_CODE_JALR : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_ONE_32b;\n                break;\n            }\n\n            default: {\n                console.error(\"Unknown OP Code: \" + opcode);\n                PCSel = VAL_THREE_32b;\n            }\n        }\n\n        if (ImmSel) this._ImmSel.forwardSignal(this, ImmSel);\n        if (Op2Sel) this._Op2Sel.forwardSignal(this, Op2Sel);\n        if (FuncSel) this._FuncSel.forwardSignal(this, FuncSel);\n        if (MemWr) this._MemWrite.forwardSignal(this, MemWr);\n        if (RFWen) this._RegWriteEn.forwardSignal(this, RFWen);\n        if (WBSel) this._WBSel.forwardSignal(this, WBSel);\n        if (PCSel) this._PCSelNode.forwardSignal(this, PCSel);\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n\n        if (this.markBranch) {\n            this._branchNode.mark(this);\n        }\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set branchNode(node: CircuitNode) {\n        this._branchNode = node;\n        node.addNeighbour(this);\n    }\n\n    set PCSelNode(node: CircuitNode) {\n        this._PCSelNode = node;\n    }\n\n    set RegWriteEn(node: CircuitNode) {\n        this._RegWriteEn = node;\n    }\n\n    set MemWrite(node: CircuitNode) {\n        this._MemWrite = node;\n    }\n\n    set WBSel(node: CircuitNode) {\n        this._WBSel = node;\n    }\n\n    set ImmSel(node: CircuitNode) {\n        this._ImmSel = node;\n    }\n\n    set FuncSel(node: CircuitNode) {\n        this._FuncSel = node;\n    }\n\n    set Op2Sel(node: CircuitNode) {\n        this._Op2Sel = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"../util/Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"../util/Config\";\nimport Value from \"../util/Value\";\n\nexport default class ConstValue extends Component {\n    readonly value: Value;\n    private _outNode: CircuitNode;\n\n    constructor(x: number, y: number, value: Value) {\n        super(x, y);\n        this.value = value;\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [0, 25], [25, 25], [25, 0]], this.x, this.y),\n            Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 5, this.y + 20, this.value.asShortHexString(), Config.fontColor, Config.fontSize);\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    mark(caller: Component): void {\n        // TODO: change color\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Graphics from \"./util/Graphics\";\nimport ArithmeticLogicUnit from \"./components/ArithmeticLogicUnit\";\nimport Register from \"./components/Register\";\nimport CircuitNode from \"./components/CircutNode\";\nimport Config from \"./util/Config\";\nimport Component from \"./components/Component\";\nimport InstructionMemory from \"./components/InstructionMemory\";\nimport Multiplexer, {MultiplexerOrientation} from \"./components/Multiplexer\";\nimport ControlUnit from \"./components/ControlUnit\";\nimport ConstValue from \"./components/ConstValue\";\nimport RegisterFile from \"./components/RegisterFile\";\nimport ImmSelect from \"./components/ImmSelect\";\nimport ALUControl from \"./components/ALUControl\";\nimport DataMemory from \"./components/DataMemory\";\nimport Value from \"./util/Value\";\nimport BranchLogic from \"./components/BranchLogic\";\n\nexport default class Simulator {\n    protected elements: Component[] = [];\n    private readonly g: Graphics;\n    private initialInstruct: Value[];\n\n    constructor(canvas: HTMLCanvasElement, parsed: Value[]) {\n        this.g = new Graphics(canvas, 1200, 800);\n        this.load(parsed);\n    }\n\n    create() {\n        let controlUnit = new ControlUnit(0, 0);\n\n        let PCRegister = new Register(50, 50);\n        let instrMemory = new InstructionMemory(10, 100, this.initialInstruct);\n        let PCStepVal = new ConstValue(315, 135, Value.fromUnsignedInt(4));\n        let PCAdder = new ArithmeticLogicUnit(370, 135, ArithmeticLogicUnit.ADD);\n        let PCSelMux = new Multiplexer(375, 25, 4, MultiplexerOrientation.LEFT);\n\n        this.elements.push(PCRegister, instrMemory, PCStepVal, PCSelMux, PCAdder, controlUnit);\n\n        let registerFile = new RegisterFile(315, 260);\n        let immSelect = new ImmSelect(515, 550);\n        let ALUCtrl = new ALUControl(630, 630);\n\n        this.elements.push(registerFile, immSelect, ALUCtrl);\n\n        let op2SelMux = new Multiplexer(740, 500, 2);\n        let ALU = new ArithmeticLogicUnit(785, 400);\n\n        this.elements.push(op2SelMux, ALU);\n\n        let dataMemory = new DataMemory(875, 200);\n        let WBSelMux = new Multiplexer(1025, 600, 3);\n\n        this.elements.push(dataMemory, WBSelMux);\n\n        let branchAdder = new ArithmeticLogicUnit(690, 210, ArithmeticLogicUnit.ADD);\n        let branchLogic = new BranchLogic(560, 275);\n\n        this.elements.push(branchAdder, branchLogic);\n\n        /* PC enable write */\n        let node = new CircuitNode(70, 50, Value.fromUnsignedInt(1));\n        PCRegister.writeEnable = node;\n        this.elements.push(node); // Not required\n\n        let path: CircuitNode[];\n\n        /* PCSelMux ->  PC */\n        path = this.createPath([[375, 72.5], [340, 72.5], [340, 40], [30, 40], [30, 62.5], [50, 62.5]]);\n        PCSelMux.outNode = path[0];\n        PCRegister.inputNode = path[path.length - 1];\n\n        /* PC Step -> PC Adder */\n        path = this.createPath([[340, 147.5], [370, 147.5]]);\n        PCStepVal.outNode = path[0];\n        PCAdder.input1Node = path[path.length - 1];\n\n        /* PC Register -> PC Adder */\n        path = this.createPath([[200, 62.5], [220, 62.5], [265, 62.5], [290, 62.5], [290, 197.5], [370, 197.5]]);\n        PCRegister.outNode = path[0];\n        PCAdder.input2Node = path[path.length - 1];\n\n        let PCRegisterNode1 = path[1];\n        let PCRegisterNode2 = path[2];\n\n        /* PC Adder -> PCSelMux */\n        path = this.createPath([[410, 172.5], [420, 172.5], [420, 95], [400, 95]]);\n        PCAdder.resultNode = path[0];\n        PCSelMux.setInputNode(3, path[path.length - 1]);\n\n        /* PC Register -> Instruction memory */\n        path = this.createPath([[220, 85], [125, 85], [125, 100]]);\n        PCRegisterNode1.addNeighbour(path[0]);\n        instrMemory.addressNode = path[path.length - 1];\n\n        /* Instruction memory -> instrNode */\n        path = this.createPath([[240, 425], [265, 425]]);\n        instrMemory.outputDataNode = path[0];\n        let instrNode = path[path.length - 1];\n\n        /* Instr node for Control unit */\n        controlUnit.instrNode = instrNode;\n\n        /* instrNode -> Register file */\n        path = this.createPath([[265, 550], [315, 550]]);\n        registerFile.inputWriteSelNode = path[path.length - 1];\n        instrNode.addNeighbour(path[0]);\n        let instrNodeBottom = path[0];\n\n        /* instrNode -> ImmSelect */\n        path = this.createPath([[265, 620], [490, 620], [490, 575], [515, 575]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        immSelect.instrNode = path[path.length - 1];\n\n        /* instrNode -> ALU Control */\n        path = this.createPath([[265, 655], [630, 655]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        ALUCtrl.instrNode = path[path.length - 1];\n\n        /* instrNode -> DataMemory */\n        path = this.createPath([[265, 690], [875, 690]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        dataMemory.instrNode = path[path.length - 1];\n\n        /* instrNode -> ReadSel2 */\n        path = this.createPath([[265, 390], [315, 390]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeTop = path[0];\n        registerFile.readSel2Node = path[path.length - 1];\n\n        /* instrNode -> ReadSel1 */\n        path = this.createPath([[265, 370], [315, 370]]);\n        instrNodeTop.addNeighbour(path[0]);\n        instrNodeTop = path[0];\n        registerFile.readSel1Node = path[path.length - 1];\n\n        /* ImmSelect -> op2SelMux */\n        path = this.createPath([[615, 575], [680, 575], [680, 550], [740, 550]]);\n        immSelect.outNode = path[0];\n        op2SelMux.setInputNode(1, path[path.length - 1]);\n\n        let immSelectNode = path[2];\n\n        /* RF ReadData2 -> op2SelMux */\n        path = this.createPath([[465, 390], [560, 390], [560, 525], [635, 525], [720, 525], [740, 525]]);\n        registerFile.readData2Node = path[0];\n        op2SelMux.setInputNode(0, path[path.length - 1]);\n        let readData2Node = path[path.length - 2];\n        let readData2BranchNode = path[3];\n\n        /* RF ReadData1 -> ALU */\n        path = this.createPath([[465, 370], [585, 370], [775, 370], [775, 415], [785, 415]]);\n        registerFile.readData1Node = path[0];\n        ALU.input1Node = path[path.length - 1];\n\n        let readData1BranchNode = path[1];\n\n        /* op2SelMux -> ALU */\n        path = this.createPath([[765, 532.5], [775, 532.5], [775, 460], [785, 460]]);\n        op2SelMux.outNode = path[0];\n        ALU.input2Node = path[path.length - 1];\n\n        /* ALU Control -> ALU */\n        path = this.createPath([[730, 655], [805, 655], [805, 467.5]]);\n        ALUCtrl.outNode = path[0];\n        ALU.selOpNode = path[path.length - 1];\n\n        /* ALU -> WBSel Mux */\n        path = this.createPath([[825, 437.5], [850, 437.5], [850, 710], [1000, 710], [1000, 655], [1025, 655]]);\n        ALU.resultNode = path[0];\n        WBSelMux.setInputNode(2, path[path.length - 1]);\n        let ALUoutNode = path[1];\n\n        /* ALU -> DataMemory */\n        path = this.createPath([[850, 300], [875, 300]]);\n        ALUoutNode.addNeighbour(path[0]);\n        dataMemory.addressNode = path[path.length - 1];\n\n        /* DataMemory - > WBSel Mux */\n        path = this.createPath([[975, 640], [1025, 640]]);\n        dataMemory.outputDataNode = path[0];\n        WBSelMux.setInputNode(1, path[path.length - 1]);\n\n        /* WBSel Mux -> RF WriteData */\n        path = this.createPath([[1050, 640], [1070, 640], [1070, 730], [290, 730], [290, 590], [315, 590]]);\n        WBSelMux.outNode = path[0];\n        registerFile.inputWriteDataNode = path[path.length - 1];\n\n        /* RF ReadData2 -> DataMemory */\n        path = this.createPath([[720, 610], [875, 610]]);\n        readData2Node.addNeighbour(path[0]);\n        dataMemory.inputDataNode = path[path.length - 1];\n\n        /* PC -> branchAdder */\n        path = this.createPath([[265, 222.5], [690, 222.5]]);\n        PCRegisterNode2.addNeighbour(path[0]);\n        branchAdder.input1Node = path[path.length - 1];\n\n        /* ImmSelect -> branchAdder */\n        path = this.createPath([[680, 272.5], [690, 272.5]]);\n        immSelectNode.addNeighbour(path[0]);\n        branchAdder.input2Node = path[path.length - 1];\n\n        /* branchAdder -> PCSel */\n        path = this.createPath([[730, 247.5], [740, 247.5], [740, 50], [400, 50]]);\n        branchAdder.resultNode = path[0];\n        PCSelMux.setInputNode(0, path[path.length - 1]);\n\n        /* readData1 -> Branch Logic */\n        node = new CircuitNode(585, 325);\n        readData1BranchNode.addNeighbour(node);\n        branchLogic.data1Node = node;\n        this.elements.push(node);\n\n        /* readData2 -> Branch Logic */\n        node = new CircuitNode(635, 325);\n        readData2BranchNode.addNeighbour(node);\n        branchLogic.data2Node = node;\n        this.elements.push(node);\n\n        /* instrNode -> Branch Select */\n        branchLogic.instrNode = instrNodeTop;\n\n        /* Branch Logic -> Control Unit */\n        node = new CircuitNode(660, 300);\n        branchLogic.outNode = node;\n        controlUnit.branchNode = node;\n        this.elements.push(node);\n\n        /*\n         *Control signals\n         */\n\n        /* PCSel */\n        path = this.createPath([[387.5, 10], [387.5, 32.5]]);\n        controlUnit.PCSelNode = path[0];\n        PCSelMux.selInputNode = path[path.length - 1];\n\n        /* RegEnWrite */\n        path = this.createPath([[450, 10], [450, 260]]);\n        controlUnit.RegWriteEn = path[0];\n        registerFile.inputWriteEnNode = path[path.length - 1];\n\n        /* MemWrite */\n        path = this.createPath([[900, 10], [900, 200]]);\n        controlUnit.MemWrite = path[0];\n        dataMemory.writeEnNode = path[path.length - 1];\n\n        /* WBSel */\n        path = this.createPath([[1037.5, 10], [1037.5, 607.5]]);\n        controlUnit.WBSel = path[0];\n        WBSelMux.selInputNode = path[path.length - 1];\n\n        /* ImmSel */\n        path = this.createPath([[565, 790], [565, 600]]);\n        controlUnit.ImmSel = path[0];\n        immSelect.controlNode = path[path.length - 1];\n\n        /* FuncSel */\n        path = this.createPath([[680, 790], [680, 680]]);\n        controlUnit.FuncSel = path[0];\n        ALUCtrl.controlNode = path[path.length - 1];\n\n        /* Op2Sel */\n        path = this.createPath([[752.5, 790], [752.5, 557.5]]);\n        controlUnit.Op2Sel = path[0];\n        op2SelMux.selInputNode = path[path.length - 1];\n    }\n\n    private createPath(path: number[][]): CircuitNode[] {\n        let pathNodes: CircuitNode[] = [];\n\n        pathNodes.push(new CircuitNode(path[0][0], path[0][1]));\n        let last = pathNodes[0];\n\n        for (let i = 1; i < path.length; i++) {\n            let node = new CircuitNode(path[i][0], path[i][1]);\n            last.addNeighbour(node);\n            pathNodes.push(node);\n            last = node;\n        }\n\n        pathNodes.forEach(el => this.elements.push(el));\n\n        return pathNodes;\n    }\n\n    draw() {\n        this.g.rescale();\n        this.g.clear(Config.backgroundColor);\n        // this.g.fillRect(0, 0, 1200, 800, \"#00000000\", \"red\");\n\n        this.elements.forEach(el => el.draw(this.g))\n    }\n\n    step() {\n        console.log(\"Step\");\n        this.elements.forEach(el => el.refresh());\n        this.elements.forEach(el => el.onFallingEdge());\n        this.elements.forEach(el => el.onRisingEdge());\n        this.draw();\n    }\n\n    load(parsed: Value[]) {\n        this.initialInstruct = parsed;\n        this.reset();\n    }\n\n    reset() {\n        this.elements = [];\n        this.create();\n        this.step();\n    }\n}\n\n","import Value, {VAL_ZERO_32b} from \"./Value\";\nimport InstructionMemory from \"../components/InstructionMemory\";\nimport InstructionHelper from \"../instructions/InstructionHelper\";\n\n\nexport default class Parser {\n    static parse(textContent : String) : Value[] {\n\n        let ret : Value[] = [];\n        let lines = textContent.split('\\n');\n        for(let i = 0; i < lines.length; i++) {\n             ret.push(Value.HexString(lines[i]));\n        }\n\n        while(ret.length < InstructionMemory.SIZE)\n            ret.push(VAL_ZERO_32b);\n\n        return ret;\n    }\n}","export function toggleFullScreen() {\n    let documentBody = document.body;\n\n    if (!this.isFullScreen) {\n        // @ts-ignoreç\n        if (documentBody.requestFullScreen) {\n            // @ts-ignoreç\n            documentBody.requestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.webkitRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.webkitRequestFullscreen();\n            // @ts-ignoreç\n        } else if (documentBody.mozRequestFullScreen) {\n            // @ts-ignoreç\n            documentBody.mozRequestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.msRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.msRequestFullscreen();\n        }\n        this.isFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            // @ts-ignoreç\n        } else if (document.msExitFullscreen) {\n            // @ts-ignoreç\n            document.msExitFullscreen();\n            // @ts-ignoreç\n        } else if (document.mozCancelFullScreen) {\n            // @ts-ignorec\n            document.mozCancelFullScreen();\n            // @ts-ignoreç\n        } else if (document.webkitExitFullscreen) {\n            // @ts-ignoreç\n            document.webkitExitFullscreen();\n        }\n        this.isFullScreen = false;\n    }\n}","import Simulator from \"./Simulator\";\nimport Parser from \"./util/Parser\";\nimport {toggleFullScreen} from \"./util/util\";\nimport Value from \"./util/Value\";\n\nlet canvas = <HTMLCanvasElement> document.getElementById(\"sim-canvas\");\nlet menuBar = <HTMLDivElement> document.getElementById(\"menu\");\nlet btnStep = <HTMLButtonElement> document.getElementById(\"btn-step\");\nlet btnPlay = <HTMLButtonElement> document.getElementById(\"btn-play\");\nlet btnPause = <HTMLButtonElement> document.getElementById(\"btn-pause\");\nlet txtCode = <HTMLTextAreaElement> document.getElementById(\"txt-code\");\nlet btnLoad = <HTMLButtonElement> document.getElementById(\"btn-load\");\nlet btnReset = <HTMLButtonElement> document.getElementById(\"btn-reset\");\nlet sim = new Simulator(canvas, Parser.parse(\"\"));\nlet play = false;\n\nlet resize = () => {\n    canvas.style.width = document.body.clientWidth + \"px\";\n    canvas.style.height = (document.body.clientHeight - menuBar.clientHeight) + \"px\";\n    sim.draw();\n};\n\nresize();\n\nwindow.addEventListener(\"resize\", () => resize());\n\nValue.main();\n\nwindow.addEventListener(\"keydown\", evt => {\n    switch (evt.key) {\n        case \"s\":\n        case \"S\": {\n            sim.step();\n            break;\n        }\n\n        case \"r\":\n        case \"R\": {\n            sim.reset();\n            break;\n        }\n\n        case \"f\":\n        case \"F\": {\n            toggleFullScreen();\n            break;\n        }\n        case \"ArrowRight\":\n            console.log(\"->\")\n    }\n});\n\nbtnStep.addEventListener(\"click\", evt => {\n    sim.step();\n    btnPause.click()\n});\n\nbtnPlay.addEventListener(\"click\", evt => {\n    play = true;\n    btnPlay.disabled = true;\n    btnPause.disabled = false\n});\n\nbtnPause.addEventListener(\"click\", evt => {\n    play = false;\n    btnPlay.disabled = false;\n    btnPause.disabled = true\n});\n\nbtnLoad.addEventListener(\"click\", evt => {\n    let parsed = Parser.parse(txtCode.textContent);\n    if (parsed) sim.load(parsed)\n});\n\nbtnReset.addEventListener(\"click\", evt => sim.reset());\n\nsetInterval(() => {\n    if (play) {\n        sim.step();\n    }\n\n}, 100);\n"]}