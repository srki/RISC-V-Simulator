{"version":3,"sources":["Graphics.ts","Component.ts","Config.ts","Val.ts","ArithmeticLogicUnit.ts","Register.ts","CircutNode.ts","InstructionHelper.ts","InstructionMemory.ts","Multiplexer.ts","ALUControl.ts","DataMemory.ts","RegisterFile.ts","ImmSelect.ts","ControlUnit.ts","ConstValue.ts","Simulator.ts","Parser.ts","util.ts","main.ts"],"names":[],"mappings":"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","file":"main.d1cfe1a7.map","sourceRoot":"../src","sourcesContent":["export default class Graphics {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n\n    private readonly width: number;\n    private readonly height: number;\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.width = width;\n        this.height = height;\n\n        if (canvas.style.width == undefined || canvas.style.height == undefined) {\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n            console.warn(\"Canvas width or height undefined\");\n        }\n    }\n\n    rescale() {\n        let canvasWidth = this.canvas.clientWidth;\n        let canvasHeight = this.canvas.clientHeight;\n\n        /* Added support for Retina display */\n        this.canvas.width = canvasWidth * window.devicePixelRatio;\n        this.canvas.height = canvasHeight * window.devicePixelRatio;\n\n        let scale = canvasWidth / canvasHeight > this.width / this.height ?\n            canvasHeight / this.height :\n            canvasWidth / this.width;\n\n        let rescaleOffsetX = (canvasWidth - scale * this.width) / 2;\n        let rescaleOffsetY = (canvasHeight - scale * this.height) / 2;\n\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.translate(rescaleOffsetX , rescaleOffsetY);\n        this.ctx.scale(scale * window.devicePixelRatio, scale * window.devicePixelRatio);\n    }\n\n    clear(color: string) {\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.restore();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n    }\n\n    drawPath(path: number[][], strokeStyle: string) {\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(path[0][0], path[0][1]);\n        for (let i = 1; i < path.length; i++) {\n            this.ctx.lineTo(path[i][0], path[i][1]);\n        }\n\n        this.ctx.stroke();\n    }\n\n\n    fillRect(x: number, y: number, w: number, h: number, fillStyle: string, strokeStyle: string) {\n        this.fillPolygon([[x, y], [x + w, y], [x + w, y + h], [x, y + h]], fillStyle, strokeStyle);\n    }\n\n    fillPolygon(point: number[][], fillStyle: string, strokeStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.strokeStyle = strokeStyle;\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(point[0][0], point[0][1]);\n        for (let i = 1; i < point.length; i++) {\n            this.ctx.lineTo(point[i][0], point[i][1]);\n        }\n\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    fillCircle(x: number, y: number, r: number, fillStyle: string) {\n        this.ctx.fillStyle = fillStyle;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, r, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    drawText(x: number, y: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n        this.ctx.fillText(text, x, y);\n    }\n\n    drawTextCentered(x: number, y: number, width: number, text: string, fontColor: string, fontSize: number) {\n        this.ctx.font = fontSize + \"px Monospace\";\n        this.ctx.fillStyle = fontColor;\n\n        let textWidth = this.ctx.measureText(text).width;\n\n        this.ctx.fillText(text, (x + (width - textWidth) / 2), y);\n    }\n\n    static addOffset(points: number[][], xOffset: number, yOffset: number): number[][] {\n        let updated: number[][] = [];\n\n        for (let idx  in points) {\n            updated.push([xOffset + points[idx][0], yOffset + points[idx][1]]);\n        }\n\n        return updated;\n    }\n\n}","import Graphics from \"./Graphics\";\nimport Val from \"./Val\";\n\nexport default abstract class Component {\n    private static cnt = 0;\n    public readonly id: number;\n\n    public readonly x: number;\n    public readonly y: number;\n\n    protected constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n\n        this.id = Component.cnt++;\n    }\n\n    abstract draw(g: Graphics): void;\n\n    refresh(): void {\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n    }\n\n    mark(caller: Component): void {\n    }\n\n    onFallingEdge(): void {\n    }\n\n    onRisingEdge(): void {\n    }\n}","export default class Config {\n    static readonly backgroundColor: string = \"#ffffff\";\n    static readonly elementFillColor: string = \"#b1e5e0\";\n    static readonly elementStrokeColor: string = \"#000000\";\n    static readonly memoryFillColor: string = \"#fffed0\";\n    static readonly memoryStrokeColor: string = \"#000000\";\n    static readonly lineColor: string = \"#000000\";\n    static readonly signalColor: string = \"#FF0000\";\n    static readonly fontColor: string = \"#000000\";\n\n    static readonly fontSize: number = 20;\n}","export default class Val {\n    readonly val: number;\n    readonly num_bits: number;\n\n    private static mod(n: number, m: number): number {\n        return ((n % m) + m) % m;\n    }\n\n    constructor(val: number = 0, num_bits: number) {\n        this.num_bits = num_bits;\n        this.val = val;\n    }\n\n    static UnsignedInt(val: number, num_bits: number = 32): Val {\n        return new Val(Val.mod(val, 2 ** num_bits), num_bits);\n    }\n\n    asUnsignedInt(): number {\n        return this.val;\n    }\n\n    static SignedInt(val: number, num_bits: number = 32): Val {\n        const max_signed = 2 ** (num_bits - 1) - 1;\n        if (val >= 0)\n            return new Val(Val.mod(val, max_signed), num_bits);\n        if (val < 0)\n            return new Val((max_signed + 1) - Val.mod(val, max_signed), num_bits);\n    }\n\n    asSignedInt(): number {\n        const max_signed = 2 ** (this.num_bits - 1) - 1;\n        if (this.val <= max_signed)\n            return this.val;\n        return -(this.val - (max_signed + 1));\n    }\n\n    asHexString(): string {\n        let str = this.asUnsignedInt().toString(16);\n        while (str.length < this.num_bits / 4) {\n            str = \"0\" + str;\n        }\n        return \"0x\" + str.toUpperCase();\n    }\n\n    asBinaryString(): string {\n        let str = this.asUnsignedInt().toString(2);\n        while (str.length < this.num_bits) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    asShortHexString(): string {\n        return this.asUnsignedInt().toString(16).toLocaleUpperCase();\n    }\n\n    getNumBits(): number {\n        return this.num_bits;\n    }\n\n    // TODO: check if the implementations are correct\n    static add(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() + rhs.asUnsignedInt(), 32);\n    }\n\n    static sub(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() - rhs.asUnsignedInt(), 32);\n    }\n\n    static and(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() & rhs.asUnsignedInt(), 32);\n    }\n\n    static or(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() | rhs.asUnsignedInt(), 32);\n    }\n\n    static xor(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() ^ rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftLeftLogical(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() << rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightLogical(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() >>> rhs.asUnsignedInt(), 32);\n    }\n\n    static shiftRightArithmetic(lhs: Val, rhs: Val): Val {\n        return new Val(lhs.asUnsignedInt() >> rhs.asUnsignedInt(), 32);\n    }\n\n    static main() {\n        console.log(\"hello world\");\n\n        console.log(this.UnsignedInt(12345).asSignedInt());\n        console.log(this.UnsignedInt(-123).asSignedInt());\n        console.log(this.UnsignedInt(123231).asSignedInt());\n        console.log(this.UnsignedInt(123412).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32 - 1).asSignedInt());\n        console.log(this.UnsignedInt(2 ** 32 + 1).asSignedInt());\n\n        console.log(this.SignedInt(1).asSignedInt());\n        console.log(this.SignedInt(0).asSignedInt());\n        console.log(this.SignedInt(-1).asSignedInt());\n\n        console.log(this.SignedInt(-1234567).asSignedInt());\n        console.log(this.SignedInt(7654321).asSignedInt());\n        console.log(this.SignedInt(999999999999999).asHexString());\n\n\n    }\n\n    static HexString(s: string, num_bits : number = 32) {\n        return Val.UnsignedInt(parseInt(s, 16), num_bits);\n    }\n}\n\nexport const VAL_ZERO_32b = Val.UnsignedInt(0, 32);\nexport const VAL_ONE_32b = Val.UnsignedInt(1, 32);\nexport const VAL_TWO_32b = Val.UnsignedInt(2, 32);\nexport const VAL_THREE_32b = Val.UnsignedInt(3, 32);\n\nexport const VAL_ZERO_0b = Val.UnsignedInt(0, 0);\nexport const VAL_ZERO_5b = Val.UnsignedInt(0, 5);","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val, {VAL_ZERO_0b, VAL_ZERO_32b, VAL_ZERO_5b} from \"./Val\";\n\nexport default class ArithmeticLogicUnit extends Component {\n    /* @formatter:off */\n    public static readonly ADD  = new Val(0, 4); /* Addition               */\n    public static readonly SUB  = new Val(1, 4); /* Subtraction            */\n    public static readonly AND  = new Val(2, 4); /* Bitwise AND            */\n    public static readonly OR   = new Val(3, 4); /* Bitwise OR             */\n    public static readonly XOR  = new Val(4, 4); /* Bitwise XOR            */\n    public static readonly SLL  = new Val(5, 4); /* Shift Left Logical     */\n    public static readonly SRL  = new Val(6, 4); /* Shift Right Logical    */\n    public static readonly SRA  = new Val(7, 4); /* Shift Right Arithmetic */\n    public static readonly SLT  = new Val(8, 4); /* Shift Right Arithmetic */\n    public static readonly SLTU = new Val(9, 4); /* Shift Right Arithmetic */\n\n    /* @formatter:on */\n\n    private readonly defaultOp: Val;\n\n    private _resultNode: CircuitNode = null;\n    private _input1Node: CircuitNode = null;\n    private _input2Node: CircuitNode = null;\n    private _selOpNode: CircuitNode = null;\n\n    private input1Value: Val = VAL_ZERO_32b;\n    private input2Value: Val = VAL_ZERO_0b;\n    private selOpValue: Val = VAL_ZERO_5b;\n\n    constructor(x: number, y: number, defaultOp: Val = undefined) {\n        super(x, y);\n        this.defaultOp = defaultOp;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [40, 15], [40, 60], [0, 75], [0, 45], [10, 37.5], [0, 30]],\n            this.x, this.y), Config.elementFillColor, Config.elementStrokeColor);\n    }\n\n    refresh(): void {\n        this.input1Value = undefined;\n        this.input2Value = undefined;\n        this.selOpValue = this.defaultOp;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._input1Node:\n                this.input1Value = value;\n                break;\n\n            case this._input2Node:\n                this.input2Value = value;\n                break;\n\n            case this._selOpNode:\n                this.selOpValue = value;\n                break;\n        }\n\n        if (this.input1Value == undefined || this.input2Value == undefined || this.selOpValue == undefined) {\n            return;\n        }\n\n        let result: Val;\n        switch (this.selOpValue) {\n            case ArithmeticLogicUnit.ADD: {\n                result = Val.add(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SUB: {\n                result = Val.sub(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.AND: {\n                result = Val.and(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.OR: {\n                result = Val.or(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.XOR: {\n                result = Val.xor(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLL: {\n                result = Val.shiftLeftLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRL: {\n                result = Val.shiftRightLogical(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SRA: {\n                result = Val.shiftRightArithmetic(this.input1Value, this.input2Value);\n                break;\n            }\n            case ArithmeticLogicUnit.SLT: {\n                // TODO: implement\n                break;\n            }\n            case ArithmeticLogicUnit.SLTU: {\n                // TODO: implement\n                break;\n            }\n            default: {\n                console.error(\"Unknown operation\");\n                result = VAL_ZERO_32b;\n            }\n        }\n\n        this._resultNode.forwardSignal(this, result);\n    }\n\n    mark(caller: Component): void {\n        this._input1Node.mark(this);\n        this._input2Node.mark(this);\n\n        if (this.defaultOp == null) {\n            this._selOpNode.mark(this);\n        }\n    }\n\n    set resultNode(node: CircuitNode) {\n        this._resultNode = node;\n    }\n\n    set input1Node(node: CircuitNode) {\n        this._input1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set input2Node(node: CircuitNode) {\n        this._input2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set selOpNode(node: CircuitNode) {\n        this._selOpNode = node;\n        node.addNeighbour(this);\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\n\nexport enum RegisterOrientation {\n    HORIZONTAL,\n    VERTICAL\n}\n\nexport default class Register extends Component {\n    private readonly orientation: RegisterOrientation;\n\n    private _inputNode: CircuitNode = null;\n    private _outNode: CircuitNode = null;\n    private _writeEnable: CircuitNode = null;\n\n    private value: Val = VAL_ZERO_32b;\n\n    private nextValue: Val = undefined;\n\n    constructor(x: number, y: number, orientation: RegisterOrientation = RegisterOrientation.HORIZONTAL) {\n        super(x, y);\n        this.orientation = orientation;\n        this.nextValue = undefined;\n    }\n\n    draw(g: Graphics): void {\n        if (this.orientation == RegisterOrientation.HORIZONTAL) {\n            g.fillRect(this.x, this.y, 150, 25, Config.elementFillColor, Config.elementStrokeColor);\n            g.drawText(this.x + 10, this.y + 21, this.value.asHexString(), Config.fontColor, Config.fontSize);\n        } else if (this.orientation == RegisterOrientation.VERTICAL) {\n            // TODO: implement\n        }\n    }\n\n    refresh(): void {\n        if (this.nextValue) {\n            this.value = this.nextValue;\n        }\n        this.nextValue = undefined;\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    onRisingEdge(): void {\n        if (this._writeEnable && this._writeEnable.value.asUnsignedInt() != 0) {\n            this.nextValue = this._inputNode.value;\n            this._inputNode.mark(this);\n        }\n    }\n\n    set inputNode(node: CircuitNode) {\n        this._inputNode = node;\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n\n    set writeEnable(node: CircuitNode) {\n        this._writeEnable = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport Val from \"./Val\";\n\nexport default class CircuitNode extends Component {\n    private readonly defaultValue: Val;\n\n    private neighbours: Component[] = [];\n    private neighbourNodes: CircuitNode[] = [];\n\n    private _value: Val;\n    private signaler: Component;\n    private marked: boolean;\n\n    constructor(x: number, y: number, defaultValue: Val = undefined) {\n        super(x, y);\n        this.defaultValue = defaultValue;\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        // g.fillCircle(this.x, this.y, 2, Config.signalColor);\n        this.neighbourNodes.forEach(el =>\n            g.drawLine(this.x, this.y, el.x, el.y, el.marked ? Config.signalColor : Config.lineColor)\n        );\n    }\n\n    refresh(): void {\n        this._value = this.defaultValue;\n        this.signaler = undefined;\n        this.marked = false;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._value = value;\n        this.signaler = signaler;\n\n        this.neighbours.forEach(nb => {\n            if (nb != signaler) {\n                nb.forwardSignal(this, value);\n            }\n        })\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n        if (this.signaler) {\n            this.signaler.mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    addNeighbour(neighbour: Component) {\n        this.neighbours.push(neighbour);\n\n        if (neighbour instanceof CircuitNode) {\n            this.neighbourNodes.push(neighbour);\n        }\n    }\n\n\n    get value(): Val {\n        return this._value;\n    }\n}","import Val from \"./Val\";\n\nexport default class InstructionHelper {\n    static readonly INSTR_SIZE = 32;\n    static readonly OP_CODE_SIZE = 7;\n\n    /* @formatter:off */\n    static readonly OP_CODE_ALU    = \"0110011\";\n    static readonly OP_CODE_ALUI   = \"0010011\";\n    static readonly OP_CODE_LW     = \"0000011\";\n    static readonly OP_CODE_SW     = \"0100011\";\n    static readonly OP_CODE_BRANCH = \"1100011\";\n    static readonly OP_CODE_JAL    = \"1101111\";\n    static readonly OP_CODE_JALR   = \"1100111\";\n\n    /* ALU Functions */\n    static readonly FUNCT_ADD  = \"0000000000\";\n    static readonly FUNCT_SUB  = \"0100000000\";\n    static readonly FUNCT_SLL  = \"0000000001\";\n    static readonly FUNCT_SLT  = \"0000000010\";\n    static readonly FUNCT_SLTU = \"0000000011\";\n    static readonly FUNCT_XOR  = \"0000000100\";\n    static readonly FUNCT_SRL  = \"0000000101\";\n    static readonly FUNCT_SRA  = \"0100000101\";\n    static readonly FUNCT_OR   = \"0000000110\";\n    static readonly FUNCT_AND  = \"0000000111\";\n\n    /* ALUi Functions */\n    static readonly FUNCT_ADDI   = \"000\";\n    static readonly FUNCT_SLTI   = \"010\";\n    static readonly FUNCT_SLTIU  = \"011\";\n    static readonly FUNCT_XORI   = \"100\";\n    static readonly FUNCT_ORI    = \"110\";\n    static readonly FUNCT_ANDI   = \"111\";\n\n    static readonly FUNCT_SLLI = \"0000000001\";\n    static readonly FUNCT_SRLI = \"0000000101\";\n    static readonly FUNCT_SRAI = \"0100000101\";\n\n    /* Load Functions */\n    static readonly FUNCT_LB  = \"000\";\n    static readonly FUNCT_LH  = \"001\";\n    static readonly FUNCT_LW  = \"010\";\n    static readonly FUNCT_LBU = \"100\";\n    static readonly FUNCT_LHU = \"10\";\n\n    /* Store Functions */\n    static readonly FUNCT_SB = \"000\";\n    static readonly FUNCT_SH = \"001\";\n    static readonly FUNCT_SW = \"010\";\n\n    /* Branch Functions */\n    static readonly FUNCT_BEQ  = \"000\";\n    static readonly FUNCT_BNE  = \"001\";\n    static readonly FUNCT_BLT  = \"100\";\n    static readonly FUNCT_BGE  = \"101\";\n    static readonly FUNCT_BLTU = \"110\";\n    static readonly FUNCT_BGEU = \"111\";\n\n    /* @formatter:on */\n\n    private static convertAndPad(num: Number, len: number = 32) {\n        let str = num.toString(2);\n        while (str.length < len) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    static toBitString(instr: Val) {\n        return this.convertAndPad(instr.asUnsignedInt());\n    }\n\n    static getOpCodeStr(inst: Val) {\n        return this.toBitString(inst).substr(this.INSTR_SIZE - this.OP_CODE_SIZE);\n    }\n\n    static getRd(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(20, 5), 2);\n    }\n\n    static getRs1(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(12, 5), 2);\n    }\n\n    static getRs2(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(7, 5), 2);\n    }\n\n    static getImmIType(instr: Val): number {\n        return parseInt(instr.asBinaryString().substr(0, 12), 2);\n    }\n\n    static getImmBType(instr: Val): number {\n        let str = instr.asBinaryString();\n        let imm12 = str.substr(0, 1);\n        let imm10 = str.substr(1, 6);\n        let imm4 = str.substr(20, 4);\n        let imm11 = str.substr(24, 1);\n\n        return parseInt(imm12 + imm11 + imm10 + imm4 + \"0\", 2);\n    }\n\n    static getImmSType(instr: Val): number {\n        let str = instr.asBinaryString();\n        let imm11 = str.substr(0, 7);\n        let imm4 = str.substr(20, 5);\n\n        return parseInt(imm11 + imm4, 2);\n    }\n\n    static createRType(opCode: string, funct: string, rd: number, rs1: number, rs2: number): Val {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) + funct3 +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createIType(opCode: string, funct: string, rd: number, rs1: number, imm: number): Val {\n        let instr = this.convertAndPad(imm, 12) + this.convertAndPad(rs1, 5) + funct +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createITypeShift(opCode: string, funct: string, rd: number, rs1: number, shamt: number) {\n        let funct7 = funct.substr(0, 7);\n        let funct3 = funct.substr(7, 3);\n\n        let instr = funct7 + this.convertAndPad(shamt, 5) + this.convertAndPad(rs1, 5) + funct3 +\n            this.convertAndPad(rd, 5) + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createSType(opCode: string, funct: string, rs1: number, rs2: number, imm: number): Val {\n        let immStr = this.convertAndPad(imm, 12);\n        let imm11 = immStr.substr(0, 7);\n        let imm4 = immStr.substr(7, 5);\n\n        let instr = imm11 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) + funct + imm4 + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static createBType(opCode: string, funct: string, rs1: number, rs2: number, imm: number) {\n        let immStr = this.convertAndPad(imm, 12);\n        let imm12 = immStr.substr(0, 1);\n        let imm10 = immStr.substr(2, 6);\n        let imm4 = immStr.substr(8, 4);\n        let imm11 = immStr.substr(1, 1);\n\n        let instr = imm12 + imm10 + this.convertAndPad(rs2, 5) + this.convertAndPad(rs1, 5) +\n            funct + imm4 + imm11 + opCode;\n\n        return new Val(parseInt(instr, 2), 32);\n    }\n\n    static decode(instr: Val): string {\n        let opCode = this.getOpCodeStr(instr);\n\n        switch (opCode) {\n            case this.OP_CODE_ALU:\n                return this.decodeALU(instr);\n\n            case this.OP_CODE_ALUI:\n                return this.decodeALUI(instr);\n\n            case this.OP_CODE_LW:\n                return this.decodeLW(instr);\n\n            case this.OP_CODE_SW:\n                return this.decodeSW(instr);\n\n            case this.OP_CODE_BRANCH:\n                return this.decodeBRANCH(instr);\n\n            case this.OP_CODE_JAL:\n                return this.decodeJAL(instr);\n\n            case this.OP_CODE_JALR:\n                return this.decodeJALR(instr);\n\n            default:\n                console.error(\"Unsupported OP Code: \" + opCode);\n                return instr.asHexString();\n        }\n    }\n\n    static decodeALU(instr: Val): string {\n        let func = instr.asBinaryString().substr(0, 7) + instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_ADD: {\n                name = \"ADD\";\n                break;\n            }\n            case this.FUNCT_SUB: {\n                name = \"SUB\";\n                break;\n            }\n            case this.FUNCT_SLL: {\n                name = \"SLT\";\n                break;\n            }\n            case this.FUNCT_SLT: {\n                name = \"SLT\";\n                break;\n            }\n            case this.FUNCT_SLTIU: {\n                name = \"SLTU\";\n                break;\n            }\n            case this.FUNCT_XOR: {\n                name = \"XOR\";\n                break;\n            }\n            case this.FUNCT_SRL: {\n                name = \"SRL\";\n                break;\n            }\n            case this.FUNCT_SRA: {\n                name = \"SRA\";\n                break;\n            }\n            case this.FUNCT_OR: {\n                name = \"OR\";\n                break;\n            }\n            case this.FUNCT_AND: {\n                name = \"\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", x\" + this.getRs1(instr) + \", x\" + this.getRs2(instr);\n    }\n\n    static decodeALUI(instr: Val): string {\n        let func7 = instr.asBinaryString().substr(0, 7);\n        let func3 = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func3) {\n            case this.FUNCT_ADDI: {\n                name = \"ADDI\";\n                break;\n            }\n            case this.FUNCT_SLTI: {\n                name = \"SLTI\";\n                break;\n            }\n            case this.FUNCT_SLTIU: {\n                name = \"SLTIU\";\n                break;\n            }\n            case this.FUNCT_XORI: {\n                name = \"XORI\";\n                break;\n            }\n            case this.FUNCT_ORI: {\n                name = \"ORI\";\n                break;\n            }\n            case this.FUNCT_ANDI: {\n                name = \"ANDI\";\n                break;\n            }\n        }\n\n        switch (func7 + func3) {\n            case this.FUNCT_SLLI: {\n                name = \"SSLI\";\n                break;\n            }\n            case this.FUNCT_SRLI: {\n                name = \"SRLI\";\n                break;\n            }\n            case this.FUNCT_SRAI: {\n                name = \"SRAI\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", x\" + this.getRs1(instr) + \", \" +\n            this.getImmIType(instr).toString(10);\n    }\n\n    static decodeLW(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_LB: {\n                name = \"LB\";\n                break;\n            }\n            case this.FUNCT_LH: {\n                name = \"LH\";\n                break;\n            }\n            case this.FUNCT_LW: {\n                name = \"LW\";\n                break;\n            }\n            case this.FUNCT_LBU: {\n                name = \"LBU\";\n                break;\n            }\n            case this.FUNCT_LHU: {\n                name = \"LHU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRd(instr) + \", 0x\" + this.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + this.getRs1(instr) + \")\";\n    }\n\n    static decodeSW(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_SB: {\n                name = \"SW\";\n                break;\n            }\n            case this.FUNCT_SH: {\n                name = \"SW\";\n                break;\n            }\n            case this.FUNCT_SW: {\n                name = \"SW\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRs1(instr) + \", 0x\" + this.getImmIType(instr).toString(16).toUpperCase() +\n            \"(x\" + this.getRs2(instr) + \")\";\n    }\n\n    static decodeBRANCH(instr: Val): string {\n        let func = instr.asBinaryString().substr(17, 3);\n\n        let name = \"-\";\n        switch (func) {\n            case this.FUNCT_BEQ: {\n                name = \"BEQ\";\n                break;\n            }\n            case this.FUNCT_BNE: {\n                name = \"BNE\";\n                break;\n            }\n            case this.FUNCT_BLT: {\n                name = \"BLT\";\n                break;\n            }\n            case this.FUNCT_BGE: {\n                name = \"BGE\";\n                break;\n            }\n            case this.FUNCT_BLTU: {\n                name = \"BLTU\";\n                break;\n            }\n            case this.FUNCT_BGEU: {\n                name = \"BGEU\";\n                break;\n            }\n        }\n\n        return name + \" x\" + this.getRs1(instr) + \", x\" + this.getRs2(instr) +\n            \", 0x\" + this.getImmBType(instr).toString(16).toUpperCase();\n    }\n\n    static decodeJAL(instr: Val): string {\n        return \"JAL instruction\";\n    }\n\n    static decodeJALR(instr: Val): string {\n        return \"JALR instruction\";\n    }\n\n    static compare(v: Val, s: string) {\n        console.log(v.asBinaryString());\n        console.log(s.replace(/ /g, \"\"));\n    }\n\n    static main(args: String[] = []): void {\n        this.compare(this.createRType(this.OP_CODE_ALU, this.FUNCT_ADD, 2, 1, 1),\n            \"0000000 00001 00001 000 00010 0110011\");\n    }\n}\n","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class InstructionMemory extends Component {\n    public static readonly SIZE: number = 32;\n    private readonly values: Val[] = [];\n\n    private _addressNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number, values: Val[]) {\n        super(x, y);\n        this.values = values;\n\n        this.values[0] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 1, 0, 5);\n\n        this.values[1] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 2, 0, 7);\n\n        this.values[2] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_ADD, 3, 1, 2);\n\n        this.values[3] = InstructionHelper.createIType(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_ADDI, 3, 3, 4);\n\n        this.values[4] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_SUB, 4, 3, 1);\n\n        this.values[5] = InstructionHelper.createRType(InstructionHelper.OP_CODE_ALU,\n            InstructionHelper.FUNCT_ADD, 5, 4, 2);\n\n        this.values[6] = InstructionHelper.createITypeShift(InstructionHelper.OP_CODE_ALUI,\n            InstructionHelper.FUNCT_SRLI, 6, 5, 1);\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, InstructionMemory.SIZE * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < InstructionMemory.SIZE; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._outputDataNode.forwardSignal(this, this.values[value.asUnsignedInt() / 4]);\n    }\n\n    mark(caller: Component): void {\n        this._addressNode.mark(this);\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\n\nexport enum MultiplexerOrientation {\n    LEFT,\n    RIGHT\n}\n\nexport default class Multiplexer extends Component {\n    private readonly ninputs: number;\n    private readonly orientation: MultiplexerOrientation;\n    private readonly inputDistance: number;\n\n    private readonly _inputNodes: CircuitNode[];\n    private _selInputNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private selValue: number = undefined;\n    private inputValues: Val[] = [];\n\n    private marked = false;\n\n    constructor(x: number, y: number, ninputs: number,\n                orientation: MultiplexerOrientation = MultiplexerOrientation.RIGHT, inputDistance: number = 15) {\n        super(x, y);\n        this.ninputs = ninputs;\n        this.orientation = orientation;\n        this.inputDistance = inputDistance;\n        this._inputNodes = [];\n    }\n\n    draw(g: Graphics): void {\n        let height = 50 + (this.ninputs - 1) * this.inputDistance;\n\n        if (this.orientation == MultiplexerOrientation.RIGHT) {\n            g.fillPolygon(Graphics.addOffset([[0, 0], [25, 15], [25, height - 15], [0, height]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        } else {\n            g.fillPolygon(Graphics.addOffset([[0, 15], [25, 0], [25, height], [0, height - 15]], this.x, this.y),\n                Config.elementFillColor, Config.elementStrokeColor);\n        }\n\n        if (this.marked) {\n            let y = this._inputNodes[this.selValue].y;\n            let xCenter = this.x + 12.5;\n            let yCenter = this.y + height / 2;\n            if (this.orientation == MultiplexerOrientation.RIGHT) {\n                g.drawPath([[this.x, y], [xCenter, y], [xCenter, yCenter], [this.x + 25, yCenter]],\n                    Config.signalColor);\n            } else {\n                g.drawPath([[this.x + 25, y], [xCenter, y], [xCenter, yCenter], [this.x, yCenter]],\n                    Config.signalColor);\n            }\n        }\n\n        // if (this.orientation == MultiplexerOrientation.RIGHT) {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x + 25, this.y + height / 2, 2, \"red\");\n        // } else {\n        //     for (let i = 0; i < this.ninputs; i++) {\n        //         g.fillCircle(this.x + 25, this.y + 25 + i * this.inputDistance, 2, \"red\");\n        //     }\n        //     g.fillCircle(this.x, this.y + height / 2, 2, \"red\");\n        // }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        if (signaler == this._selInputNode) {\n            this.selValue = value.asUnsignedInt();\n        } else {\n            for (let i in this._inputNodes) {\n                if (signaler == this._inputNodes[i]) {\n                    this.inputValues[i] = value;\n                    break;\n                }\n            }\n        }\n\n        if (this.selValue != undefined && this.inputValues[this.selValue]) {\n            this._outNode.forwardSignal(this, this.inputValues[this.selValue]);\n        }\n    }\n\n    refresh(): void {\n        this.selValue = undefined;\n        this.inputValues = [];\n        this.marked = false;\n    }\n\n    mark(caller: Component): void {\n        this.marked = true;\n\n        this._selInputNode.mark(this);\n        if (this._inputNodes[this.selValue]) {\n            this._inputNodes[this.selValue].mark(this);\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    setInputNodes(idx: number, node: CircuitNode) {\n        this._inputNodes[idx] = node;\n        node.addNeighbour(this);\n    }\n\n    set selInputNode(node: CircuitNode) {\n        this._selInputNode = node;\n        node.addNeighbour(this);\n    }\n\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class ALUControl extends Component {\n    public static readonly FUNC = Val.UnsignedInt(0, 2);\n    public static readonly OP = Val.UnsignedInt(1, 2);\n    public static readonly ADD = Val.UnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Val;\n    private ctrlValue: Val;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"ALU\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 10, this.y + 43, \"Control\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: Val;\n\n        switch (this.ctrlValue) {\n            case ALUControl.FUNC: {\n                result = this.handleFunc();\n                break;\n            }\n            case ALUControl.OP: {\n                result = this.handleOp();\n                break;\n            }\n            case ALUControl.ADD: {\n                result = ALUControl.ADD;\n                break;\n            }\n            default: {\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        if (result == undefined) {\n            console.log(\"Unsupported operation\")\n        } else {\n            this._outNode.forwardSignal(this, result);\n        }\n\n    }\n\n    private handleFunc(): Val {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n        let func = func7 + func3;\n\n        switch (func) {\n            case InstructionHelper.FUNCT_ADD:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionHelper.FUNCT_SUB:\n                return ArithmeticLogicUnit.SUB;\n\n            case InstructionHelper.FUNCT_SLL:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionHelper.FUNCT_SLT:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionHelper.FUNCT_SLTU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionHelper.FUNCT_XOR:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_SRL:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_SRA:\n                return ArithmeticLogicUnit.SRA;\n\n            case InstructionHelper.FUNCT_OR:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionHelper.FUNCT_AND:\n                return ArithmeticLogicUnit.AND;\n\n            default:\n                return null;\n        }\n    }\n\n    private handleOp(): Val {\n        let func7 = this.instrValue.asBinaryString().substr(0, 7);\n        let func3 = this.instrValue.asBinaryString().substr(17, 3);\n\n        switch (func3) {\n            case InstructionHelper.FUNCT_ADDI:\n                return ArithmeticLogicUnit.ADD;\n\n            case InstructionHelper.FUNCT_SLTI:\n                return ArithmeticLogicUnit.SLT;\n\n            case InstructionHelper.FUNCT_SLTIU:\n                return ArithmeticLogicUnit.SLTU;\n\n            case InstructionHelper.FUNCT_XORI:\n                return ArithmeticLogicUnit.XOR;\n\n            case InstructionHelper.FUNCT_ORI:\n                return ArithmeticLogicUnit.OR;\n\n            case InstructionHelper.FUNCT_ANDI:\n                return ArithmeticLogicUnit.AND;\n        }\n\n        switch (func7 + func3) {\n            case InstructionHelper.FUNCT_SLLI:\n                return ArithmeticLogicUnit.SLL;\n\n            case InstructionHelper.FUNCT_SRLI:\n                return ArithmeticLogicUnit.SRL;\n\n            case InstructionHelper.FUNCT_SRAI:\n                return ArithmeticLogicUnit.SRA;\n\n            default:\n                return undefined;\n        }\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import CircuitNode from \"./CircutNode\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport Component from \"./Component\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\n\nexport default class DataMemory extends Component {\n    public static readonly WRITE_NO = Val.UnsignedInt(0, 1);\n    public static readonly WRITE_YES = Val.UnsignedInt(1, 1);\n\n    private readonly size: number = 32;\n    private values: Val[] = [];\n\n    private _writeEnNode: CircuitNode;\n    private _addressNode: CircuitNode;\n    private _inputDataNode: CircuitNode;\n    private _outputDataNode: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        this._outputDataNode.forwardSignal(this, this.values[value.asUnsignedInt() / 4]);\n    }\n\n    set writeEnNode(value: CircuitNode) {\n        this._writeEnNode = value;\n    }\n\n    set addressNode(node: CircuitNode) {\n        this._addressNode = node;\n        node.addNeighbour(this);\n    }\n\n    set inputDataNode(value: CircuitNode) {\n        this._inputDataNode = value;\n    }\n\n    set outputDataNode(node: CircuitNode) {\n        this._outputDataNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val, {VAL_ZERO_32b} from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class RegisterFile extends Component {\n    public static readonly WRITE_NO = Val.UnsignedInt(0, 1);\n    public static readonly WRITE_YES = Val.UnsignedInt(1, 1);\n\n    private readonly size: number = 16;\n    private values: Val[] = [];\n\n    private nextValue: Val;\n    private nextSel: number;\n\n    private _readSel1Node: CircuitNode;\n    private _readSel2Node: CircuitNode;\n    private _inputWriteSelNode: CircuitNode;\n\n    private _inputWriteEnNode: CircuitNode;\n    private _inputWriteDataNode: CircuitNode;\n\n    private _readData1Node: CircuitNode;\n    private _readData2Node: CircuitNode;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        for (let i = 0; i < this.size; i++) {\n            this.values.push(VAL_ZERO_32b);\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, this.size * 15 + 20,\n            Config.elementFillColor, Config.elementStrokeColor);\n\n        for (let i = 0; i < this.size; i++) {\n            g.fillRect(this.x + 10, this.y + 10 + i * 15, 80, 15,\n                Config.memoryFillColor, Config.memoryStrokeColor);\n            g.drawText(this.x + 10 + 5, this.y + 10 + 12 + i * 15, this.values[i].asHexString(),\n                Config.fontColor, 12);\n        }\n    }\n\n    refresh() : void {\n        if (this.nextSel && this.nextValue) {\n            this.values[this.nextSel] = this.nextValue;\n        }\n\n        this.nextValue = undefined;\n        this.nextSel = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        if (signaler == this._readSel1Node) {\n            this._readData1Node.forwardSignal(this, this.values[InstructionHelper.getRs1(value)]);\n        } else if (signaler == this._readSel2Node) {\n            this._readData2Node.forwardSignal(this, this.values[InstructionHelper.getRs2(value)]);\n        } else {\n            console.error(\"Error\");\n        }\n    }\n\n    onRisingEdge(): void {\n        if (this._inputWriteEnNode.value == RegisterFile.WRITE_YES) {\n            this.nextSel = InstructionHelper.getRd(this._inputWriteSelNode.value);\n\n            if (this._inputWriteDataNode.value == null) {\n                console.log(\"Error\");\n                return;\n            }\n\n            this.nextValue = this._inputWriteDataNode.value;\n            this._inputWriteEnNode.mark(this);\n            this._inputWriteSelNode.mark(this);\n            this._inputWriteDataNode.mark(this);\n        }\n    }\n\n\n    mark(caller: Component): void {\n        switch (caller) {\n            case this._readData1Node: {\n                this._readSel1Node.mark(this);\n                break;\n            }\n            case this._readData2Node: {\n                this._readSel2Node.mark(this);\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n    }\n\n    set readSel1Node(node: CircuitNode) {\n        this._readSel1Node = node;\n        node.addNeighbour(this);\n    }\n\n    set readSel2Node(node: CircuitNode) {\n        this._readSel2Node = node;\n        node.addNeighbour(this);\n    }\n\n    set inputWriteSelNode(node: CircuitNode) {\n        this._inputWriteSelNode = node;\n    }\n\n    set inputWriteEnNode(node: CircuitNode) {\n        this._inputWriteEnNode = node;\n    }\n\n    set inputWriteDataNode(node: CircuitNode) {\n        this._inputWriteDataNode = node;\n    }\n\n    set readData1Node(node: CircuitNode) {\n        this._readData1Node = node;\n    }\n\n    set readData2Node(node: CircuitNode) {\n        this._readData2Node = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val from \"./Val\";\nimport InstructionHelper from \"./InstructionHelper\";\n\nexport default class ImmSelect extends Component {\n    public static readonly ITYPE = Val.UnsignedInt(0, 2);\n    public static readonly BRTYPE = Val.UnsignedInt(1, 2);\n    public static readonly BSTYPE = Val.UnsignedInt(2, 2);\n\n    private _instrNode: CircuitNode;\n    private _controlNode: CircuitNode;\n    private _outNode: CircuitNode;\n\n    private instrValue: Val;\n    private ctrlValue: Val;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 100, 50, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 30, this.y + 23, \"Imm\", Config.fontColor, Config.fontSize);\n        g.drawText(this.x + 15, this.y + 43, \"Select\", Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n        this.ctrlValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            case this._controlNode: {\n                this.ctrlValue = value;\n                break;\n            }\n            default: {\n                console.log(\"Error\");\n            }\n        }\n\n        if (this.instrValue == undefined || this.ctrlValue == undefined) {\n            return;\n        }\n\n        let result: number;\n\n        switch (this.ctrlValue) {\n            case ImmSelect.ITYPE: {\n                result = InstructionHelper.getImmIType(this.instrValue);\n                break;\n            }\n            case ImmSelect.BRTYPE: {\n                result = InstructionHelper.getImmBType(this.instrValue);\n                break;\n            }\n            case ImmSelect.BSTYPE: {\n                result = InstructionHelper.getImmSType(this.instrValue);\n                break;\n            }\n            default: {\n                result = 0;\n                console.log(\"Unsupported control signal\");\n            }\n        }\n\n        this._outNode.forwardSignal(this, new Val(result, 32));\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n        this._controlNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set controlNode(node: CircuitNode) {\n        this._controlNode = node;\n        node.addNeighbour(this);\n    }\n\n    set outNode(node: CircuitNode) {\n        this._outNode = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport Config from \"./Config\";\nimport CircuitNode from \"./CircutNode\";\nimport Val, {VAL_ONE_32b, VAL_THREE_32b, VAL_TWO_32b, VAL_ZERO_32b} from \"./Val\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport RegisterFile from \"./RegisterFile\";\nimport InstructionHelper from \"./InstructionHelper\";\nimport ImmSelect from \"./ImmSelect\";\n\nexport default class ControlUnit extends Component {\n    private _instrNode: CircuitNode;\n\n    private _PCSelNode: CircuitNode;\n    private _RegWriteEn: CircuitNode;\n    private _MemWrite: CircuitNode;\n    private _WBSel: CircuitNode;\n    private _WASel: CircuitNode;\n    private _ImmSel: CircuitNode;\n    private _FuncSel: CircuitNode;\n    private _Op2Sel: CircuitNode;\n\n    private instrValue: Val = VAL_ZERO_32b;\n\n    constructor(x: number, y: number) {\n        super(x, y);\n        this.refresh();\n    }\n\n    draw(g: Graphics): void {\n        g.fillRect(this.x, this.y, 250, 125, Config.elementFillColor, Config.elementStrokeColor);\n        g.drawTextCentered(this.x, this.y + 45, 250, \"Control\", Config.fontColor, Config.fontSize);\n        g.drawTextCentered(this.x, this.y + 70, 250, \"Unit\", Config.fontColor, Config.fontSize);\n\n        g.fillRect(this.x + 10, this.y + 90, 230, 25,\n            Config.memoryFillColor, Config.memoryStrokeColor);\n        g.drawText(this.x + 20, this.y + 90 + 21, InstructionHelper.decode(this.instrValue),\n            Config.fontColor, Config.fontSize);\n    }\n\n    refresh(): void {\n        this.instrValue = undefined;\n    }\n\n    forwardSignal(signaler: Component, value: Val): void {\n        switch (signaler) {\n            case this._instrNode: {\n                this.instrValue = value;\n                break;\n            }\n            default: {\n                console.error(\"Error\");\n            }\n        }\n\n        let opcode = InstructionHelper.getOpCodeStr(this.instrValue);\n        let ImmSel, Op2Sel, FuncSel, MemWr, RFWen, WBSel, WASel, PCSel: Val;\n\n        switch (opcode) {\n            case InstructionHelper.OP_CODE_ALU : {\n                ImmSel = undefined;\n                Op2Sel = VAL_ZERO_32b;\n                FuncSel = ALUControl.FUNC;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_ALUI : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.OP;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_TWO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_LW : {\n                ImmSel = ImmSelect.ITYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ONE_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_SW : {\n                ImmSel = ImmSelect.BSTYPE;\n                Op2Sel = VAL_ONE_32b;\n                FuncSel = ALUControl.ADD;\n                MemWr = DataMemory.WRITE_YES;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = VAL_THREE_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_BRANCH : {\n                ImmSel = ImmSelect.BRTYPE;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_NO;\n                WBSel = undefined;\n                WASel = undefined;\n                PCSel = true ? VAL_ZERO_32b : VAL_THREE_32b; // TODO\n                break\n            }\n            case InstructionHelper.OP_CODE_JAL : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ZERO_32b;\n                PCSel = VAL_TWO_32b;\n                break\n            }\n            case InstructionHelper.OP_CODE_JALR : {\n                ImmSel = undefined;\n                Op2Sel = undefined;\n                FuncSel = undefined;\n                MemWr = DataMemory.WRITE_NO;\n                RFWen = RegisterFile.WRITE_YES;\n                WBSel = VAL_ZERO_32b;\n                WASel = VAL_ONE_32b;\n                PCSel = VAL_ONE_32b;\n                break\n            }\n\n            default: {\n                console.error(\"Unknown OP Code: \" + opcode);\n                PCSel = VAL_THREE_32b;\n            }\n        }\n\n        if (ImmSel) this._ImmSel.forwardSignal(this, ImmSel);\n        if (Op2Sel) this._Op2Sel.forwardSignal(this, Op2Sel);\n        if (FuncSel) this._FuncSel.forwardSignal(this, FuncSel);\n        if (MemWr) this._MemWrite.forwardSignal(this, MemWr);\n        if (RFWen) this._RegWriteEn.forwardSignal(this, RFWen);\n        if (WBSel) this._WBSel.forwardSignal(this, WBSel);\n        if (WASel) this._WASel.forwardSignal(this, WASel);\n        if (PCSel) this._PCSelNode.forwardSignal(this, PCSel);\n    }\n\n    mark(caller: Component): void {\n        this._instrNode.mark(this);\n    }\n\n    set instrNode(node: CircuitNode) {\n        this._instrNode = node;\n        node.addNeighbour(this);\n    }\n\n    set PCSelNode(node: CircuitNode) {\n        this._PCSelNode = node;\n    }\n\n    set RegWriteEn(node: CircuitNode) {\n        this._RegWriteEn = node;\n    }\n\n    set MemWrite(node: CircuitNode) {\n        this._MemWrite = node;\n    }\n\n    set WBSel(node: CircuitNode) {\n        this._WBSel = node;\n    }\n\n    set WASel(node: CircuitNode) {\n        this._WASel = node;\n    }\n\n    set ImmSel(node: CircuitNode) {\n        this._ImmSel = node;\n    }\n\n    set FuncSel(node: CircuitNode) {\n        this._FuncSel = node;\n    }\n\n    set Op2Sel(node: CircuitNode) {\n        this._Op2Sel = node;\n    }\n}","import Component from \"./Component\";\nimport Graphics from \"./Graphics\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Val from \"./Val\";\n\nexport default class ConstValue extends Component {\n    readonly value: Val;\n    private _outNode: CircuitNode;\n\n    constructor(x: number, y: number, value: Val) {\n        super(x, y);\n        this.value = value;\n    }\n\n    draw(g: Graphics): void {\n        g.fillPolygon(Graphics.addOffset([[0, 0], [0, 25], [25, 25], [25, 0]], this.x, this.y),\n            Config.elementFillColor, Config.elementStrokeColor);\n        g.drawText(this.x + 5, this.y + 20, this.value.asShortHexString(), Config.fontColor, Config.fontSize);\n    }\n\n    onFallingEdge(): void {\n        this._outNode.forwardSignal(this, this.value);\n    }\n\n    mark(caller: Component): void {\n        // TODO: change color\n    }\n\n    set outNode(value: CircuitNode) {\n        this._outNode = value;\n    }\n}","import Graphics from \"./Graphics\";\nimport ArithmeticLogicUnit from \"./ArithmeticLogicUnit\";\nimport Register from \"./Register\";\nimport CircuitNode from \"./CircutNode\";\nimport Config from \"./Config\";\nimport Component from \"./Component\";\nimport InstructionMemory from \"./InstructionMemory\";\nimport Multiplexer, {MultiplexerOrientation} from \"./Multiplexer\";\nimport ControlUnit from \"./ControlUnit\";\nimport ConstValue from \"./ConstValue\";\nimport RegisterFile from \"./RegisterFile\";\nimport ImmSelect from \"./ImmSelect\";\nimport ALUControl from \"./ALUControl\";\nimport DataMemory from \"./DataMemory\";\nimport Val from \"./Val\";\n\nexport default class Simulator {\n    protected elements: Component[] = [];\n    private readonly g: Graphics;\n    private initialInstruct : Val[];\n\n    constructor(canvas: HTMLCanvasElement, parsed: Val[]) {\n        this.g = new Graphics(canvas, 1200, 800);\n        this.load(parsed);\n    }\n\n    create() {\n        let PCRegister = new Register(35, 230);\n        let instrMemory = new InstructionMemory(60, 285, this.initialInstruct);\n        let PCStep = new ConstValue(150, 135, Val.UnsignedInt(4));\n        let PCAdder = new ArithmeticLogicUnit(205, 135, ArithmeticLogicUnit.ADD);\n        let PCSelMux = new Multiplexer(210, 25, 4, MultiplexerOrientation.LEFT);\n        let controlUnit = new ControlUnit(170, 450);\n\n        this.elements.push(PCRegister, instrMemory, PCStep, PCSelMux, PCAdder, controlUnit);\n\n        let WASel1 = new ConstValue(450, 520, Val.UnsignedInt(1));\n        let WASelMux = new Multiplexer(485, 520, 2);\n        let registerFile = new RegisterFile(550, 350);\n        let immSelect = new ImmSelect(670, 550);\n        let ALUCtrl = new ALUControl(740, 630);\n\n        this.elements.push(WASel1, registerFile, WASelMux, immSelect, ALUCtrl);\n\n        let op2SelMux = new Multiplexer(850, 500, 2);\n        let ALU = new ArithmeticLogicUnit(895, 400);\n\n        this.elements.push(op2SelMux, ALU);\n\n        let dataMemory = new DataMemory(985, 200);\n        let WBSelMux = new Multiplexer(1135, 600, 3);\n\n        this.elements.push(dataMemory, WBSelMux);\n\n        /* PC enable write */\n        let node = new CircuitNode(65, 230, Val.UnsignedInt(1));\n        PCRegister.writeEnable = node;\n        this.elements.push(node); // Not required\n\n        let path: CircuitNode[];\n\n        /* PCSelMux ->  PC */\n        path = this.createPath([[210, 72.5], [25, 72.5], [25, 242.5], [35, 242.5]]);\n        PCSelMux.outNode = path[0];\n        PCRegister.inputNode = path[path.length - 1];\n\n        /* PC Step -> PC Adder */\n        path = this.createPath([[175, 147.5], [205, 147.5]]);\n        PCStep.outNode = path[0];\n        PCAdder.input1Node = path[path.length - 1];\n\n        /* PC Register -> PC Adder */\n        path = this.createPath([[185, 242.5], [195, 242.5], [195, 197.5], [205, 197.5]]);\n        PCRegister.outNode = path[0];\n        PCAdder.input2Node = path[path.length - 1];\n\n        let PCRegisterNode = path[1];\n\n        /* PC Adder -> PCSelMux */\n        path = this.createPath([[245, 172.5], [255, 172.5], [255, 95], [235, 95]]);\n        PCAdder.resultNode = path[0];\n        PCSelMux.setInputNodes(3, path[path.length - 1]);\n\n        /* PC Register -> Instruction memory */\n        path = this.createPath([[195, 242.5], [195, 275], [110, 275], [110, 285]]);\n        PCRegisterNode.addNeighbour(path[0]);\n        instrMemory.addressNode = path[path.length - 1];\n\n        /* Instruction memory -> instrNode */\n        path = this.createPath([[160, 412.5], [295, 412.5]]);\n        instrMemory.outputDataNode = path[0];\n\n        let instrNode = path[path.length - 1];\n\n        /* instrNode -> Control unit */\n        path = this.createPath([[295, 412.5], [295, 450]]);\n        instrNode.addNeighbour(path[0]);\n        controlUnit.instrNode = path[path.length - 1];\n\n        /* Extend instruction wire */\n        node = new CircuitNode(430, 412.5);\n        this.elements.push(node);\n        instrNode.addNeighbour(node);\n        instrNode = node;\n\n        /* WASel1 -> WASelMux */\n        path = this.createPath([[475, 532.5], [485, 532.5]]);\n        WASel1.outNode = path[1];\n        WASelMux.setInputNodes(0, path[path.length - 1]);\n\n        /* WASelMux -> Register File */\n        path = this.createPath([[510, 552.5], [550, 552.5]]);\n        WASelMux.outNode = path[0];\n        registerFile.inputWriteSelNode = path[path.length - 1];\n\n        /* instrNode -> RF Write select */\n        path = this.createPath([[430, 570], [485, 570]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeBottom = path[0];\n        WASelMux.setInputNodes(1, path[path.length - 1]);\n\n        /* instrNode -> ImmSelect */\n        path = this.createPath([[430, 620], [660, 620], [660, 575], [670, 575]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        immSelect.instrNode = path[path.length - 1];\n\n        /* instrNode -> ALU Control */\n        path = this.createPath([[430, 655], [740, 655]]);\n        instrNodeBottom.addNeighbour(path[0]);\n        instrNodeBottom = path[0];\n        ALUCtrl.instrNode = path[path.length - 1];\n\n        /* instrNode -> ReadSel2 */\n        path = this.createPath([[430, 390], [550, 390]]);\n        instrNode.addNeighbour(path[0]);\n        let instrNodeTop = path[0];\n        registerFile.readSel2Node = path[path.length - 1];\n\n        /* instrNode -> ReadSel1 */\n        path = this.createPath([[430, 370], [550, 370]]);\n        instrNodeTop.addNeighbour(path[0]);\n        instrNodeTop = path[0];\n        registerFile.readSel1Node = path[path.length - 1];\n\n        /* ImmSelect -> op2SelMux */\n        path = this.createPath([[770, 575], [790, 575], [790, 550], [850, 550]]);\n        immSelect.outNode = path[0];\n        op2SelMux.setInputNodes(1, path[path.length - 1]);\n\n        /* RF ReadData2 -> op2SelMux */\n        path = this.createPath([[650, 390], [670, 390], [670, 525], [830, 525], [850, 525]]);\n        registerFile.readData2Node = path[0];\n        op2SelMux.setInputNodes(0, path[path.length - 1]);\n        let readData2Node = path[path.length - 2];\n\n        /* RF ReadData1 -> ALU */\n        path = this.createPath([[650, 370], [885, 370], [885, 415], [895, 415]]);\n        registerFile.readData1Node = path[0];\n        ALU.input1Node = path[path.length - 1];\n\n        /* op2SelMux -> ALU */\n        path = this.createPath([[875, 532.5], [885, 532.5], [885, 460], [895, 460]]);\n        op2SelMux.outNode = path[0];\n        ALU.input2Node = path[path.length - 1];\n\n        /* ALU Control -> ALU */\n        path = this.createPath([[840, 655], [915, 655], [915, 467.5]]);\n        ALUCtrl.outNode = path[0];\n        ALU.selOpNode = path[path.length - 1];\n\n        /* ALU -> WBSel Mux */\n        path = this.createPath([[935, 437.5], [960, 437.5], [960, 710], [1110, 710], [1110, 655], [1135, 655]]);\n        ALU.resultNode = path[0];\n        WBSelMux.setInputNodes(2, path[path.length - 1]);\n\n        /* WBSel Mux -> RF WriteData */\n        path = this.createPath([[1160, 640], [1180, 640], [1180, 730], [530, 730], [530, 590], [550, 590]]);\n        WBSelMux.outNode = path[0];\n        registerFile.inputWriteDataNode = path[path.length - 1];\n\n        /* RF ReadData2 -> DataMemory */\n        path = this.createPath([[830, 610], [985, 610]]);\n        readData2Node.addNeighbour(path[0]);\n        dataMemory.inputDataNode = path[path.length - 1];\n\n        /*\n         *Control signals\n         */\n\n        /* PCSel */\n        path = this.createPath([[222.5, 10], [222.5, 32.5]]);\n        controlUnit.PCSelNode = path[0];\n        PCSelMux.selInputNode = path[path.length - 1];\n\n        /* RegEnWrite */\n        path = this.createPath([[575, 10], [575, 350]]);\n        controlUnit.RegWriteEn = path[0];\n        registerFile.inputWriteEnNode = path[path.length - 1];\n\n        /* MemWrite */\n        path = this.createPath([[1010, 10], [1010, 200]]);\n        controlUnit.MemWrite = path[0];\n        dataMemory.writeEnNode = path[path.length - 1];\n\n        /* WBSel */\n        path = this.createPath([[1147.5, 10], [1147.5, 607.5]]);\n        controlUnit.WBSel = path[0];\n        WBSelMux.selInputNode = path[path.length - 1];\n\n        /* WASel */\n        path = this.createPath([[497.5, 790], [497.5, 577.5]]);\n        controlUnit.WASel = path[0];\n        WASelMux.selInputNode = path[path.length - 1];\n\n        /* ImmSel */\n        path = this.createPath([[720, 790], [720, 600]]);\n        controlUnit.ImmSel = path[0];\n        immSelect.controlNode = path[path.length - 1];\n\n        /* FuncSel */\n        path = this.createPath([[790, 790], [790, 680]]);\n        controlUnit.FuncSel = path[0];\n        ALUCtrl.controlNode = path[path.length - 1];\n\n        /* Op2Sel */\n        path = this.createPath([[862.5, 790], [862.5, 557.5]]);\n        controlUnit.Op2Sel = path[0];\n        op2SelMux.selInputNode = path[path.length - 1];\n    }\n\n    private createPath(path: number[][]): CircuitNode[] {\n        let pathNodes: CircuitNode[] = [];\n\n        pathNodes.push(new CircuitNode(path[0][0], path[0][1]));\n        let last = pathNodes[0];\n\n        for (let i = 1; i < path.length; i++) {\n            let node = new CircuitNode(path[i][0], path[i][1]);\n            last.addNeighbour(node);\n            pathNodes.push(node);\n            last = node;\n        }\n\n        pathNodes.forEach(el => this.elements.push(el));\n\n        return pathNodes;\n    }\n\n    draw() {\n        this.g.rescale();\n        this.g.clear(Config.backgroundColor);\n\n        this.elements.forEach(el => el.draw(this.g))\n    }\n\n    step() {\n        console.log(\"Step\");\n        this.elements.forEach(el => el.refresh());\n        this.elements.forEach(el => el.onFallingEdge());\n        this.elements.forEach(el => el.onRisingEdge());\n        this.draw();\n    }\n\n    load(parsed: Val[]) {\n        this.initialInstruct = parsed;\n        this.reset();\n    }\n\n    reset() {\n        this.elements = [];\n        this.create();\n        this.step();\n    }\n}","import Val, {VAL_ZERO_32b} from \"././Val\";\nimport InstructionMemory from \"./InstructionMemory\";\nimport InstructionHelper from \"./InstructionHelper\";\n\n\nexport default class Parser {\n    static parse(textContent : String) : Val[] {\n\n        let ret : Val[] = [];\n        let lines = textContent.split('\\n');\n        for(let i = 0; i < lines.length; i++) {\n             ret.push(Val.HexString(lines[i]));\n        }\n\n        while(ret.length < InstructionMemory.SIZE)\n            ret.push(VAL_ZERO_32b);\n\n        return ret;\n    }\n}","export function toggleFullScreen() {\n    let documentBody = document.body;\n\n    if (!this.isFullScreen) {\n        // @ts-ignoreç\n        if (documentBody.requestFullScreen) {\n            // @ts-ignoreç\n            documentBody.requestFullScreen();\n        } else if (documentBody.webkitRequestFullscreen) {\n            documentBody.webkitRequestFullscreen();\n            // @ts-ignoreç\n        } else if (documentBody.mozRequestFullScreen) {\n            // @ts-ignoreç\n            documentBody.mozRequestFullScreen();\n            // @ts-ignoreç\n        } else if (documentBody.msRequestFullscreen) {\n            // @ts-ignoreç\n            documentBody.msRequestFullscreen();\n        }\n        this.isFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            // @ts-ignoreç\n        } else if (document.msExitFullscreen) {\n            // @ts-ignoreç\n            document.msExitFullscreen();\n            // @ts-ignoreç\n        } else if (document.mozCancelFullScreen) {\n            // @ts-ignorec\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n        this.isFullScreen = false;\n    }\n}","import Simulator from \"./Simulator\";\nimport Parser from \"./Parser\";\nimport {toggleFullScreen} from \"./util\";\n\nlet canvas = <HTMLCanvasElement> document.getElementById(\"sim-canvas\");\nlet menuBar = <HTMLDivElement> document.getElementById(\"menu\");\nlet btnStep = <HTMLButtonElement> document.getElementById(\"btn-step\");\nlet btnPlay = <HTMLButtonElement> document.getElementById(\"btn-play\");\nlet btnPause = <HTMLButtonElement> document.getElementById(\"btn-pause\");\nlet txtCode = <HTMLTextAreaElement> document.getElementById(\"txt-code\");\nlet btnLoad = <HTMLButtonElement> document.getElementById(\"btn-load\");\nlet btnReset = <HTMLButtonElement> document.getElementById(\"btn-reset\");\nlet sim = new Simulator(canvas, Parser.parse(txtCode.textContent));\nlet play = false;\n\nlet resize = () => {\n    canvas.style.width = document.body.clientWidth + \"px\";\n    canvas.style.height = (document.body.clientHeight - menuBar.clientHeight) + \"px\";\n    sim.draw();\n};\n\nresize();\n\nwindow.addEventListener(\"resize\", () => resize());\n\n\nwindow.addEventListener(\"keydown\", evt => {\n    switch (evt.key) {\n        case \"s\":\n        case \"S\": {\n            sim.step();\n            break;\n        }\n\n        case \"r\":\n        case \"R\": {\n            sim.reset();\n            break;\n        }\n\n        case \"f\":\n        case \"F\": {\n            toggleFullScreen();\n            break;\n        }\n        case \"ArrowRight\":\n            console.log(\"->\")\n    }\n});\n\nbtnStep.addEventListener(\"click\", evt => {\n    sim.step();\n    btnPause.click()\n});\n\nbtnPlay.addEventListener(\"click\", evt => {\n    play = true;\n    btnPlay.disabled = true;\n    btnPause.disabled = false\n});\n\nbtnPause.addEventListener(\"click\", evt => {\n    play = false;\n    btnPlay.disabled = false;\n    btnPause.disabled = true\n});\n\nbtnLoad.addEventListener(\"click\", evt => {\n    let parsed = Parser.parse(txtCode.textContent);\n    if (parsed) sim.load(parsed)\n});\n\nbtnReset.addEventListener(\"click\", evt => sim.reset());\n\nsetInterval(() => {\n    if (play) {\n        sim.step();\n    }\n\n}, 1000);\n"]}