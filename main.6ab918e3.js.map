{"version":3,"sources":["../node_modules/split.js/dist/split.es.js","main.ts"],"names":["global","window","ssr","document","undefined","addEventListener","removeEventListener","getBoundingClientRect","gutterStartDragging","aGutterSize","bGutterSize","HORIZONTAL","NOOP","calc","filter","prefix","el","createElement","style","cssText","length","shift","isString","v","String","elementOrSelector","ele","querySelector","Error","getOption","options","propName","def","value","getGutterSize","gutterSize","isFirst","isLast","gutterAlign","defaultGutterFn","i","gutterDirection","gut","className","defaultElementStyleFn","dim","size","gutSize","defaultGutterStyleFn","obj","Split","idsOption","dimension","clientAxis","position","positionEnd","clientSize","elements","ids","Array","from","parent","parentNode","parentStyle","getComputedStyle","parentFlexDirection","flexDirection","sizes","map","minSize","minSizes","isArray","maxSize","Infinity","maxSizes","expandToMin","snapOffset","snapOffsets","dragInterval","direction","cursor","gutter","elementStyle","gutterStyle","setElementSize","Object","keys","forEach","prop","getSizes","element","getMousePosition","e","touches","adjust","offset","a","b","percentage","calculateSizes","aBounds","bBounds","start","end","trimToMin","sizesToTrim","parentSize","computedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","innerSize","reduce","excessPixels","toSpare","pixelSizes","pixelSize","elementGutterSize","elementMinSize","push","newPixelSize","takenPixels","Math","min","startDragging","button","dragging","preventDefault","move","dragOffset","round","call","bind","stop","userSelect","webkitUserSelect","MozUserSelect","pointerEvents","body","pairs","adjustToMin","pair","id","temp","gutterElement","setGutterSize","insertBefore","computedSize","setSizes","newSizes","trimmed","newSize","collapse","destroy","preserveStyles","preserveGutter","removeChild","_default","exports","default"],"mappings":"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","file":"main.6ab918e3.js","sourceRoot":"../src","sourcesContent":["// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar document = !ssr ? global.document : undefined;\n\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\nvar NOOP = function () { return false; };\n\n// Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\nvar calc = ssr\n    ? 'calc'\n    : ((['', '-webkit-', '-moz-', '-o-']\n          .filter(function (prefix) {\n              var el = document.createElement('div');\n              el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n              return !!el.style.length\n          })\n          .shift()) + \"calc\");\n\n// Helper function checks if its argument is a string-like type\nvar isString = function (v) { return typeof v === 'string' || v instanceof String; };\n\n// Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\nvar elementOrSelector = function (el) {\n    if (isString(el)) {\n        var ele = document.querySelector(el);\n        if (!ele) {\n            throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n        }\n        return ele\n    }\n\n    return el\n};\n\n// Helper function gets a property from the properties object, with a default fallback\nvar getOption = function (options, propName, def) {\n    var value = options[propName];\n    if (value !== undefined) {\n        return value\n    }\n    return def\n};\n\nvar getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n    if (isFirst) {\n        if (gutterAlign === 'end') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    } else if (isLast) {\n        if (gutterAlign === 'start') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    }\n\n    return gutterSize\n};\n\n// Default options\nvar defaultGutterFn = function (i, gutterDirection) {\n    var gut = document.createElement('div');\n    gut.className = \"gutter gutter-\" + gutterDirection;\n    return gut\n};\n\nvar defaultElementStyleFn = function (dim, size, gutSize) {\n    var style = {};\n\n    if (!isString(size)) {\n        style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n    } else {\n        style[dim] = size;\n    }\n\n    return style\n};\n\nvar defaultGutterStyleFn = function (dim, gutSize) {\n    var obj;\n\n    return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n};\n\n// The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\nvar Split = function (idsOption, options) {\n    if ( options === void 0 ) options = {};\n\n    if (ssr) { return {} }\n\n    var ids = idsOption;\n    var dimension;\n    var clientAxis;\n    var position;\n    var positionEnd;\n    var clientSize;\n    var elements;\n\n    // Allow HTMLCollection to be used as an argument when supported\n    if (Array.from) {\n        ids = Array.from(ids);\n    }\n\n    // All DOM elements in the split should have a common parent. We can grab\n    // the first elements parent and hope users read the docs because the\n    // behavior will be whacky otherwise.\n    var firstElement = elementOrSelector(ids[0]);\n    var parent = firstElement.parentNode;\n    var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n    var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;\n\n    // Set default options.sizes to equal percentages of the parent element.\n    var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n    // Standardize minSize and maxSize to an array if it isn't already.\n    // This allows minSize and maxSize to be passed as a number.\n    var minSize = getOption(options, 'minSize', 100);\n    var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n    var maxSize = getOption(options, 'maxSize', Infinity);\n    var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () { return maxSize; });\n\n    // Get other options\n    var expandToMin = getOption(options, 'expandToMin', false);\n    var gutterSize = getOption(options, 'gutterSize', 10);\n    var gutterAlign = getOption(options, 'gutterAlign', 'center');\n    var snapOffset = getOption(options, 'snapOffset', 30);\n    var snapOffsets = Array.isArray(snapOffset) ? snapOffset : ids.map(function () { return snapOffset; });\n    var dragInterval = getOption(options, 'dragInterval', 1);\n    var direction = getOption(options, 'direction', HORIZONTAL);\n    var cursor = getOption(\n        options,\n        'cursor',\n        direction === HORIZONTAL ? 'col-resize' : 'row-resize'\n    );\n    var gutter = getOption(options, 'gutter', defaultGutterFn);\n    var elementStyle = getOption(\n        options,\n        'elementStyle',\n        defaultElementStyleFn\n    );\n    var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (direction === HORIZONTAL) {\n        dimension = 'width';\n        clientAxis = 'clientX';\n        position = 'left';\n        positionEnd = 'right';\n        clientSize = 'clientWidth';\n    } else if (direction === 'vertical') {\n        dimension = 'height';\n        clientAxis = 'clientY';\n        position = 'top';\n        positionEnd = 'bottom';\n        clientSize = 'clientHeight';\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains its metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    //\n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n\n    function setElementSize(el, size, gutSize, i) {\n        // Split.js allows setting sizes via numbers (ideally), or if you must,\n        // by string, like '300px'. This is less than ideal, because it breaks\n        // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n        // make sure you calculate the gutter size by hand.\n        var style = elementStyle(dimension, size, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            el.style[prop] = style[prop];\n        });\n    }\n\n    function setGutterSize(gutterElement, gutSize, i) {\n        var style = gutterStyle(dimension, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            gutterElement.style[prop] = style[prop];\n        });\n    }\n\n    function getSizes() {\n        return elements.map(function (element) { return element.size; })\n    }\n\n    // Supports touch events, but not multitouch, so only the first\n    // finger `touches[0]` is counted.\n    function getMousePosition(e) {\n        if ('touches' in e) { return e.touches[0][clientAxis] }\n        return e[clientAxis]\n    }\n\n    // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n    // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n    // which allows the viewport to be resized without additional logic.\n    // Element a's size is the same as offset. b's size is total size - a size.\n    // Both sizes are calculated from the initial parent percentage,\n    // then the gutter size is subtracted.\n    function adjust(offset) {\n        var a = elements[this.a];\n        var b = elements[this.b];\n        var percentage = a.size + b.size;\n\n        a.size = (offset / this.size) * percentage;\n        b.size = percentage - (offset / this.size) * percentage;\n\n        setElementSize(a.element, a.size, this[aGutterSize], a.i);\n        setElementSize(b.element, b.size, this[bGutterSize], b.i);\n    }\n\n    // drag, where all the magic happens. The logic is really quite simple:\n    //\n    // 1. Ignore if the pair is not dragging.\n    // 2. Get the offset of the event.\n    // 3. Snap offset to min if within snappable range (within min + snapOffset).\n    // 4. Actually adjust each element in the pair to offset.\n    //\n    // ---------------------------------------------------------------------\n    // |    | <- a.minSize               ||              b.minSize -> |    |\n    // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n    // |    |  |                         ||                        |  |    |\n    // |    |  |                         ||                        |  |    |\n    // ---------------------------------------------------------------------\n    // | <- this.start                                        this.size -> |\n    function drag(e) {\n        var offset;\n        var a = elements[this.a];\n        var b = elements[this.b];\n\n        if (!this.dragging) { return }\n\n        // Get the offset of the event from the first side of the\n        // pair `this.start`. Then offset by the initial position of the\n        // mouse compared to the gutter size.\n        offset =\n            getMousePosition(e) -\n            this.start +\n            (this[aGutterSize] - this.dragOffset);\n\n        if (dragInterval > 1) {\n            offset = Math.round(offset / dragInterval) * dragInterval;\n        }\n\n        // If within snapOffset of min or max, set offset to min or max.\n        // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n        // Include the appropriate gutter sizes to prevent overflows.\n        if (offset <= a.minSize + a.snapOffset + this[aGutterSize]) {\n            offset = a.minSize + this[aGutterSize];\n        } else if (\n            offset >=\n            this.size - (b.minSize + b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.minSize + this[bGutterSize]);\n        }\n\n        if (offset >= a.maxSize - a.snapOffset + this[aGutterSize]) {\n            offset = a.maxSize + this[aGutterSize];\n        } else if (\n            offset <=\n            this.size - (b.maxSize - b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.maxSize + this[bGutterSize]);\n        }\n\n        // Actually adjust the size.\n        adjust.call(this, offset);\n\n        // Call the drag callback continously. Don't do anything too intensive\n        // in this callback.\n        getOption(options, 'onDrag', NOOP)(getSizes());\n    }\n\n    // Cache some important sizes when drag starts, so we don't have to do that\n    // continously:\n    //\n    // `size`: The total size of the pair. First + second + first gutter + second gutter.\n    // `start`: The leading side of the first element.\n    //\n    // ------------------------------------------------\n    // |      aGutterSize -> |||                      |\n    // |                     |||                      |\n    // |                     |||                      |\n    // |                     ||| <- bGutterSize       |\n    // ------------------------------------------------\n    // | <- start                             size -> |\n    function calculateSizes() {\n        // Figure out the parent size minus padding.\n        var a = elements[this.a].element;\n        var b = elements[this.b].element;\n\n        var aBounds = a[getBoundingClientRect]();\n        var bBounds = b[getBoundingClientRect]();\n\n        this.size =\n            aBounds[dimension] +\n            bBounds[dimension] +\n            this[aGutterSize] +\n            this[bGutterSize];\n        this.start = aBounds[position];\n        this.end = aBounds[positionEnd];\n    }\n\n    function innerSize(element) {\n        // Return nothing if getComputedStyle is not supported (< IE9)\n        // Or if parent element has no layout yet\n        if (!getComputedStyle) { return null }\n\n        var computedStyle = getComputedStyle(element);\n\n        if (!computedStyle) { return null }\n\n        var size = element[clientSize];\n\n        if (size === 0) { return null }\n\n        if (direction === HORIZONTAL) {\n            size -=\n                parseFloat(computedStyle.paddingLeft) +\n                parseFloat(computedStyle.paddingRight);\n        } else {\n            size -=\n                parseFloat(computedStyle.paddingTop) +\n                parseFloat(computedStyle.paddingBottom);\n        }\n\n        return size\n    }\n\n    // When specifying percentage sizes that are less than the computed\n    // size of the element minus the gutter, the lesser percentages must be increased\n    // (and decreased from the other elements) to make space for the pixels\n    // subtracted by the gutters.\n    function trimToMin(sizesToTrim) {\n        // Try to get inner size of parent element.\n        // If it's no supported, return original sizes.\n        var parentSize = innerSize(parent);\n        if (parentSize === null) {\n            return sizesToTrim\n        }\n\n        if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {\n            return sizesToTrim\n        }\n\n        // Keep track of the excess pixels, the amount of pixels over the desired percentage\n        // Also keep track of the elements with pixels to spare, to decrease after if needed\n        var excessPixels = 0;\n        var toSpare = [];\n\n        var pixelSizes = sizesToTrim.map(function (size, i) {\n            // Convert requested percentages to pixel sizes\n            var pixelSize = (parentSize * size) / 100;\n            var elementGutterSize = getGutterSize(\n                gutterSize,\n                i === 0,\n                i === sizesToTrim.length - 1,\n                gutterAlign\n            );\n            var elementMinSize = minSizes[i] + elementGutterSize;\n\n            // If element is too smal, increase excess pixels by the difference\n            // and mark that it has no pixels to spare\n            if (pixelSize < elementMinSize) {\n                excessPixels += elementMinSize - pixelSize;\n                toSpare.push(0);\n                return elementMinSize\n            }\n\n            // Otherwise, mark the pixels it has to spare and return it's original size\n            toSpare.push(pixelSize - elementMinSize);\n            return pixelSize\n        });\n\n        // If nothing was adjusted, return the original sizes\n        if (excessPixels === 0) {\n            return sizesToTrim\n        }\n\n        return pixelSizes.map(function (pixelSize, i) {\n            var newPixelSize = pixelSize;\n\n            // While there's still pixels to take, and there's enough pixels to spare,\n            // take as many as possible up to the total excess pixels\n            if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n                var takenPixels = Math.min(\n                    excessPixels,\n                    toSpare[i] - excessPixels\n                );\n\n                // Subtract the amount taken for the next iteration\n                excessPixels -= takenPixels;\n                newPixelSize = pixelSize - takenPixels;\n            }\n\n            // Return the pixel size adjusted as a percentage\n            return (newPixelSize / parentSize) * 100\n        })\n    }\n\n    // stopDragging is very similar to startDragging in reverse.\n    function stopDragging() {\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        if (self.dragging) {\n            getOption(options, 'onDragEnd', NOOP)(getSizes());\n        }\n\n        self.dragging = false;\n\n        // Remove the stored event listeners. This is why we store them.\n        global[removeEventListener]('mouseup', self.stop);\n        global[removeEventListener]('touchend', self.stop);\n        global[removeEventListener]('touchcancel', self.stop);\n        global[removeEventListener]('mousemove', self.move);\n        global[removeEventListener]('touchmove', self.move);\n\n        // Clear bound function references\n        self.stop = null;\n        self.move = null;\n\n        a[removeEventListener]('selectstart', NOOP);\n        a[removeEventListener]('dragstart', NOOP);\n        b[removeEventListener]('selectstart', NOOP);\n        b[removeEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = '';\n        a.style.webkitUserSelect = '';\n        a.style.MozUserSelect = '';\n        a.style.pointerEvents = '';\n\n        b.style.userSelect = '';\n        b.style.webkitUserSelect = '';\n        b.style.MozUserSelect = '';\n        b.style.pointerEvents = '';\n\n        self.gutter.style.cursor = '';\n        self.parent.style.cursor = '';\n        document.body.style.cursor = '';\n    }\n\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    function startDragging(e) {\n        // Right-clicking can't start dragging.\n        if ('button' in e && e.button !== 0) {\n            return\n        }\n\n        // Alias frequently used variables to save space. 200 bytes.\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        // Call the onDragStart callback.\n        if (!self.dragging) {\n            getOption(options, 'onDragStart', NOOP)(getSizes());\n        }\n\n        // Don't actually drag the element. We emulate that in the drag function.\n        e.preventDefault();\n\n        // Set the dragging property of the pair object.\n        self.dragging = true;\n\n        // Create two event listeners bound to the same pair object and store\n        // them in the pair object.\n        self.move = drag.bind(self);\n        self.stop = stopDragging.bind(self);\n\n        // All the binding. `window` gets the stop events in case we drag out of the elements.\n        global[addEventListener]('mouseup', self.stop);\n        global[addEventListener]('touchend', self.stop);\n        global[addEventListener]('touchcancel', self.stop);\n        global[addEventListener]('mousemove', self.move);\n        global[addEventListener]('touchmove', self.move);\n\n        // Disable selection. Disable!\n        a[addEventListener]('selectstart', NOOP);\n        a[addEventListener]('dragstart', NOOP);\n        b[addEventListener]('selectstart', NOOP);\n        b[addEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = 'none';\n        a.style.webkitUserSelect = 'none';\n        a.style.MozUserSelect = 'none';\n        a.style.pointerEvents = 'none';\n\n        b.style.userSelect = 'none';\n        b.style.webkitUserSelect = 'none';\n        b.style.MozUserSelect = 'none';\n        b.style.pointerEvents = 'none';\n\n        // Set the cursor at multiple levels\n        self.gutter.style.cursor = cursor;\n        self.parent.style.cursor = cursor;\n        document.body.style.cursor = cursor;\n\n        // Cache the initial sizes of the pair.\n        calculateSizes.call(self);\n\n        // Determine the position of the mouse compared to the gutter\n        self.dragOffset = getMousePosition(e) - self.end;\n    }\n\n    // adjust sizes to ensure percentage is within min size and gutter.\n    sizes = trimToMin(sizes);\n\n    // 5. Create pair and element objects. Each pair has an index reference to\n    // elements `a` and `b` of the pair (first and second elements).\n    // Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object and a gutter.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = i - 1` and `b = i`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |                     |                  |              |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    var pairs = [];\n    elements = ids.map(function (id, i) {\n        // Create the element object.\n        var element = {\n            element: elementOrSelector(id),\n            size: sizes[i],\n            minSize: minSizes[i],\n            maxSize: maxSizes[i],\n            snapOffset: snapOffsets[i],\n            i: i,\n        };\n\n        var pair;\n\n        if (i > 0) {\n            // Create the pair object with its metadata.\n            pair = {\n                a: i - 1,\n                b: i,\n                dragging: false,\n                direction: direction,\n                parent: parent,\n            };\n\n            pair[aGutterSize] = getGutterSize(\n                gutterSize,\n                i - 1 === 0,\n                false,\n                gutterAlign\n            );\n            pair[bGutterSize] = getGutterSize(\n                gutterSize,\n                false,\n                i === ids.length - 1,\n                gutterAlign\n            );\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (\n                parentFlexDirection === 'row-reverse' ||\n                parentFlexDirection === 'column-reverse'\n            ) {\n                var temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        //\n        // Create gutter elements for each pair.\n        if (i > 0) {\n            var gutterElement = gutter(i, direction, element.element);\n            setGutterSize(gutterElement, gutterSize, i);\n\n            // Save bound event listener for removal later\n            pair[gutterStartDragging] = startDragging.bind(pair);\n\n            // Attach bound event listener\n            gutterElement[addEventListener](\n                'mousedown',\n                pair[gutterStartDragging]\n            );\n            gutterElement[addEventListener](\n                'touchstart',\n                pair[gutterStartDragging]\n            );\n\n            parent.insertBefore(gutterElement, element.element);\n\n            pair.gutter = gutterElement;\n        }\n\n        setElementSize(\n            element.element,\n            element.size,\n            getGutterSize(\n                gutterSize,\n                i === 0,\n                i === ids.length - 1,\n                gutterAlign\n            ),\n            i\n        );\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair);\n        }\n\n        return element\n    });\n\n    function adjustToMin(element) {\n        var isLast = element.i === pairs.length;\n        var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n        calculateSizes.call(pair);\n\n        var size = isLast\n            ? pair.size - element.minSize - pair[bGutterSize]\n            : element.minSize + pair[aGutterSize];\n\n        adjust.call(pair, size);\n    }\n\n    elements.forEach(function (element) {\n        var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n        if (computedSize < element.minSize) {\n            if (expandToMin) {\n                adjustToMin(element);\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                element.minSize = computedSize;\n            }\n        }\n    });\n\n    function setSizes(newSizes) {\n        var trimmed = trimToMin(newSizes);\n        trimmed.forEach(function (newSize, i) {\n            if (i > 0) {\n                var pair = pairs[i - 1];\n\n                var a = elements[pair.a];\n                var b = elements[pair.b];\n\n                a.size = trimmed[i - 1];\n                b.size = newSize;\n\n                setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n                setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n            }\n        });\n    }\n\n    function destroy(preserveStyles, preserveGutter) {\n        pairs.forEach(function (pair) {\n            if (preserveGutter !== true) {\n                pair.parent.removeChild(pair.gutter);\n            } else {\n                pair.gutter[removeEventListener](\n                    'mousedown',\n                    pair[gutterStartDragging]\n                );\n                pair.gutter[removeEventListener](\n                    'touchstart',\n                    pair[gutterStartDragging]\n                );\n            }\n\n            if (preserveStyles !== true) {\n                var style = elementStyle(\n                    dimension,\n                    pair.a.size,\n                    pair[aGutterSize]\n                );\n\n                Object.keys(style).forEach(function (prop) {\n                    elements[pair.a].element.style[prop] = '';\n                    elements[pair.b].element.style[prop] = '';\n                });\n            }\n        });\n    }\n\n    return {\n        setSizes: setSizes,\n        getSizes: getSizes,\n        collapse: function collapse(i) {\n            adjustToMin(elements[i]);\n        },\n        destroy: destroy,\n        parent: parent,\n        pairs: pairs,\n    }\n};\n\nexport default Split;\n","import Split = require(\"split.js\");\nimport Simulator from \"./Simulator\";\nimport Parser from \"./util/Parser\";\nimport {toggleFullScreen} from \"./util/util\";\nimport Value from \"./util/Value\";\n\nlet canvas = <HTMLCanvasElement> document.getElementById(\"sim-canvas\");\nlet menuBar = <HTMLDivElement> document.getElementById(\"menu\");\nlet btnStep = <HTMLButtonElement> document.getElementById(\"btn-step\");\nlet btnPlay = <HTMLButtonElement> document.getElementById(\"btn-play\");\nlet btnPause = <HTMLButtonElement> document.getElementById(\"btn-pause\");\nlet txtCode = <HTMLTextAreaElement> document.getElementById(\"txt-code\");\nlet btnLoad = <HTMLButtonElement> document.getElementById(\"btn-load\");\nlet btnReset = <HTMLButtonElement> document.getElementById(\"btn-reset\");\n// let sim = new Simulator(canvas, Parser.parse(\"\"));\nlet play = false;\n\nconsole.log(Split)\n\nSplit([\"code\", \"simulator\"], {\n    sizes: [25, 75]\n});\n//\n// let resize = () => {\n//     canvas.style.width = document.body.clientWidth + \"px\";\n//     canvas.style.height = (document.body.clientHeight - menuBar.clientHeight) + \"px\";\n//     sim.draw();\n// };\n//\n// resize();\n//\n//\n//\n// window.addEventListener(\"resize\", () => resize());\n//\n// Value.main();\n//\n// window.addEventListener(\"keydown\", evt => {\n//     switch (evt.key) {\n//         case \"s\":\n//         case \"S\": {\n//             sim.step();\n//             break;\n//         }\n//\n//         case \"r\":\n//         case \"R\": {\n//             sim.reset();\n//             break;\n//         }\n//\n//         case \"f\":\n//         case \"F\": {\n//             toggleFullScreen();\n//             break;\n//         }\n//         case \"ArrowRight\":\n//             console.log(\"->\")\n//     }\n// });\n//\n// btnStep.addEventListener(\"click\", evt => {\n//     sim.step();\n//     btnPause.click()\n// });\n//\n// btnPlay.addEventListener(\"click\", evt => {\n//     play = true;\n//     btnPlay.disabled = true;\n//     btnPause.disabled = false\n// });\n//\n// btnPause.addEventListener(\"click\", evt => {\n//     play = false;\n//     btnPlay.disabled = false;\n//     btnPause.disabled = true\n// });\n//\n// btnLoad.addEventListener(\"click\", evt => {\n//     let parsed = Parser.parse(txtCode.textContent);\n//     if (parsed) sim.load(parsed)\n// });\n//\n// btnReset.addEventListener(\"click\", evt => sim.reset());\n//\n// setInterval(() => {\n//     if (play) {\n//         sim.step();\n//     }\n//\n// }, 100);\n"]}